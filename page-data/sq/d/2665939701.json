{"data":{"allMdx":{"nodes":[{"id":"b1d3cb34-c318-586b-9266-222d028078c6","frontmatter":{"title":"npm Documentation"},"rawBody":"---\ntitle: npm Documentation\n---\nimport {HeroLayout} from 'gatsby-theme-doctornpm'\nimport {Index} from 'gatsby-theme-doctornpm'\nexport default HeroLayout\n\n<Index depth='1' />\n\n"},{"id":"ca8a760e-3a4c-5184-a59d-d2242e27efcb","frontmatter":{"title":"About npm"},"rawBody":"---\ntitle: About npm\nredirect_from: [ /getting-started/what-is-npm ]\n---\n\nnpm is the world's largest software registry. Open source developers from every continent use npm to share and borrow packages, and many organizations use npm to manage private development as well.\n\nnpm consists of three distinct components:\n\n*  the website\n*  the Command Line Interface (CLI)\n*  the registry\n\nUse the [*website*](https://npmjs.com) to discover packages, set up profiles, and manage other aspects of your npm experience. For example, you can set up [organizations](https://www.npmjs.com/features) to manage access to public or private packages.\n\nThe [*CLI*](https://docs.npmjs.com/cli/npm) runs from a terminal, and is how most developers interact with npm.\n\nThe [*registry*](https://docs.npmjs.com/misc/registry) is a large public database of JavaScript software and the meta-information surrounding it.\n\n\n## Use npm to . . .\n\n* Adapt packages of code for your apps, or incorporate packages as they are.\n* Download standalone tools you can use right away.\n* Run packages without downloading using [npx](https://www.npmjs.com/package/npx).\n* Share code with any npm user, anywhere.\n* Restrict code to specific developers.\n* Create organizations to coordinate package maintenance, coding, and developers.\n* Form virtual teams by using organizations.\n* Manage multiple versions of code and code dependencies.\n* Update applications easily when underlying code is updated.\n* Discover multiple ways to solve the same puzzle.\n* Find other developers who are working on similar problems and projects.  \n\n## Getting started\n\nTo get started with npm, you can [create an account](https://www.npmjs.com/signup), which will be available at http://www.npmjs.com/~*yourusername*.\n\nAfter you set up an npm account, the next step is to use the command line interface (CLI) to [install npm][install-npm]. We look forward to seeing what you create!\n\n## Sharing packages and collaborating with others\n\nIf you choose to share your packages publicly, there is no cost. To use and share private packages, you need to upgrade your account. To share with others, create organizations, called **[npm organizations][orgs-docs]**,  and invite others to work with you, privately (for a fee) or publicly (for free). Or you can sign up for a private instance of npm for your company, called **[npm Enterprise](https://npmjs.com/enterprise)**, so you can develop packages internally that are not shared publicly.\n\n## Learn more\n\nTo learn more about npm as a product, upcoming new features, and interesting uses of npm, sign up for our newsletter at [npm-weekly](https://www.npmjs.com/npm-weekly), and be sure to follow [@npmjs](https://twitter.com/npmjs) on Twitter.\n\nFor mentoring, tutorials, and learning, visit [node school](https://nodeschool.io). Consider attending or hosting a nodeschool event (usually free!) at a site near you, or use the self-help tools you can find on the site.\n\n### CLI reference documentation\n\nWhile relevant CLI commands are covered throughout this user documentation, the CLI includes command line help, its own [documentation section, and instant help (man pages)][cli-docs].\n\n\n[orgs-docs]: /organizations\n[install-npm]: /downloading-and-installing-node-js-and-npm\n[cli-docs]: /cli-documentation\n"},{"id":"028ebb4b-3500-54d5-bf3f-b8a1f287451c","frontmatter":{"title":"npm Enterprise"},"rawBody":"---\ntitle: npm Enterprise\n---\n\n<Note>\n\n**Note:** npm Enterprise will be retired on June 30, 2021. For more information, please visit our [FAQ about npm Enterprise plans](/sunsetting-npm-enterprise).\n\n</Note>\n\n<Index />\n"},{"id":"04274fc7-1338-5e10-b60b-7be57c867f00","frontmatter":{"title":"Getting started"},"rawBody":"---\ntitle: Getting started\n---\n\n<Index />\n"},{"id":"d7674a58-c742-5bc8-bafe-b9e142e0d57d","frontmatter":{"title":"Integrations"},"rawBody":"---\ntitle: Integrations\n---\n\n<Index />\n"},{"id":"e0c85eb9-b9f8-5c9a-819b-1a7880d33b12","frontmatter":{"title":"Organizations"},"rawBody":"---\ntitle: Organizations\nredirect_from:\n  - /getting-started/working-with-orgs\n  - /orgs\n---\nimport {Link} from '@primer/components'\nimport shared from '../../src/shared.js'\n\n<>Organizations allow teams of contributors to read, write, and public and private packages.  Organizations are free when they publish public packages.  When organizations publish private packages, an npm Teams subscription is required. For more information on npm Teams pricing, see our <Link href=\"https://www.npmjs.com/pricing\">products page</Link>.</>\n\n<Index />\n"},{"id":"eccb2d02-faa7-565b-8b28-d64a7a57d101","frontmatter":{"title":"Packages and modules"},"rawBody":"---\ntitle: Packages and modules\n---\n\n<Index />\n"},{"id":"b6b595e6-dd79-5408-8a15-e0f1eb23f2f2","frontmatter":{"title":"CLI documentation"},"rawBody":"---\ntitle: CLI documentation\nredirect_from:\n  - /cli\n  - /cli-documentation\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/index.mdx\n---\n<Index depth=\"1\" />"},{"id":"cf3d1260-5cde-50ba-b9a5-7020064b4026","frontmatter":{"title":"CLI documentation"},"rawBody":"---\ntitle: CLI documentation\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/index.mdx\n---\n<Index depth=\"1\" />"},{"id":"7792add3-b60c-598e-a5a6-6f1340a1770a","frontmatter":{"title":"Billing and seat management"},"rawBody":"---\ntitle: Billing and seat management\n---\n\n<Index />\n"},{"id":"8a909138-f3e0-5a37-8cbc-33347a70dea6","frontmatter":{"title":"Purchasing or removing seats"},"rawBody":"---\ntitle: Purchasing or removing seats\n---\n\nAs an npm Enterprise billing manager, you can purchase additional seats for your instance, or remove seats you no longer need. If you remove seats, the credit card on file will not be charged for them starting with the next billing cycle.\n\nTo purchase or remove seats for your instance, contact your npm account manager or our [Sales team][sales-contact-form].\n\n\n[sales-contact-form]: https://www.npmjs.com/npm/contact-sales\n"},{"id":"5f525218-d271-5a8b-b4a8-ca7d5a6d1276","frontmatter":{"title":"Updating billing information"},"rawBody":"---\ntitle: Updating billing information\n---\n\nAs an npm Enterprise billing manager, you can update the payment method for your Enterprise instance by contacting your npm account manager or our [Sales team][sales-contact-form].\n\n\n[sales-contact-form]: https://www.npmjs.com/npm/contact-sales\n"},{"id":"f5c0e49d-2fdc-5bfe-9a73-ce1f78ea99dd","frontmatter":{"title":"Migration"},"rawBody":"---\ntitle: Migration\n---\n\n<Index />\n"},{"id":"c874c484-a127-5a65-bdcd-e4a5d4a15503","frontmatter":{"title":"Migrating from an existing npm Enterprise instance"},"rawBody":"---\ntitle: Migrating from an existing npm Enterprise instance\n---\nimport shared from '../../../src/shared.js'\n\n<>{shared['enterprise-migration-requirements'].text}</>\n\nTo migrate from a legacy npm Enterprise installation, use npm's [pneumatic-tubes][pneumatic-tubes] and follow the steps under \"[Importing from Legacy npm Enterprise][pneumatic-tubes-legacy]\".\n\n[pneumatic-tubes]: https://www.npmjs.com/package/pneumatic-tubes\n[pneumatic-tubes-legacy]: https://www.npmjs.com/package/pneumatic-tubes#importing-from-legacy-npm-enterprise\n"},{"id":"ad7f7036-1297-537a-877d-1005b5caaf90","frontmatter":{"title":"Migrating from an organization on the public registry"},"rawBody":"---\ntitle: Migrating from an organization on the public registry\nredirect_from:\n  - /migrating-from-an-org-on-the-public-registry\n---\nimport shared from '../../../src/shared.js'\n\n<>{shared['enterprise-migration-requirements'].text}</>\n\nTo migrate from an organization on the [public registry][pub-reg], use npm's [pneumatic-tubes][pneumatic-tubes] and follow the steps under \"[Importing from npm orgs][pneumatic-tubes-orgs]\".\n\n\n[pneumatic-tubes]: https://www.npmjs.com/package/pneumatic-tubes\n[pneumatic-tubes-orgs]: https://www.npmjs.com/package/pneumatic-tubes#importing-from-npm-orgs\n[pub-reg]: https://docs.npmjs.com/misc/registry.html\n"},{"id":"3d961e9e-72fa-508c-ac67-419cdc3bf3a3","frontmatter":{"title":"Configuring an authentication provider"},"rawBody":"---\ntitle: Configuring an authentication provider\n---\nimport shared from '../../../src/shared.js'\n\n<Note>\n<><strong>Note:</strong> To avoid being locked out of your instance, you must connect your npm Enterprise admin account to your SSO account immediately after configuring an authentication provider. If you are locked out of your instance, {shared['contact-enterprise-support'].text}.</>\n</Note>\n\nAs an Enterprise admin, you can configure your instance to use single sign-on (SSO) authentication through any external authentication provider that implements [OpenID Connect Core][oid-connect-core] and [OpenID Connect Discovery][oid-connect-discovery], such as [Auth0][auth0], [Azure Active Directory][azure], [Okta][okta], and [Google][google].\n\n1. Log in to your Enterprise instance using your temporary username and password.\n\n2. <>{shared['enterprise-admin-panel'].text}</>\n\n   <>{shared['enterprise-admin-panel'].image}</>\n\n3. Click \"settings\".\n\n   <>{shared['enterprise-admin-panel-settings'].image}</>\n\n4. On the Settings page, click \"Configure Single Sign-On\".\n\n   <Screenshot src=\"/enterprise/setup-and-configuration/sso-configure.png\" alt=\"Screenshot of the single sign-on configuration form\" />\n\n5. On the Single Sign-On configuration page, enter your SSO application settings:\n\n   * Domain: enter the base domain, without the `https://` prefix\n   * Client ID\n   * Client Secret\n\n   <Screenshot src=\"/enterprise/setup-and-configuration/sso-settings-form.png\" alt=\"Screenshot of the single sign-on settings form\" />\n\n6. Click **Save**.\n\n   <Screenshot src=\"/enterprise/setup-and-configuration/sso-save.png\" alt=\"Screenshot of the single sign-on settings save button\" />\n\n7. On your SSO provider application website, enter your npm Enterprise instance callback URL: `www.<company-name>.npme.io/sso/callback`.\n\n8. To connect your npm Enterprise admin account to your SSO account, visit `https://<company-name>.npme.io/login/via/1`.\n\n## Removing users from your authentication provider\n\nWhen you remove a user from your authentication provider, we also recommend [deactivating][deactivate-users] them in your instance.\n\n[OID-connect-core]: http://openid.net/specs/openid-connect-core-1_0.html\n[OID-connect-discovery]: http://openid.net/specs/openid-connect-discovery-1_0.html\n[auth0]: https://auth0.com/docs\n[azure]: https://docs.microsoft.com/en-us/azure/active-directory/manage-apps/configure-single-sign-on-portal\n[okta]: https://developer.okta.com/documentation/\n[google]: https://developers.google.com/identity/protocols/OpenIDConnect\n[deactivate-users]: viewing-deactivating-and-reactivating-users#deactivating-users\n"},{"id":"082be80b-9e2a-5afa-be6d-89dcb43a2132","frontmatter":{"title":"Defining a security policy"},"rawBody":"---\ntitle: Defining a security policy\n---\nimport shared from '../../../src/shared.js'\n\nAs an Enterprise admin, you can prevent the download of insecure packages. For example, this is useful for keeping vulnerable dependencies out of your applications. At the moment, you can choose from three different security policies:\n\n* Allow all packages.\n* Block packages with critical vulnerabilities.\n* Block all vulnerable packages.\n\n<Note>\n\n**Note:** Packages are only blocked if they are not locally cached. Whenever you change policy, we recommend clearing your global cache (`npm cache clear --force`) and doing a clean install of your project (`npm clean-install`).\n\n</Note>\n\nAll packages are allowed by default. To change your security policy:\n\n1. Log in to your Enterprise instance using your temporary username and password.\n\n2. <>{shared['enterprise-admin-panel'].text}</>\n\n   <>{shared['enterprise-admin-panel'].image}</>\n\n3. Click \"settings\".\n\n   <>{shared['enterprise-admin-panel-settings'].image}</>\n\n4. On the Settings page, under Security Policy, choose a policy.\n\n   <>{shared['enterprise-choose-security-policy'].image}</>\n\n5. Optionally provide a custom message for the install logs whenever a package is blocked.\n\n   <>{shared['enterprise-custom-blocking-message'].image}</>\n\n6. If present, check the \"I acknowledge that this policy may cause my builds to break\" box.\n\n   <Screenshot src=\"/enterprise/setup-and-configuration/acknowledge-blocking.png\" alt=\"Screenshot showing an acknowledgement of broken builds\" />\n\n7. Click \"Apply Policy\".\n\nIf `npm install` attempts to download a package that violates the policy, developers will see an error similar to the following.\n\n```\n$ npm i lodash@1.0.0\nnpm notice Could not download lodash 1.0.0 due to policy violations. Use `npm audit fix` to upgrade this dependency.\nnpm ERR! code E403\nnpm ERR! 403 Forbidden - GET https://registry.npmjs.com/lodash/-/lodash-1.0.0.tgz\n```\n\nTo fix this error, use `npm audit fix` to upgrade dependencies to versions that don't violate policy.\n"},{"id":"a2154393-8382-5812-a154-bda6575687f3","frontmatter":{"title":"Getting started with npm Enterprise"},"rawBody":"---\ntitle: Getting started with npm Enterprise\n---\n\nAs an npm Enterprise admin, once you have created a temporary username and password from the signup link for your new instance, you should:\n\n1. Log in to your npm Enterprise instance.\n2. [Configure SSO authentication][auth-config]\n3. Link your account to your SSO provider.\n4. [Create one or more organizations][create-orgs].\n5. Tell users to log in to the instance with their SSO credentials.\n6. [Add users to organizations and teams][add-org-users].\n7. Have users follow the steps in the \"[Getting started][getting-started]\" and \"[Packages and modules][pkg-module]\" documentation to [download Node.js and npm][download-npm], [configure their npm client][config-client], and [publish][publish-pkg] and [install][install-pkg] packages.\n\n\n[getting-started]: /getting-started\n[pkg-module]: /packages-and-modules\n[download-npm]: /downloading-and-installing-node-js-and-npm\n[config-client]: /configuring-your-registry-settings-as-an-npm-enterprise-user\n[publish-pkg]: /packages-and-modules/contributing-packages-to-the-registry\n[install-pkg]: /packages-and-modules/getting-packages-from-the-registry\n[admin-user]: /about-the-enterprise-admin-user\n[auth-config]: /configuring-an-authentication-provider\n[create-orgs]: /creating-an-org\n[add-org-users]: /adding-members-to-your-org\n"},{"id":"ad22bcc4-9203-5889-84d8-226f7176df31","frontmatter":{"title":"Setup and configuration"},"rawBody":"---\ntitle: Setup and configuration\n---\n\n<Index />\n"},{"id":"0dc80599-24eb-56b4-9b04-ae0c17482c9a","frontmatter":{"title":"Sunset"},"rawBody":"---\ntitle: Sunset\nredirect_from: [ /enterprise/end-of-life ]\n---\n\n<Index />\n"},{"id":"2ec69b9e-1f4f-577f-a6e0-2536382a3475","frontmatter":{"title":"Sunsetting npm Enterprise"},"rawBody":"---\ntitle: Sunsetting npm Enterprise\n---\n\nIn March 2020, npm was acquired by GitHub. On June 30, 2020, we notified npm Enterprise (npmE) customers of our intent to sunset npm Enterprise. **npm Enterprise will be supported until June 30, 2021**, and we will renew contracts for npmE until that date. We encourage all npmE customers to evaluate and migrate to GitHub Packages.\n\n## Evaluating and migrating to GitHub Packages\n\n* **How do I trial or migrate to GitHub Packages?**  \n  Customers who already have one of GitHub’s Free, Teams, or Enterprise Cloud plans already receive monthly storage and bandwidth resources for GitHub Packages as part of their plan. To begin evaluating GitHub Packages, visit our documentation on [publishing with GitHub Packages](https://help.github.com/en/packages/publishing-and-managing-packages/publishing-a-package) directly from your repository.\n\n* **My source code is not on GitHub. How can I trial GitHub Packages?**  \n  The combined npm and GitHub team has reached out to customers to work on detailed transition plans, including free trials for GitHub Enterprise Cloud. However, if you still need assistance, please [contact the GitHub team](https://enterprise.github.com/contact).\n\n* **Where do I turn for customer support during this time?**  \n  Please visit [npm support](https://www.npmjs.com/support) for assistance with your npm Enterprise plan.\n\nFor further assistance or to answer any questions not covered here (including those regarding billing and payments specific to your account), please reach out your GitHub and npm contacts, or contact [the GitHub sales team](https://enterprise.github.com/contact).\n"},{"id":"7ba6a68f-16fd-5385-98a9-32f86eb9693a","frontmatter":{"title":"About the Enterprise admin user"},"rawBody":"---\ntitle: About the Enterprise admin user\n---\n\nThe Enterprise admin user has the most far-reaching permissions on the Enterprise instance and can manage instance settings, organizations, users, and packages. For a full list of Enterprise admin permissions, see \"[npm Enterprise roles and permissions][ent-roles]\".\n\n[ent-roles]: npm-enterprise-roles-and-permissions\n"},{"id":"cec6043a-f815-520e-b5e6-b1c6e591e5b8","frontmatter":{"title":"Creating and managing organizations and teams"},"rawBody":"---\ntitle: Creating and managing organizations and teams\nredirect_from:\n  - /creating-and-managing-orgs-and-teams\n---\n\nTo create and manage organizations and teams, see our [organizations documentation][orgs]:\n\n* [Creating and managing organizations][create-org]\n* [Managing organization members][members]\n* [Managing teams][teams]\n* [Managing organization packages][pkgs]\n\n\n[orgs]: organizations\n[create-org]: organizations/creating-and-managing-organizations\n[members]: organizations/managing-organization-members\n[teams]: organizations/managing-teams\n[pkgs]: organizations/managing-organization-packages\n"},{"id":"66a624ce-3bd4-5545-a120-07a8f0ac5035","frontmatter":{"title":"Demoting an admin to a non-admin user"},"rawBody":"---\ntitle: Demoting an admin to a non-admin user\n---\nimport shared from '../../../src/shared.js'\n\n<Note>\n\n**Note:** Demoting an admin does not deactivate them. To deactivate a user, follow the steps in \"[Viewing, deactivating, and reactivating users](viewing-deactivating-and-reactivating-users#deactivating-users)\n\n</Note>\n\nIf an admin on your npm Enterprise instance no longer needs to take admin actions on the instance (e.g. configuring SSO, activating and deactivating users, or inviting users to the instance), as an Enterprise instance admin, you can demote the admin to a non-admin user.\n\n1. If you haven't already, add the user to your instance, either by having them sign in with your SSO provider, or by inviting them to create a username and password on the instance.\n2. <>Have an Enterprise admin {shared['contact-enterprise-support'].text} with the name of the admin to be demoted to a non-admin user.</>\n"},{"id":"be7e8db0-14fe-58a9-b964-132644ffdb70","frontmatter":{"title":"User management"},"rawBody":"---\ntitle: User management\n---\n\nHow to manage users on your npm Enterprise instance.\n\n<Index />\n"},{"id":"8ac8e0c7-d788-5ada-86f4-91b0c48a1161","frontmatter":{"title":"Managing user security"},"rawBody":"---\ntitle: Managing user security\n---\n\nTo keep your npm Enterprise instance secure, as an Enterprise instance admin, you should:\n\n* Limit the number of additional Enterprise admins on your instance.\n* [Deactivate users][deactivate-users] who no longer need access to your npm Enterprise instance (such as users who have left the company) as quickly as possible.\n\nUsers of your npm Enterprise instance should:\n\n* [Enable 2FA][2FA] on their Enterprise instance accounts.\n* Use [read-only tokens][read-only-tokens] to delegate access to private packages to other tools in their workflow.\n\n\n[deactivate-users]: viewing-deactivating-and-reactivating-users\n[2FA]: configuring-two-factor-authentication\n[read-only-tokens]: about-authentication-tokens\n"},{"id":"b1f2eddf-6b11-549a-a556-89965c1c45b6","frontmatter":{"title":"npm Enterprise roles and permissions"},"rawBody":"---\ntitle: npm Enterprise roles and permissions\n---\n\n| Action | Billing manager | Admin user | End user |\n|:-------|:---------------:|:----------:|:--------:|\n| Update payment method and billing info (via npm account manager) | X | | |\n| Purchase additional seats (via npm account manager) | X | | |\n| View all users of the instance |  | X | |\n| Activate users on the instance |  | X | |\n| Deactivate users on the instance |  | X | |\n| Configure an authentication provider |  | X | |\n| View, publish, and install packages from the instance registry | | X | X |\n| Create organizations |  | X | X |\n| Add/remove users to/from organizations and instance |  | X<sup>1</sup> |  |\n| Add/remove users to/from organizations who are already initialized on the instance |  | X<sup>1</sup> | X<sup>1</sup> |\n| Create, delete, and manage teams | | X<sup>2</sup> | X<sup>2</sup> |\n| Add/remove packages to/from organization teams |  | X<sup>2</sup> | X<sup>2</sup> |\n| Create and publish packages in the organization scope | | X | X |\n\n<sup>1</sup> User must be an organization owner.<br/>\n<sup>2</sup> User must be an organization owner or team admin.<br/>\n"},{"id":"5c03ac7b-844a-5be9-90ed-f1c4490e8201","frontmatter":{"title":"Permanently deleting a user"},"rawBody":"---\ntitle: Permanently deleting a user\n---\nimport shared from '../../../src/shared.js'\n\n<>As an npm Enterprise admin, you can {shared['contact-enterprise-support'].text} to completely remove a user from your Enterprise instance if they will never need to access the instance again.</>\n\n<Note>\n\n**Note:** When permanently deleting a user, you will work with npm support to make sure any organizations and packages they own are transferred to other users on your Enterprise instance.\n\n</Note>\n"},{"id":"8e63553f-a893-5735-98ba-f5ad711bc98a","frontmatter":{"title":"Promoting a non-admin user to admin"},"rawBody":"---\ntitle: Promoting a non-admin user to admin\n---\nimport shared from '../../../src/shared.js'\n\n<Note>\n\n**Note:** To keep your Enterprise instance secure, we recommend limiting the number of Enterprise admins on your instance.\n\n</Note>\n\nIf you need multiple users in your Enterprise instance to be able to take admin actions (e.g. configure SSO, activate and deactivate users, or invite users to the instance), you can promote a non-admin user to admin.\n\n1. If you haven't already, add the user to your instance, either by having them sign in with your SSO provider, or by inviting them to create a username and password on the instance.\n2. <>Have an Enterprise admin {shared['contact-enterprise-support'].text} with the name of the user to be promoted to admin.</>\n"},{"id":"29a67ba4-f2be-5a26-a543-8b7379bbc944","frontmatter":{"title":"Viewing, deactivating, and reactivating users"},"rawBody":"---\ntitle: Viewing, deactivating, and reactivating users\n---\nimport shared from '../../../src/shared.js'\n\nAs an Enterprise admin, you can view active and inactive users, deactivate users who no longer need access to your npm Enterprise instance (such as users who have left your company), and reactivate inactive users.\n\n## Viewing users\n\nAs an npm Enterprise admin, you can see a list of all the current users of your instance, including non-admin end users and other instance admins.\n\n1. <>{shared['enterprise-instance-login'].text}</>\n\n2. <>{shared['enterprise-admin-panel'].text}</>\n\n   <>{shared['enterprise-admin-panel'].image}</>\n\n3. To view a complete list of users, click the \"Manage users\" tab.\n\n   <Screenshot src=\"/enterprise/user-management/manage-users.png\" alt=\"Screenshot of the manage users button\" />\n\n## Deactivating users\n\nAs an npm Enterprise admin, you can deactivate users who no longer need access to your npm Enterprise instance -- for example, users who have left the company or whose responsibilities have changed.\n\nDeactivating a user will invalidate their login tokens, but will not delete organizations or packages they owned. A deactivated user will remain visible in the \"Manage users\" panel and can be reactivated by an admin user.\n\n1. <>{shared['enterprise-instance-login'].text}</>\n\n2. <>{shared['enterprise-admin-panel'].text}</>\n\n   <>{shared['enterprise-admin-panel'].image}</>\n\n3. Locate the user name of the user you want to deactivate, then next to their name, click \"deactivate\".\n\n   <Screenshot src=\"/enterprise/user-management/deactivate-user.png\" alt=\"Screenshot of the deactivate user button\" />\n\n## Reactivating inactive users\n\n<Note>\n\n**Note:** When you reactivate a user, they will need to re-enable [two-factor authentication](https://docs.npmjs.com/configuring-two-factor-authentication) on their npm Enterprise instance account.\n\n</Note>\n\nAs an npm Enterprise admin, you can reactivate an inactive user of your instance to allow them to log in again.\n\n1. <>{shared['enterprise-instance-login'].text}</>\n\n2. <>{shared['enterprise-admin-panel'].text}</>\n\n   <>{shared['enterprise-admin-panel'].image}</>\n\n3. Locate the user name of the user you want to reactivate, then next to their name, click \"activate\".\n\n   <Screenshot src=\"/enterprise/user-management/activate-user.png\" alt=\"Screenshot of the activate user button\" />\n"},{"id":"e76706a2-24c0-5973-8df1-57d96ab264c9","frontmatter":{"title":"About npm CLI versions"},"rawBody":"---\ntitle: About npm CLI versions\nslug: /about-npm-versions\n---\n\nThe npm command line interface (CLI) is released on a regular cadence. We recommend installing the release that supports your workflow:\n\n- [latest release](#the-latest-release-of-npm): the most recent stable version.\n- [next release](#the-next-release-of-npm): the version in current development.\n\n## The `latest` release of npm\n\nThe `latest` release of npm is the most recent stable version. When you install Node.js, npm is automatically installed. However, npm is released more frequently than Node.js, so to install the latest stable version of npm, on the command line, run:\n\n```\nnpm install npm@latest -g\n```\n\n## The `next` release of npm\n\n<Note>\n\nThe `next` release of npm may contain features that do not match the features ultimately released in the `latest` stable version of npm.\n\nMore.\n\n</Note>\n\nThe `next` release of npm is the version undergoing current development; it has the latest changes and newest set of features.\n\nThe `next` release of npm is the most recent unreleased version of npm that is eventually released as the `latest` version. You may want to update your npm client to the `next` release to test your packages against it before `latest` is released.\n\nTo update to the `next` release of npm, on the command line, run:\n\n```\nnpm install npm@next -g\n```\n\n<Note>\n\nDepending on the development cycle, `npm install npm@next -g` may reinstall the `latest` release of npm.\n\n</Note>\n"},{"id":"70ed15c8-fb9b-54d6-bd3f-e683b63729f6","frontmatter":{"title":"Configuring your registry settings as an npm Enterprise user"},"rawBody":"---\ntitle: Configuring your registry settings as an npm Enterprise user\n---\n\n<div class=\"note\">\n\n<span class=\"bold\">Note:</span> npm Enterprise requires npm 4.4.x or greater. To download the latest version of npm, on the command line, run <code class=\"highlighter-rouge\">\n[sudo] npm install npm -g</code>\n\n</div>\n\nYou can configure your npm client to publish to and install from your private npm Enterprise registry by:\n\n* Setting your company's npm Enterprise registry as your default registry (recommended)\n* Using npmrc to managing multiple profiles for different registries\n* Configuring scopes to point to different registries\n\n## Setting your company's npm Enterprise registry as your default registry\n\nThe easiest way to publish to and install from your company's npm Enterprise registry is to set it as your default registry.\n\nOn the command line, run the following command, replacing \"your-registry\" with the name of your company's npm Enterprise registry:\n\n```\nnpm config set registry https://registry.your-registry.npme.io/\n```\n\n## Using npmrc to managing multiple profiles for different registries\n\nIf you need to publish and install packages to and from different registries -- for example, an npm Enterprise registry for work-related code, and the npmjs.com public registry for open source projects -- you can create and manage a separate npm user profile for each registry using the [npmrc](https://www.npmjs.com/package/npmrc) tool.\n\n### Overview\n\n- [Install npmrc](#install-npmrc)\n- [Create an npm Enterprise profile](#create-an-npm-enterprise-profile)\n- [Create a profile for the public npm registry](#create-a-profile-for-the-public-npm-registry)\n- [Switch profiles with npmrc](#switch-profiles-with-npmrc)\n\n### Install npmrc\n\nTo install npmrc, on the command line, run\n\n```\nnpm i npmrc -g\n```\n\n### Create an npm Enterprise profile\n\nAfter installing npmrc, you can create a profile to access your company's Enterprise registry.\n\n1. To create an npm Enterprise profile, on the command line, run `npmrc -c name-of-profile`. For example, to create a profile called \"work\", run the following command:\n    ```\n    npmrc -c work\n    ```\n2. To set an npm Enterprise registry for the profile, run the following command, replacing your-company-registry with the name of your company's npm Enterprise registry:\n    ```\n    npm config set registry https://registry.your-company-registry.npme.io/\n    ```\n\n### Create a profile for the public npm registry\n\nAfter you have created your npm Enterprise profile, you can create a second profile for a different registry, such as the [public npm registry](https://registry.npmjs.com).\n\n1. To create a profile for the public registry, on the command line, run `npmrc -c name-of-profile`. For example, to create a profile called \"open-source\", run `npmrc -c open-source`.\n2. To set the public registry for your open source profile, run the following command:\n    ```\n    npm config set registry https://registry.npmjs.org/\n    ```\n\n### Switch profiles with npmrc\n\nTo switch profiles, on the command line, run the following command,\nreplacing `profile-name` with the name of your profile:\n\n```\n  npmrc profile-name\n```\n\n## Configuring scopes to point to different registries\n\nYou can also map different scopes to different npm registries. For example, to use the scope `@company-scope` from your npm Enterprise registry, while continuing to install public packages from the public npm registry, run the following command, replacing `@company-scope` with the scope, and `company-registry` with the name of your company's npm Enterprise registry:\n\n```\n  npm login --scope=@company-scope --registry=https://registry.company-registry.npme.io/\n```\n\n\n[download-install]: downloading-and-installing-node-js-and-npm\n"},{"id":"578fd137-ccf1-5a39-ac65-dc1b61e4552d","frontmatter":{"title":"Downloading and installing Node.js and npm"},"rawBody":"---\ntitle: Downloading and installing Node.js and npm\nredirect_from: [ /getting-started/installing-node ]\n---\n\nTo publish and install packages to and from the public npm registry or your company's npm Enterprise registry, you must install Node.js and the npm command line interface using either a Node version manager or a Node installer. **We strongly recommend using a Node version manager like [nvm](https://github.com/nvm-sh/nvm) to install Node.js and npm.** We do not recommend using a Node installer, since the Node installation process installs npm in a directory with local permissions and can cause permissions errors when you run npm packages globally.\n\n<Note>\n\n**Note:** npm Enterprise requires npm 4.4.x or greater. To download the latest version of npm, on the command line, run the following command:\n\n```\nnpm install -g npm\n```\n\n</Note>\n\n## Overview\n\n- [Checking your version of npm and Node.js](#checking-your-version-of-npm-and-node-js)\n- [Using a Node version manager to install Node.js and npm](#using-a-node-version-manager-to-install-node-js-and-npm)\n- [Using a Node installer to install Node.js and npm](#using-a-node-installer-to-install-node-js-and-npm)\n\n## Checking your version of npm and Node.js\n\nTo see if you already have Node.js and npm installed and check the installed version, run the following commands:\n\n```\nnode -v\nnpm -v\n```\n\n## Using a Node version manager to install Node.js and npm\n\nNode version managers allow you to install and switch between multiple versions of Node.js and npm on your system so you can test your applications on multiple versions of npm to ensure they work for users on different versions.\n\n### OSX or Linux Node version managers\n\n* [nvm](https://github.com/creationix/nvm)\n* [n](https://github.com/tj/n)\n\n### Windows Node version managers\n\n* [nodist](https://github.com/marcelklehr/nodist)\n* [nvm-windows](https://github.com/coreybutler/nvm-windows)\n\n## Using a Node installer to install Node.js and npm\n\nIf you are unable to use a Node version manager, you can use a Node installer to install both Node.js and npm on your system.\n\n* [Node.js installer](https://nodejs.org/en/download/)\n* [NodeSource installer](https://github.com/nodesource/distributions)\n\nIf you use Linux, we recommend that you use a NodeSource installer.\n\n### OS X or Windows Node installers\n\nIf you're using OS X or Windows, use one of the installers from the [Node.js download page](https://nodejs.org/en/download/). Be sure to install the version labeled **LTS**. Other versions have not yet been tested with npm.\n\n### Linux or other operating systems Node installers\n\nIf you're using Linux or another operating system, use one of the following installers:\n\n- [NodeSource installer](https://github.com/nodesource/distributions) (recommended)\n- One of the installers on the [Node.js download page](https://nodejs.org/en/download/)\n\nOr see [this page](https://nodejs.org/en/download/package-manager/) to install npm for Linux in the way many Linux developers prefer.\n\n\n### Less-common operating systems\n\nFor more information on installing Node.js on a variety of operating systems, see [this page][pkg-mgr].\n\n\n[pkg-mgr]: https://nodejs.org/en/download/package-manager/\n"},{"id":"79ab481a-0efa-5b4f-b2c4-f82b9ae653d9","frontmatter":{"title":"Configuring your local environment"},"rawBody":"---\ntitle: Configuring your local environment\n---\n\n<Index />\n"},{"id":"bd1bfca2-2a86-59b0-ace2-91898b372f5d","frontmatter":{"title":"Logging in to an npm Enterprise registry from the command line"},"rawBody":"---\ntitle: Logging in to an npm Enterprise registry from the command line\n---\n\nThe steps for logging in to your company's npm Enterprise registry will depend how you [configured your npm registry settings][ent-reg-config].\n\n- [Logging in with your default registry set to your company's npm Enterprise registry](#logging-in-with-your-default-registry-set-to-your-company-s-npm-enterprise-registry)\n- [Logging in with npmrc](#logging-in-with-npmrc)\n- [Logging in with a scope configured to point to an npm Enterprise registry](#logging-in-with-a-scope-configured-to-point-to-an-npm-enterprise-registry)\n\n## Logging in with your default registry set to your company's npm Enterprise registry\n\n1. On the command line, type the following command:\n    ```\n    npm login\n    ```\n2. When prompted, provide your SSO credentials.\n\n## Logging in with npmrc\n\n1. On the command line, switch to your npm Enterprise profile:\n    ```\n    npmrc work\n    ```\n2. Run the following command:\n    ```\n    npm login\n    ```\n3. When prompted, provide your SSO credentials.\n\n## Logging in with a scope configured to point to an npm Enterprise registry\n\n1. On the command line, type the following command:\n    ```\n    npm login --registry=https://registry.company-name.npme.io\n    ```\n2. When prompted, provide your SSO credentials.\n\n\n[ent-reg-config]: configuring-your-registry-settings-as-an-npm-enterprise-user\n[2fa]: about-two-factor-authentication\n"},{"id":"e317af43-c1dc-5eaa-b2ff-670f443fe466","frontmatter":{"title":"Changing your npm username"},"rawBody":"---\ntitle: Changing your npm username\n---\nimport shared from '../../../src/shared.js'\n\n<>To change your npm username, {shared['contact-support'].text}</>.\n\n"},{"id":"422eb896-23dc-5cdc-869a-0399d18eabd7","frontmatter":{"title":"Deleting your npm user account"},"rawBody":"---\ntitle: Deleting your npm user account\n---\nimport shared from '../../../src/shared.js'\n\n<>To delete your npm user account, {shared['contact-support'].text}</>.\n\n"},{"id":"79918654-ea33-5d1b-93ed-9deccb835597","frontmatter":{"title":"Managing your npm user account"},"rawBody":"---\ntitle: Managing your npm user account\n---\n\n<Index />\n"},{"id":"e37b4024-bb00-5906-9fd6-5dd28afd9438","frontmatter":{"title":"Managing your profile settings"},"rawBody":"---\ntitle: Managing your profile settings\nredirect_from:\n  - /getting-started/modifying_your_profile_from_command_line\n---\nimport shared from '../../../src/shared.js'\n\nYou can manage settings for your user account profile from the web or command line.\n\n## Managing user account profile settings from the web\n\nFrom the web, you can change the following user profile settings:\n\n* Avatar\n* Password\n* Full name\n* GitHub user name\n* Twitter user name\n* Email address added to package metadata\n* Two-factor authentication status\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['profile-settings'].text}</>\n\n   <>{shared['profile-settings'].image}</>\n\n## Managing user account profile settings from the command line\n\n<Note>\n\n**Note:** Your npm client must be version 5.5.1 or higher to change your account settings from the CLI. To update to the latest version of npm, on the command line, run `npm install npm@latest -g`\n\n</Note>\n\n### Viewing user account profile settings from the command line\n\nTo view your user profile settings from the CLI, on the command line, run the following command:\n\n```\nnpm profile get\n```\n\n<Screenshot src=\"/getting-started/managing-your-npm-user-account/profile-settings-cli.png\" alt=\"Screenshot of command-line interface profile settings table\" />\n\n### Updating user account profile settings from the command line\n\nFrom the CLI, you can change the following properties for your user account:\n\n* `email`\n* `two-factor auth`\n* `fullname`\n* `homepage`\n* `freenode`\n* `twitter`\n* `github`\n* `password`\n\n1. On the command line, type the following command, replacing `property` with the name of the property, and `value` with the new value:\n\n   ```\n   npm profile set <prop> <value>\n   ```\n\n2. When prompted, provide your current password.\n\n3. If you have enabled two-factor authentication on your account, when prompted, enter a one-time password.\n\nFor more details, see the `profile` [command line documentation](https://docs.npmjs.com/cli/profile).\n\n#### Setting a password from the command line\n\n1. On the command line, type the following command:\n\n  ```\n  npm profile set password\n  ```\n\n2. When prompted, provide your current password.\n\n3. When prompted, type a new password.\n\n<Note>\n\nTo protect your account, when you reset your password from the command line, it must:\n\n* be longer than 10 characters\n* not contain part of your username\n* not be on [this list of common passwords](https://www.npmjs.com/signup/common-passwords)\n* not be in the \"[Have I Been Pwned](https://haveibeenpwned.com/)\" breach database\n\n</Note>\n\n#### Configuring two-factor authentication from the command line\n\nEnabling two-factor authentication on your account helps protect against unauthorized access to your account and packages.\n\nTo enable, configure, and disable two-factor authentication from the command line, see \"[Configuring two-factor authentication](/configuring-two-factor-authentication#configuring-2fa-from-the-command-line)\".\n"},{"id":"7cc320ea-bfc9-518f-812a-45547039cc5f","frontmatter":{"title":"Downgrading to a free user account plan"},"rawBody":"---\ntitle: Downgrading to a free user account plan\n---\nimport shared from '../../../src/shared.js'\n\n<Note>\n\n**Note:** This article only applies to users of the public npm registry.\n\n</Note>\n\nIf you have a paid user account, but no longer need private packages, you can downgrade your paid organization to a free organization. When you downgrade from a paid to a free organization, you will lose the ability to install and publish private packages at the end of your last paid billing cycle. Your private packages will _not_ be made publicly visible when you downgrade to a free plan.\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['billing-info'].text}</>\n\n   <>{shared['billing-info'].image}</>\n\n3. <>{shared['billing-downgrade-selection'].text}</>\n\n   <>{shared['billing-downgrade-selection'].image}</>\n\n4. <>{shared['billing-downgrade-confirm'].text}</>\n\n   <>{shared['billing-downgrade-confirm'].image}</>\n"},{"id":"6c308500-2421-504c-95c4-32388d387e13","frontmatter":{"title":"Paying for your npm user account"},"rawBody":"---\ntitle: Paying for your npm user account\n---\n\n<Index />\n"},{"id":"f4c7df46-ea19-5170-aa87-9739c39c6d49","frontmatter":{"title":"Updating user account billing settings"},"rawBody":"---\ntitle: Updating user account billing settings\n---\nimport shared from '../../../src/shared.js'\n\n<Note>\n\n**Note:** This article only applies to users of the public npm registry.\n\n</Note>\n\nYou can update the credit card used to pay for your paid user account plan. Updating your credit card will not change your billing cycle date, and the new credit card will be charged on the next billing cycle.\n\n<><strong>Note:</strong> If the credit card used to pay for your paid user account plan expires, or we are otherwise are unable to charge your card, you have a grace period of {shared['grace-period'].text} to update the card.</>\n\n## Updating credit card information\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['billing-info'].text}</>\n\n   <>{shared['billing-info'].image}</>\n\n3. <>{shared['payment-info'].text}</>\n\n   <>{shared['payment-info'].image}</>\n\n4. <>{shared['billing-form'].text}</>\n\n   <>{shared['billing-form'].image}</>\n\n5. <>{shared['payment-info-button'].text}</>\n\n   <>{shared['payment-info-button'].image}</>\n\n6. <>{shared['billing-creditcard-form'].text}</>\n\n   <>{shared['billing-creditcard-form'].image}</>\n\n7. <>{shared['payment-remember-me'].text}</>\n\n   <>{shared['payment-remember-me'].image}</>\n\n8. <>{shared['billing-update-card'].text}</>\n\n   <>{shared['billing-update-card'].image}</>\n\n## Updating billing receipt email and extra receipt information\n\nYou can update the email address used for receipts, and add extra information to the receipt for your paid user account plan, such as your business name, VAT identification number, or address of record. Updated billing information will appear on all receipts immediately.\n\n<Note>\n\n**Note:** The billing email is used for receipts only and is not required to match the email address of the person whose card is used to pay for the paid user account plan.\n\n</Note>\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['billing-info'].text}</>\n\n   <>{shared['billing-info'].image}</>\n\n3. <>{shared['billing-history'].text}</>\n\n   <>{shared['billing-history'].image}</>\n\n4. <>{shared['billing-receipt-settings'].text}</>\n\n   <>{shared['billing-receipt-settings'].image}</>\n\n5. <>{shared['billing-extra-info'].text}</>\n\n   <>{shared['billing-extra-info'].image}</>\n\n6. <>{shared['billing-extra-receipt-email'].text}</>\n\n   <>{shared['billing-extra-receipt-email'].image}</>\n\n7. <>{shared['billing-extra-save'].text}</>\n\n   <>{shared['billing-extra-save'].image}</>\n\n"},{"id":"13c754b6-7b70-529c-a1a8-c540b1ef50bb","frontmatter":{"title":"Upgrading to a paid user account plan"},"rawBody":"---\ntitle: Upgrading to a paid user account plan\n---\nimport shared from '../../../src/shared.js'\n\n<Note>\n\n**Note:** This article only applies to users of the public npm registry.\n\n</Note>\n\nIf you need to install and publish private packages, you can upgrade to a paid user account plan. Our paid user account plan costs $7 per month. For more information, see the \"npm account\" column on our [pricing page](https://www.npmjs.com/pricing).\n\nYour paid plan and billing cycle will start when you submit your credit card information, and you will be charged for the first month immediately.\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['billing-info'].text}</>\n\n   <>{shared['billing-info'].image}</>\n\n3. Under \"change plan\", click **Upgrade Plan ($7/User)**.\n\n   <Screenshot src=\"/getting-started/paying-for-your-npm-user-account/change-plan.png\" alt=\"Screenshot of the change payment plan button\" />\n\n4. Under \"Want to upgrade?\", click **Enable Private Publishing for $7/mo**.\n\n   <Screenshot src=\"/getting-started/paying-for-your-npm-user-account/enable-private-publishing.png\" alt=\"Screenshot showing the enable private publishing button\" />\n\n5. <>{shared['billing-form'].text}</>\n\n   <>{shared['billing-form'].image}</>\n\n6. <>{shared['payment-info-button'].text}</>\n\n   <>{shared['payment-info-button'].image}</>\n\n7. <>{shared['billing-creditcard-form'].text}</>\n\n   <Screenshot src=\"/getting-started/paying-for-your-npm-user-account/billing-upgrade-form.png\" alt=\"Screenshot of the payment form\" />\n\n8. <>{shared['payment-remember-me'].text}</>\n\n   <>{shared['payment-remember-me'].image}</>\n\n9. Click **Pay $7.00**.\n\n  <Screenshot src=\"/getting-started/paying-for-your-npm-user-account/billing-upgrade-button.png\" alt=\"Screenshot of the payment confirmation button\" />\n\n"},{"id":"77f08661-8284-5820-9d8a-aa0bff904c38","frontmatter":{"title":"Viewing, downloading, and emailing receipts for your npm user account"},"rawBody":"---\ntitle: Viewing, downloading, and emailing receipts for your npm user account\n---\nimport shared from '../../../src/shared.js'\n\n<Note>\n\n**Note:** This article only applies to users of the public npm registry.\n\n</Note>\n\nYou can view, download, and email receipts for the complete billing history of your npm user account.\n\n## Viewing receipts\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['billing-info'].text}</>\n\n   <>{shared['billing-info'].image}</>\n\n3. <>{shared['billing-history'].text}</>\n\n   <>{shared['billing-history'].image}</>\n\n4. <>{shared['billing-view'].text}</>\n\n   <>{shared['billing-view'].image}</>\n\n## Downloading receipts\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['billing-info'].text}</>\n\n   <>{shared['billing-info'].image}</>\n\n3. <>{shared['billing-history'].text}</>\n\n   <>{shared['billing-history'].image}</>\n\n4. <>{shared['billing-download'].text}</>\n\n   <>{shared['billing-download'].image}</>\n\n5. <>{shared['billing-download-checked'].text}</>\n\n   <>{shared['billing-download-checked'].image}</>\n\n## Emailing receipts\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['billing-info'].text}</>\n\n   <>{shared['billing-info'].image}</>\n\n3. <>{shared['billing-history'].text}</>\n\n   <>{shared['billing-history'].image}</>\n\n4. <>{shared['billing-email'].text}</>\n\n   <>{shared['billing-email'].image}</>\n\n5. <>{shared['billing-email-checked'].text}</>\n\n   <>{shared['billing-email-checked'].image}</>\n\n6. <>{shared['billing-email-receipt'].text}</>\n\n   <>{shared['billing-email-receipt'].image}</>\n\n7. Click **Send**.\n"},{"id":"5cd676bc-96f5-503a-9801-5c4f47c906d9","frontmatter":{"title":"About two-factor authentication"},"rawBody":"---\ntitle: About two-factor authentication\nredirect_from: [ /getting-started/using-two-factor-authentication ]\n---\n\nTwo-factor authentication (2FA) protects against unauthorized access to your account by confirming your identity using:\n\n* something you know (such as your username and password)\n* something you have (such as a phone or tablet)\n\nWhen you enable 2FA, we will prompt you for a unique one-time password when you perform certain actions on your account or on packages to which you have write access, depending on your 2FA configuration.\n\n<Note>\n\n**Note:** Two-factor authentication provides the best possible security for your account against attackers. We strongly recommend enabling 2FA on your account as soon as possible after you sign up.\n\n</Note>\n\n## Two-factor authentication modes on npm\n\nTwo-factor authentication on npm can be enabled for authorization only, or authorization and writes.\n\n### Authorization only\n\nIf you enable 2FA for authorization only, we will request a one-time password for certain authorized actions.\n\n| Action                                            | CLI command                        |\n| :------------------------------------------------ | :--------------------------------- |\n| Log in to npm                                     | `npm login`                        |\n| Change profile settings (including your password) | `npm profile set`                  |\n| Change 2FA modes for your user account            | `npm profile enable-2fa auth-only` |\n| Disable 2FA for your user account                 | `npm profile disable-2fa`          |\n\n### Authorization and writes\n\nIf you enable 2FA for authorization and writes, we will request a one-time password for certain authorized actions, as well as write actions.\n\n| Action                                            | CLI command                                      |\n| :------------------------------------------------ | :----------------------------------------------- |\n| Log in to npm                                     | [`npm login`][login]                             |\n| Change profile settings (including your password) | [`npm profile set`][profile-set]                 |\n| Change 2FA modes for your user account            | [`npm profile enable-2fa auth-and-writes`][2fa-enable] |\n| Disable 2FA for your user account                 | [`npm profile disable-2fa`][2fa-disable]         |\n| Create tokens                                     | [`npm token create`][token-create]               |\n| Revoke tokens                                     | [`npm token revoke`][token-revoke]               |\n| Publish packages                                  | [`npm publish`][publish]                         |\n| Unpublish packages                                | [`npm unpublish`][unpublish]                     |\n| Deprecate packages                                | [`npm deprecate`][deprecate]                     |\n| Change package visibility                         | [`npm access public/restricted`][access]         |\n| Change user and team package access               | [`npm access grant/revoke`][access]              |\n| [Change package 2FA requirements][pkg-2fa]        | N/A                                              |\n\n\n[login]: https://docs.npmjs.com/cli/adduser\n[profile-set]: https://docs.npmjs.com/cli/profile\n[2fa-enable]: https://docs.npmjs.com/cli/profile\n[2fa-disable]: https://docs.npmjs.com/cli/profile\n[token-create]: https://docs.npmjs.com/cli/token\n[token-revoke]: https://docs.npmjs.com/cli/token\n[publish]: https://docs.npmjs.com/cli/publish\n[unpublish]: https://docs.npmjs.com/cli/unpublish\n[deprecate]: https://docs.npmjs.com/cli/deprecate\n[access]: https://docs.npmjs.com/cli/access\n[pkg-2fa]: requiring-2fa-for-package-publishing-and-settings-modification\n"},{"id":"d5a9a1bb-509b-5d30-8793-2167b550a5b7","frontmatter":{"title":"Configuring two-factor authentication"},"rawBody":"---\ntitle: Configuring two-factor authentication\n---\nimport shared from '../../../src/shared.js'\n\nYou can enable two-factor authentication (2FA) on your npm user account to protect against unauthorized access to your account and packages.\n\n## Prerequisites\n\nBefore you enable 2FA on your npm user account, you must:\n\n* Update your npm client to version 5.5.1 or higher.\n* Install an authenticator application that can generate one-time passwords (such as [Authy](https://authy.com/download/) or [Google Authenticator](https://support.google.com/accounts/answer/1066447)) on a mobile device or second computer that will always be available when you work in your npm account.\n\n<Note>\n\n**Note:** npm does not accept SMS (text-to-phone) as a 2FA method.\n\n</Note>\n\n## Configuring 2FA on the web\n\n### Enabling 2FA on the web\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['profile-settings'].text}</>\n\n   <>{shared['profile-settings'].image}</>\n\n3. On the profile settings page, under \"Two-Factor Authentication\", click **Enable 2FA**.\n\n   <Screenshot src=\"/getting-started/setting-up-your-npm-user-account/2fa-enable.png\" alt=\"Screenshot showing Enable 2FA button\" />\n\n4. On the 2FA settings page, select the mode you would like to enable. For more information, see \"[Two-factor authentication modes on npm](about-two-factor-authentication#two-factor-authentication-modes-on-npm)\".\n\n   <Screenshot src=\"/getting-started/setting-up-your-npm-user-account/2fa-auth-pub-select.png\" alt=\"Screenshot showing 2FA types\" />\n\n5. Click **Submit**.\n\n   <Screenshot src=\"/getting-started/setting-up-your-npm-user-account/2fa-auth-pub-submit.png\" alt=\"Screenshot showing 2FA submit button\" />\n\n6. Open your authenticator application on your phone, and, on the two-step verification page, scan the QR code with your phone.\n\n7. Enter the code generated by the app, then click **Verify**.\n\n   <Screenshot src=\"/getting-started/setting-up-your-npm-user-account/2fa-verify.png\" alt=\"Screenshot showing 2FA verification\" />\n\n8. On the recovery code page, copy the recovery codes to your computer or other safe location that is not your second factor device. We recommend using a password manager to save your recovery codes. **If you are unable to access your phone, you will need to enter a recovery code when prompted for a one-time password.**\n\n9. Click **Go back to settings**.\n\n   <Screenshot src=\"/getting-started/setting-up-your-npm-user-account/go-back-to-settings.png\" alt=\"Screenshot showing the Go back to settings button\" />\n\n### Removing 2FA on the web\n\nIf you have 2FA enabled, you can remove it from your profile settings page.\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['profile-settings'].text}</>\n\n   <>{shared['profile-settings'].image}</>\n\n3. On the profile settings page, under \"Two-Factor Authentication\", click **Modify 2FA**.\n\n   <Screenshot src=\"/getting-started/setting-up-your-npm-user-account/2fa-modify.png\" alt=\"Screenshot showing Modify 2FA button\" />\n\n4. On the 2FA settings page, under \"What should we protect?\", select \"Disable\".\n\n   <Screenshot src=\"/getting-started/setting-up-your-npm-user-account/2fa-disable.png\" alt=\"Screenshot showing Disable 2FA button\" />\n\n5. Click **Submit**.\n\n   <Screenshot src=\"/getting-started/setting-up-your-npm-user-account/2fa-disable-submit.png\" alt=\"Screenshot showing Disable 2FA submit button\" />\n\n## Configuring 2FA from the command line\n\n### Enabling 2FA from the command line\n\n<Note>\n\n**Note:** Settings you configure on the command line will also apply to your profile settings on the npm website.\n\n</Note>\n\n1. On the command line, type the [`npm profile`](/cli/profile) command along with the option for the 2FA mode you want to enable:\n  * To enable 2FA for authorization and writes, type:<br/>\n  `npm profile enable-2fa auth-and-writes`\n  * To enable 2FA for authorization only, type:<br/>\n  `npm profile enable-2fa auth-only`\n\n2. To add npm to your authenticator application, using the device with the app, you can either:\n  * scan the QR code displayed on the command line.\n  * type the number displayed below the QR code.\n\n3. When prompted to add an OTP code from your authenticator, on the command line, enter a one-time password generated by your authenticator app.\n\n### Sending a one-time password from the command line\n\nIf you have enabled 2FA auth-and-writes, you will need to send the OTP from the command line for certain commands to work. To do this, append  `--otp=123456` (where *123456* is the code generated by your authenticator) at the end of the command. Here are a few examples:\n\n```\nnpm publish [<tarball>|<folder>][--tag <tag>] --otp=123456\nnpm owner add <user > --otp=123456\nnpm owner rm <user> --otp=123456\nnpm dist-tags add <pkg>@<version> [<tag>] --otp=123456\nnpm access edit [<package>) --otp=123456\nnpm unpublish [<@scope>/]<pkg>[@<version>] --otp=123456\n```\n\n### Removing 2FA from the command line\n\n1. On the command line, type the following command:\n\n   ```\n   npm profile disable-2fa\n   ```\n\n2. When prompted, enter your npm password:\n\n   <Prompt>npm password:</Prompt>\n\n3. When prompted for a one-time password, enter a password from your authenticator app:\n\n   <Prompt>Enter one-time password from your authenticator: <PromptReply>123456</PromptReply></Prompt>\n\n## Resolving OTP errors\n\nIf you are entering what seems to be a valid OTP but you see an error, be sure that you are using the correct authenticator account. If you have multiple authenticator accounts, using an OTP from the wrong account will cause an error.\n\nIf you see an error when you enter a valid OTP, check that you are using the correct authenticator account.\n\nAlso, when you reset two-factor authentication after it has been disabled, the authenticator might create a second account with the same name. Please see the authenticator documentation to delete the old account.\n\n"},{"id":"e0e794c3-ad30-5e3a-98b1-0b4611178d1c","frontmatter":{"title":"Creating a new user account on the public registry"},"rawBody":"---\ntitle: Creating a new user account on the public registry\n---\n\nIf you do not already have an npm user account, you can create an account in order to share and download Javascript packages on the public registry.\n\n<Note>\n\n**Note:** If you are using an npm Enterprise registry, you must log in with your SSO credentials instead of creating an account. For more information, contact your company's Enterprise admin.\n\n</Note>\n\n## Creating an account on the website\n\n1. Go to the [npm signup page](https://www.npmjs.com/signup)\n\n2. In the user signup form, type in the fields:\n   - **Username:** The username that will be displayed when you publish packages or interact with other npm users on npmjs.com. Your username must be lower case, and can contain hyphens and numerals.\n   - **Email address:** Your public email address will be added to the metadata of your packages and will be visible to anyone who downloads your packages. We will also send email to this account when you update packages, as well as occasional product updates and information.\n   - **Password**: Your password must meet [our password guidelines](creating-a-strong-password).\n\n   <Screenshot src=\"/getting-started/setting-up-your-npm-user-account/signup-form.png\" alt=\"Screenshot of the signup form\" />\n\n3. Read the [End User License Agreement](https://www.npmjs.com/policies/terms) and [Privacy Policy](https://www.npmjs.com/policies/privacy), and indicate that you agree to them.\n   <Screenshot src=\"/getting-started/setting-up-your-npm-user-account/privacy-policy.png\" alt=\"Screenshot of the privacy policy\" />\n\n4. Click **Create An Account**.\n   <Screenshot src=\"/getting-started/setting-up-your-npm-user-account/create-account-button.png\" alt=\"Screenshot of the create account button\" />\n\n<Note>\n\n**Note:** After signing up for an npm account, you will receive an account verification email. You must verify your email address in order to publish packages to the registry.\n\n</Note>\n\n## Testing your new account with npm login\n\nUse the <a href=\"https://docs.npmjs.com/cli/adduser\">`npm login`</a> command to test logging in to your new account.\n\n<Note>\n\n**Note:** If you misspell your existing account username when you log in with the `npm login` command, you will create a new account with the misspelled name. For help with accidentally-created accounts, <a href=\"https://www.npmjs.com/support\">contact npm Support</a>.\n\n</Note>\n\n1. On the command line, type the following command:\n\n    ```\n    npm login\n    ```\n\n2. When prompted, enter your username, password, and email address.\n3. If you have [two-factor authentication](about-two-factor-authentication) enabled, when prompted, enter a one-time password.\n4. To test that you have successfully logged in, type:\n\n    ```\n    npm whoami\n    ```\n\n    Your npm username should be displayed.\n\n"},{"id":"d4778273-0d95-5d86-a2ef-432443c2a492","frontmatter":{"title":"Creating a strong password"},"rawBody":"---\ntitle: Creating a strong password\n---\n\nSecure your npm account with a strong and unique password using a password manager.\n\nYou must choose or generate a password for your npm account that:\n\n* is longer than 10 characters\n* does not match or significantly contain your username, e.g. do not use 'username123'\n* is not a [commonly used password](https://www.npmjs.com/signup/common-passwords)\n* has not been compromised and known to the [Have I Been Pwned](https://haveibeenpwned.com/) breach database\n\nTo keep your account secure, we recommend you follow these best practices:\n\n* Use a password manager, such as [LastPass](https://lastpass.com/) or [1Password](https://1password.com/), to generate a password more than 16 characters.\n* Generate a unique password for npm. If you use your npm password elsewhere and that service is compromised, then attackers or other malicious actors could use that information to access your npm account.\n* Configure two-factor authentication for your account. For more information, see \"About two-factor authentication.\"\n* Never share your password, even with a potential collaborator. Each person should use their own personal account on npm. For more information on ways to collaborate, see: \"[npm organizations](/organizations)\".\n\nWhen you type a password to sign in, create an account, or change your password, npm will check if the password you entered is considered weak according to datasets like HaveIBeenPwned. The password may be identified as weak even if you have never used that password before.\n\nnpm only inspects the password at the time you type it, and never stores the password you entered in plaintext. For more information, see [HaveIBeenPwned](https://haveibeenpwned.com/).\n"},{"id":"84f0a524-25f4-5345-bc50-a418eb566be7","frontmatter":{"title":"Setting up your npm user account"},"rawBody":"---\ntitle: Setting up your npm user account\n---\n\n<Index />\n"},{"id":"19a60933-a190-5116-9334-a0093ff6349c","frontmatter":{"title":"Recovering your 2FA-enabled account"},"rawBody":"---\ntitle: Recovering your 2FA-enabled account\n---\n\nWhen you have two-factor access enabled on your account, and you lose the ability to provide the one-time password, you may be able to recover your account.\n\n### Misplaced second factor device\n\nIf you have misplaced the device that provided second-factor authentication, you can use the recovery codes generated when you enabled 2FA to access your account.\n\n1. Locate the recovery codes generated when you enabled 2FA on your account.\n2. If you are logged out, on the command line, log in using your npm username and npm password.\n\n    ```\n    npm login\n    ```\n\n3. When prompted for an OTP, enter a recovery code.\n4. Once you are logged in, type `npm profile disable-2fa` and enter your npm password if prompted.  \n5. Enter an unused recovery code when you see this prompt:\n\n   <Prompt>Enter one-time password from your authenticator:</Prompt>\n\n5. npm will confirm that two-factor authentication has been disabled.\n6. type `npm profile enable-2fa` to re-enable 2FA, assign a different device to your account, and generate new recovery codes.\n\n<Note>\n\n**Note:** Using the recovery codes to re-enable 2FA may create a second authenticator account with the same npm account name.\n\nTo delete the old authenticator account, follow the steps for the authenticator.\n\n</Note>\n\n### Misplaced recovery codes\n\nIf you have misplaced both the device that provided second-factor authentication and your recovery codes, we may be unable to help you recover your account. If you have any questions, please [contact npm Support][contact-support].\n\n\n[contact-support]: https://www.npmjs.com/support\n"},{"id":"bf88e123-0fc5-597b-8001-0c977af5a301","frontmatter":{"title":"Common errors"},"rawBody":"---\ntitle: Common errors\nredirect_from:\n  - /troubleshooting/if-your-npm-is-broken\n  - /troubleshooting/try-clearing-the-npm-cache\n  - /troubleshooting/common-errors\n---\n\n## Errors\n\n- [Broken npm installation](#broken-npm-installation)\n- [Random errors](#random-errors)\n- [No compatible version found](#no-compatible-version-found)\n- [Permissions errors](#permissions-errors)\n- [`Error: ENOENT, stat 'C:\\Users\\<user>\\AppData\\Roaming\\npm'` on Windows 7](#error-enoent-stat-cusersuserappdataroamingnpm-on-windows-7)\n- [No space](#no-space)\n- [No git](#no-git)\n- [Running a Vagrant box on Windows fails due to path length issues](#running-a-vagrant-box-on-windows-fails-due-to-path-length-issues)\n- [npm only uses `git:` and `ssh+git:` URLs for GitHub repos, breaking proxies](#npm-only-uses-git-and-sshgit-urls-for-github-repos-breaking-proxies)\n- [SSL error](#ssl-error)\n- [SSL-intercepting proxy](#ssl-intercepting-proxy)\n- [Not found / Server error](#not-found--server-error)\n- [Invalid JSON](#invalid-json)\n- [Many `ENOENT` / `ENOTEMPTY` errors in output](#many-enoent--enotempty-errors-in-output)\n- [`cb() never called!` when using shrinkwrapped dependencies](#cb-never-called-when-using-shrinkwrapped-dependencies)\n- [npm login errors](#npm-login-errors)\n- [`npm` hangs on Windows at `addRemoteTarball`](#npm-hangs-on-windows-at-addremotetarball)\n- [npm not running the latest version on a Windows machine](#npm-not-running-the-latest-version-on-a-windows-machine)\n\n## Broken npm installation\n\nIf your npm is broken:\n\n- On Mac or Linux, [reinstall npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm).\n- Windows: If you're on Windows and you have a broken installation, the easiest thing to do is to reinstall node from the official installer (see [this note about installing the latest stable version](try-the-latest-stable-version-of-npm#upgrading-on-windows)).\n\n## Random errors\n\n* Some strange issues can be resolved by simply running `npm cache clean` and trying again.\n* If you are having trouble with `npm install`, use the `-verbose` option to see more details.\n\n## No compatible version found\n\nYou have an outdated npm. [Please update to the latest stable npm](try-the-latest-stable-version-of-npm).\n\n## Permissions errors\n\nPlease see the discussions in \"[Downloading and installing Node.js and npm](downloading-and-installing-node-js-and-npm)\" and \"[Resolving EACCES permissions errors when installing packages globally](#resolving-eacces-permissions-errors-when-installing-packages-globally)\" for ways to avoid and resolve permissions errors.\n\n## `Error: ENOENT, stat 'C:\\Users\\<user>\\AppData\\Roaming\\npm'` on Windows 7\n\nThe error `Error: ENOENT, stat 'C:\\Users\\<user>\\AppData\\Roaming\\npm'` on Windows 7 is a consequence of [joyent/node#8141](https://github.com/joyent/node/issues/8141), and is an issue with the Node installer for Windows. The workaround is to ensure that `C:\\Users\\<user>\\AppData\\Roaming\\npm` exists and is writable with your normal user account.\n\n## No space\n\n```\nnpm ERR! Error: ENOSPC, write\n```\n\nYou are trying to install on a drive that either has no space, or has no permission to write.\n\n* Free some disk space or\n* Set the tmp folder somewhere with more space: `npm config set tmp /path/to/big/drive/tmp` or\n* Build Node yourself and install it somewhere writable with lots of space.\n\n## No git\n\n```\nnpm ERR! not found: git\nENOGIT\n```\n\nYou need to [install git](http://git-scm.com/book/en/Getting-Started-Installing-Git). Or, you may need to add your git information to your npm profile. You can do this from the command line or the website. For more information, see \"[Managing your profile settings](managing-your-profile-settings)\".\n\n## Running a Vagrant box on Windows fails due to path length issues\n\n**[@drmyersii](https://github.com/drmyersii)** went through what sounds like a lot of painful trial and error to come up with a working solution involving Windows long paths and some custom Vagrant configuration:\n\n> [This is the commit that I implemented it in](https://github.com/renobit/vagrant-node-env/commit/bdf15f2f301e2b1660b839875e34f172ea8be227), but I'll go ahead and post the main snippet of code here:\n>\n> ```ruby\n> config.vm.provider \"virtualbox\" do |v|\n>     v.customize [\"sharedfolder\", \"add\", :id, \"--name\", \"www\", \"--hostpath\", ((\"//?/\" + File.dirname(__FILE__) + \"/www\").gsub(\"/\",\"\\\\\"))]\n> end\n>\n> config.vm.provision :shell, inline: \"mkdir /home/vagrant/www\"\n> config.vm.provision :shell, inline: \"mount -t vboxsf -o uid=`id -u vagrant`,gid=`getent group vagrant | cut -d: -f3` > www /home/vagrant/www\", run: \"always\"\n> ```\n>\n> In the code above, I am appending ```\\\\?\\``` to the current directory absolute path. This will actually force the Windows API to allow an increase in the MAX_PATH variable (normally capped at 260). Read more about [max path](https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%28v=vs.85%29.aspx#maxpath). This is happening during the sharedfolder creation which is intentionally handled by VBoxManage and not Vagrant's \"synced_folder\" method. The last bit is pretty self-explanatory; we create the new shared folder and then make sure it's mounted each time the machine is accessed or touched since Vagrant likes to reload its mounts/shared folders on each load.\n\n## npm only uses `git:` and `ssh+git:` URLs for GitHub repos, breaking proxies\n\n**[@LaurentGoderre](https://github.com/LaurentGoderre)** fixed this with [some Git trickery](https://github.com/npm/npm/issues/5257#issuecomment-60441477):\n\n> I fixed this issue for several of my colleagues by running the following two commands:\n>\n> ```\n> git config --global url.\"https://github.com/\".insteadOf git@github.com:\n> git config --global url.\"https://\".insteadOf git://\n> ```\n>\n> One thing we noticed is that the `.gitconfig` used is not always the one expected so if you are on a machine that modified the home path to a shared drive, you need to ensure that your `.gitconfig` is the same on both your shared drive and in `c:\\users\\[your user]\\`\n\n## SSL Error\n\n```\nnpm ERR! Error: 7684:error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol:openssl\\ssl\\s23_clnt.c:787:\n```\n\nYou are trying to talk SSL to an unencrypted endpoint. More often than not, this is due to a [proxy](/misc/config#proxy) [configuration](/misc/config#https-proxy) [error](/misc/config#cafile) (see also [this helpful, if dated, guide](http://jjasonclark.com/how-to-setup-node-behind-web-proxy)). In this case, you do **not** want to disable `strict-ssl` – you may need to set up a CA / CA file for use with your proxy, but it's much better to take the time to figure that out than disabling SSL protection.\n\n```\nnpm ERR! Error: SSL Error: CERT_UNTRUSTED\n```\n\n```\nnpm ERR! Error: SSL Error: UNABLE_TO_VERIFY_LEAF_SIGNATURE\n```\n\nThis problem will happen if you're running Node 0.6. Please upgrade to node 0.8 or above. [See this post for details](http://blog.npmjs.org/post/71267056460/fastly-manta-loggly-and-couchdb-attachments).\n\nYou could also try these workarounds: `npm config set ca \"\"` or `npm config set strict-ssl false`\n\n```\nnpm ERR! Error: SSL Error: SELF_SIGNED_CERT_IN_CHAIN\n```\n\n[npm no longer supports its self-signed certificates](http://blog.npmjs.org/post/78085451721/npms-self-signed-certificate-is-no-more)\n\nEither:\n\n* upgrade your version of npm `npm install npm -g --ca=\"\"`\n* tell your current version of npm to use known registrars `npm config set ca=\"\"`\n\nIf this does not fix the problem, then you may have an SSL-intercepting proxy.\n(For example, https://github.com/npm/npm/issues/7439#issuecomment-76024878)\n\n## SSL-intercepting proxy\n\nUnsolved. See https://github.com/npm/npm/issues/9282\n\n## Not found / Server error\n\n```\nnpm http 404 https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.7.0.tgz\nnpm ERR! fetch failed https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.7.0.tgz\nnpm ERR! Error: 404 Not Found\n```\n\n```\nnpm http 500 https://registry.npmjs.org/phonegap\n```\n\n* It's most likely a temporary npm registry glitch. Check [npm server status](http://status.npmjs.org/) and try again later.\n* If the error persists, perhaps the published package is corrupt. Contact the package owner and have them publish a new version of the package.\n\n## Invalid JSON\n\n```\nError: Invalid JSON\n```\n\n```\nnpm ERR! SyntaxError: Unexpected token <\n```\n\n```\nnpm ERR! registry error parsing json\n```\n\n* Possible temporary npm registry glitch, or corrupted local server cache.\nRun `npm cache clean` and/or try again later.\n* This can be caused by corporate proxies that give HTML\nresponses to `package.json` requests. Check npm's proxy [configuration](/misc/config).\n* Check that it's not a problem with a package you're trying to install\n(e.g. invalid `package.json`).\n\n## Many `ENOENT` / `ENOTEMPTY` errors in output\n\nnpm is written to use resources efficiently on install, and part of this is that it tries to do as many things concurrently as is practical. Sometimes this results in race conditions and other synchronization issues. As of npm 2.0.0, a very large number of these issues were addressed. If you see `ENOENT lstat`, `ENOENT chmod`, `ENOTEMPTY unlink`, or something similar in your log output, try updating npm to the latest version. If the problem persists, look at [npm/npm#6043](https://github.com/npm/npm/issues/6043) and see if somebody has already discussed your issue.\n\n## `cb() never called!` when using shrinkwrapped dependencies\n\nTake a look at [issue #5920](https://github.com/npm/npm/issues/5920). ~~We're working on fixing this one, but it's a fairly subtle race condition and it's taking us a little time. You might try moving your `npm-shrinkwrap.json` file out of the way until we have this fixed.~~ This has been fixed in versions of npm newer than `npm@2.1.5`, so update to `npm@latest`.\n\n## `npm login` errors\n\nSometimes `npm login` fails for no obvious reason.  The first thing to do is to log in at <https://www.npmjs.com/login> and check that your e-mail address on `npmjs.com` matches the\nemail address you are giving to `npm login`.\n\nIf that's not the problem, or if you are seeing the message `\"may not mix password_sha and pbkdf2\"`, then\n\n1. Log in at https://npmjs.com/\n2. Change password at https://npmjs.com/password – you can even \"change\" it to the same password\n3. Clear login-related fields from `~/.npmrc` – e.g., by running `sed -ie '/registry.npmjs.org/d' ~/.npmrc`\n4. `npm login`\n\nand it generally seems to work.\n\nSee <https://github.com/npm/npm/issues/6641#issuecomment-72984009> for the history of this issue.\n\n## `npm` hangs on Windows at `addRemoteTarball`\n\nCheck if you have two temp directories set in your `.npmrc`:\n\n```\n> npm config ls -l\n```\n\nLook for lines defining the `tmp` config variable.  If you find more than one, remove all but one of them.\n\nSee <https://github.com/npm/npm/issues/7590> for more about this unusual problem.\n\n## npm not running the latest version on a Windows machine\n\nSee the section about Windows [here](try-the-latest-stable-version-of-npm).\n"},{"id":"728d2f8c-08fe-5d94-b9ba-f029e904181f","frontmatter":{"title":"Generating and locating npm-debug.log files"},"rawBody":"---\ntitle: Generating and locating npm-debug.log files\nredirect_from:\n  - /generating-and-locating-npm-debug-log-files\n---\nimport shared from '../../../src/shared.js'\n\nWhen a package fails to install or publish, the npm CLI will generate an `npm-debug.log` file. This log file can help you (and [npm Support][support]) figure out what went wrong.\n\nIf you need to generate a `npm-debug.log` file, you can run one of these commands.\n\nFor installing packages:\n\n```\nnpm install --timing\n```\n\nFor publishing packages:\n\n```\nnpm publish --timing\n```\n\nYou can find the `npm-debug.log` file in your `.npm` directory. To find your `.npm` directory, use `npm config get cache`.\n\nIf you use a CI environment, your logs are likely located elsewhere. For example, in Travis CI, you can find them in the `/home/travis/build` directory.\n\n<Note>\n<><strong>npm Enterprise users:</strong> If you need to {shared['contact-enterprise-support'].text}, we recommend attaching the entire contents of the `npm-debug.log` file or copying the contents into the body of the message, so that we can more easily diagnose the problem.</>\n</Note>\n\n[support]: https://www.npmjs.com/support\n"},{"id":"e25ebdc2-c7ef-518e-83b5-624f48c83cf9","frontmatter":{"title":"Troubleshooting"},"rawBody":"---\ntitle: Troubleshooting\n---\n\n<Index />\n"},{"id":"bf4d8650-4fae-5004-bc1c-10de995e4dbd","frontmatter":{"title":"Try the latest stable version of node"},"rawBody":"---\ntitle: Try the latest stable version of node\nredirect_from:\n  - /troubleshooting/try-the-latest-stable-version-of-node\n---\n\nIf you're experiencing issues while using a version of node which is unsupported or unstable (odd numbered versions e.g. 0.7.x, 0.9.x, 0.11.x), it's very possible your issue will be fixed by simply using the [LTS](https://github.com/nodejs/LTS) version of node.\n\n## See what version of node you're running:\n\n```\nnode -v\n```\n\n### Updating node on Linux\n\nFor some Linux distributions (Debian/Ubuntu and RedHat/CentOS), the latest node version provided by the distribution may lag behind the stable version.  Here are [instructions from NodeSource](https://github.com/nodesource/distributions) on getting the latest node.\n\n### Updating node on Windows\n\nInstall the latest msi from <https://nodejs.org/en/download>\n\n### Updating node on OSX\n\nInstall the latest package from <https://nodejs.org/en/download>\n\nor if you are using [homebrew](http://brew.sh/)\n\n```\nbrew install node\n```\n\n### An easy way to stay up-to-date\n\nNode.js has lots of versions, and its development is very active. As a good practice to manage the various versions, we recommend that you use a version manager for your Node.js installation. There are many great options, here are a few:\n\n+ [NVM](https://github.com/creationix/nvm)\n+ [nodist](https://github.com/marcelklehr/nodist)\n+ [n](https://github.com/tj/n)\n+ [nave](https://github.com/isaacs/nave)\n+ [nodebrew](https://github.com/hokaccha/nodebrew)\n"},{"id":"54c189d4-d5c0-57ce-9dbf-333004affc02","frontmatter":{"title":"Try the latest stable version of npm"},"rawBody":"---\ntitle: Try the latest stable version of npm\nredirect_from:\n  - /troubleshooting/try-the-latest-stable-version-of-npm\n---\n\n## See what version of npm you're running\n\n```\nnpm -v\n```\n\n## Upgrading on `*nix` (OSX, Linux, etc.)\n\n_(You may need to prefix these commands with `sudo`, especially on Linux, or OS X if you installed Node using its default installer.)_\n\nYou can upgrade to the latest version of npm using:\n\n```\nnpm install -g npm@latest\n```\n\nOr upgrade to the most recent release:\n```\nnpm install -g npm@next\n```\n\n## Upgrading on Windows\n_Microsoft wrote a small command line tool to automate the steps below. [You can go and download it here](https://github.com/felixrieseberg/npm-windows-upgrade) - or stick with the manual path outlined below._\n\n___\n\nBy default, npm is installed alongside node in\n\n`C:\\Program Files (x86)\\nodejs`\n\nnpm's globally installed packages (including, potentially, npm itself) are stored separately in a user-specific directory (which is currently\n\n `C:\\Users\\<username>\\AppData\\Roaming\\npm`).\n\n Because the installer puts\n\n `C:\\Program Files (x86)\\nodejs`  \n\n before\n\n `C:\\Users\\<username>\\AppData\\Roaming\\npm`\n\n on your `PATH`, it will always use the version of npm installed with node instead of the version of npm you installed using `npm -g install npm@<version>`.\n\n To get around this, you can do **one** of the following:\n\n* Option 1: [edit your Windows installation's `PATH`](http://superuser.com/questions/284342/what-are-path-and-other-environment-variables-and-how-can-i-set-or-use-them) to put `%appdata%\\npm` before `%ProgramFiles%\\nodejs`.\nRemember that you'll need to restart `cmd.exe` (and potentially restart Windows) when you make changes to `PATH` or how npm is installed.\n\n* Option 2: remove both of\n\t* `%ProgramFiles%\\nodejs\\npm`\n\t* `%ProgramFiles%\\nodejs\\npm.cmd`\n\n* Option 3: Navigate to `%ProgramFiles%\\nodejs\\node_modules\\npm` and copy the `npmrc`file to another folder or the desktop.\nThen open `cmd.exe` and run the following commands:\n```bash\ncd %ProgramFiles%\\nodejs\nnpm install npm@latest\n```\n\nIf you installed npm with the node.js installer, after doing one of the previous steps, do the following.\n\n* Option 1 or 2\n    * Go into `%ProgramFiles%\\nodejs\\node_modules\\npm` and copy the file named `npmrc` in the new npm folder, which should be `%appdata%\\npm\\node_modules\\npm`. This will tell the new npm where the global installed packages are.\n\n* Option 3\n    * Copy the npmrc file back into `%ProgramFiles%\\nodejs\\node_modules\\npm`\n\n*(See also the [point below](https://docs.npmjs.com/common-errors#error-enoent-stat-cusersuserappdataroamingnpm-on-windows-7) if you're running Windows 7 and don't have the directory `%appdata%\\npm`.)*\n\n### A brief note on the built-in Windows configuration\n\nThe Node installer installs, directly into the npm folder, a special piece of Windows-specific configuration that tells npm where to install global packages. When npm is used to install itself, it is supposed to copy this special `builtin` configuration into the new install. There was a bug in some versions of npm that kept this from working, so you may need to go in and fix that up by hand. Run the following command to see where npm will  install global packages to verify it is correct.\n\n```\nnpm config get prefix -g\n```\n\nIf it isn't set to `<X>:\\Users\\<user>\\AppData\\Roaming\\npm`, you can run the below command to correct it:\n\n```\nnpm config set prefix \"${APPDATA}/npm\" -g\n```\n\nIncidentally, if you would prefer that packages not be installed to your roaming profile (because you have a quota on your shared network, or it makes logging in or out from a domain sluggish), you can put it in your local app data instead:\n\n```\nnpm config set prefix \"${LOCALAPPDATA}/npm\" -g\n```\n\n...as well as copying `%APPDATA%\\npm` to `%LOCALAPPDATA%\\npm` (and updating your `%PATH%`, of course).\n\nEveryone who works on npm knows that this process is complicated and fraught, and we're working on making it simpler. Stay tuned.\n"},{"id":"73230f6f-837a-5a6d-ae9f-6a3c66a0df72","frontmatter":{"title":"About access tokens"},"rawBody":"---\ntitle: About access tokens\nredirect_from:\n  - /getting-started/working_with_tokens\n  - /about-authentication-tokens\n---\n\n<Note>\n\n**Note:** You must be using npm version 5.5.1 or greater to use access tokens.\n\n</Note>\n\nAn access token is an alternative to using your username and password for authenticating to npm when using the API or the npm command-line interface (CLI).  An access token is a hexadecimal string that you can use to authenticate, and which gives you the right to install and/or publish your modules.\n\nThe npm CLI automatically generates an access token for you when you run `npm login`.  You can also create an access token to give other tools (such as continuous integration testing environments) access to your npm packages. For example, GitHub Actions provides the ability to store [secrets](https://docs.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets), like access tokens, that you can then use to authenticate.  When your workflow runs,  it will be able to complete npm tasks as you, including installing private packages you can access.\n\nYou can work with tokens from the web or the CLI, whichever is easiest. What you do in each environment will be reflected in the other environment.\n\nnpm token commands let you:\n\n* View tokens for easier tracking and management\n* Create new tokens, specifying read-only or full-permission\n* Limit access according to IP address ranges (CIDR)\n* Delete/revoke tokens\n\nFor more information on creating and viewing access tokens on the web and CLI, see \"[Creating and viewing access tokens][create-token]\".\n\n[create-token]: creating-and-viewing-access-tokens\n\n"},{"id":"ab943f5c-9522-5170-b650-4a2c712fcce0","frontmatter":{"title":"Creating and viewing access tokens"},"rawBody":"---\ntitle: Creating and viewing access tokens\nredirect_from: [ /creating-and-viewing-authentication-tokens ]\n---\n\nYou can [create](#creating-access-tokens) and [view](#viewing-access-tokens) access tokens from the website and command line interface (CLI).\n\n## Creating access tokens\n\n### Creating tokens on the website\n\n1. In the upper right corner of the page, click your profile picture, then click **Access Tokens**.\n\n   <Screenshot src=\"/integrations/integrating-npm-with-external-services/tokens-profile.png\" alt=\"Screenshot of the account menu with the tokens link selected\" />\n\n2. Click **Create New Token**.\n\n   <Screenshot src=\"/integrations/integrating-npm-with-external-services/create-token.png\" alt=\"Screenshot of the create new token button\" />\n\n3. Select the type of access token:\n\n   - **Read-only**: a read-only token can only be used to download packages from the registry.  It will have permission to read any private package that you have access to.  This is recommended for automation and workflows where you are installing packages, but not publishing new ones.\n\n   - **Automation**: an automation token can download packages and publish new ones, but if you have two-factor authentication (2FA) configured on your account, it will **not** be enforced.  You can use an automation token in continuous integration workflows and other automation systems to publish a package even when you cannot enter a one-time passcode.  This is recommended for automation workflows where you are publishing new packages.\n\n   - **Publish**: a publish token can perform any action on your behalf, including downloading packages, publishing packages, and changing user settings or package settings.  If you have two-factor authentication configured on your account, you will be required to enter a one-time passcode when using a publish token.  This is recommended for interactive workflows.\n\n   <Screenshot src=\"/integrations/integrating-npm-with-external-services/token-level-select.png\" alt=\"Screenshot of the access level selection\" />\n\n4. Click **Generate Token**.\n\n5. Copy the token from the top of page.\n\n### Creating tokens with the CLI\n\nYou can create tokens with read-only permissions or read and publish permissions with the CLI; you cannot currently create automation tokens.\n\n- **Read-only:** Tokens that allow installation and distribution only, but no publishing or other rights associated with your account.\n- **Publish:** The default setting for new tokens, and most permissive token type. Publish tokens allow installation, distribution, modification, publishing, and all rights that you have on your account.\n\nIn addition, you can specify that the token is only valid for a specific IPv4 address range, using [CIDR][cidr-wiki] notation.  The token will only be valid when used from the specified IP addresses.\n\n1. To create a new token, on the command line, run:\n   * `npm token create` for a read and publish token\n   * `npm token create --read-only` for a read-only token\n   * `npm token create --cidr=[list]` for a CIDR-restricted read and publish token. For example, `npm token create --cidr=192.0.2.0/24`\n   * `npm token create --read-only --cidr=[list]` for a CIDR-restricted read-only token\n2. When prompted, enter your password.\n3. If you have enabled [two-factor authentication][tfa], when prompted, enter a one-time password.\n4. Copy the token from the **token** field in the command output.\n\n#### CIDR-restricted token errors\n\nIf the CIDR string you enter is invalid or in an inappropriate format, you will get an error similar to the one below:\n\n```\nnpm ERR! CIDR whitelist contains invalid CIDR entry: X.X.X.X./YY,Z.Z.. . .\n```\n\nMake sure you are using a valid IPv4 range and try creating the token again.\n\n## Viewing access tokens\n\n<Note>\n\n**Note:** Full tokens are never displayed, only the first and last four characters will be shown. You can only view a full token immediately after creation.\n\n</Note>\n\n### Viewing tokens on the website\n\nTo view all tokens associated with your account, in the upper right corner of the page, click your profile picture, then click **Access Tokens**.\n\n<Screenshot src=\"/integrations/integrating-npm-with-external-services/tokens-profile.png\" alt=\"Screenshot of the account menu with the tokens link selected\" />\n\n### Viewing tokens on the CLI\n\nTo view all tokens associated with your account, on the command line, run the following command:\n\n```\nnpm token list\n```\n\n#### Token attributes\n\n- **id:** Use the token ID to refer to the token in commands.\n- **token:** The first digits of the actual token.\n- **create:** Date the token was created.\n- **readonly:** If yes, indicates a read-only token. If no, indicates a token with both read and publish permissions.\n- **CIDR whitelist:** Restricts token use by IP address.\n\n\n[tfa]: about-two-factor-authentication\n[cidr-wiki]: https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\n"},{"id":"4028a386-ce9f-58ff-9ce1-ae63d4fef4f9","frontmatter":{"title":"Docker and private modules"},"rawBody":"---\ntitle: Docker and private modules\nredirect_from:\n  - /private-modules/docker-and-private-modules\n---\n\nTo install private npm packages in a Docker container, you will need to use Docker's build-time variables.\n\n## Background: runtime variables\n\nYou cannot install private npm packages in a Docker container using only runtime variables.  Consider the following Dockerfile:\n\n```\nFROM risingstack/alpine:3.3-v4.3.1-3.0.1\n\nCOPY package.json package.json  \nRUN npm install\n\n# Add your source files\nCOPY . .  \nCMD npm start  \n```\n\nWhich will use the RisingStack [Alpine Node.JS Docker image](https://hub.docker.com/r/risingstack/alpine/), copy the `package.json` into our container, installs dependencies, copies the source files and runs the start command as specified in the `package.json`.\n\nIn order to install private packages, you may think that we could just add a line before we run `npm install`, using the [ENV parameter](https://docs.docker.com/engine/reference/builder/#env):\n\n```\nENV NPM_TOKEN=00000000-0000-0000-0000-000000000000\n```\n\nHowever, this doesn't work as you would expect, because you want the npm install to occur when you run `docker build`, and in this instance, `ENV` variables aren't used, they are set for runtime only.\n\nInstead of run-time variables, you must use a different way of passing environment variables to Docker, available since Docker 1.9: the [ARG parameter](https://docs.docker.com/engine/reference/builder/#arg).\n\n## Create and check in a project-specific .npmrc file\n\nA complete example that will allow you to use `--build-arg` to pass in your NPM_TOKEN requires adding a `.npmrc` file to the project.\n\nUse a project-specific `.npmrc` file with a variable for your token to securely authenticate your Docker image with npm.\n\n1. In the root directory of your project, create a custom <a href=\"https://docs.npmjs.com/cli-documentation/files/npmrc\">`.npmrc`</a> file with the following contents:\n\n   ```\n   //registry.npmjs.org/:_authToken=${NPM_TOKEN}\n   ```\n\n   **Note:** that you are specifying a literal value of `${NPM_TOKEN}`.  The npm cli will replace this value with the contents of the `NPM_TOKEN` environment variable.  Do **not** put a token in this file.\n\n2. Check in the `.npmrc` file.\n\n## Update the Dockerfile\n\nThe Dockerfile that takes advantage of this has a few more lines in it than the earlier example that allows us to use the `.npmrc` file and the `ARG` parameter:\n\n```\nFROM risingstack/alpine:3.3-v4.3.1-3.0.1\n\nARG NPM_TOKEN  \nCOPY .npmrc .npmrc  \nCOPY package.json package.json  \nRUN npm install  \nRUN rm -f .npmrc\n\n# Add your source files\nCOPY . .  \nCMD npm start\n```\n\nThis adds the expected `ARG NPM_TOKEN`, but also copies the `.npmrc` file, and removes it when `npm install` completes.\n\n## Build the Docker image\n\nTo build the image using the above Dockerfile and the npm authentication token, you can run the following command. Note the `.` at the end to give `docker build` the current directory as an argument.\n\n```\ndocker build --build-arg NPM_TOKEN=${NPM_TOKEN} .\n```\n\nThis will build the Docker image with the current `NPM_TOKEN` environment variable, so you can run `npm install` inside your container as the current logged-in user.\n\n<Note>\n\n**Note:** Even if you delete the `.npmrc` file, it will be kept in the commit history. To clean your secrets entirely, make sure to squash them.\n\n</Note>\n"},{"id":"f8cd157e-8a3f-50a3-a046-2dfec43015e7","frontmatter":{"title":"Integrating npm with external services"},"rawBody":"---\ntitle: Integrating npm with external services\n---\n\n<Index />\n"},{"id":"1a77b656-d6e2-5c82-b605-a9fb2901af2b","frontmatter":{"title":"Revoking access tokens"},"rawBody":"---\ntitle: Revoking access tokens\nredirect_from: [ /revoking-authentication-tokens ]\n---\n\nTo keep your account and packages secure, we strongly recommend revoking (deleting) tokens you no longer need or that have been compromised. You can revoke any token you have created.\n\n<Note>\n\n**Note:** While access tokens are not derived from your password, changing your password will invalidate all of your tokens. You can also invalidate a single token by logging out on a machine that is logged in with that token. We recommend revoking rather than invalidating tokens.\n\n</Note>\n\n1. To see a list of your tokens, on the command line, run:\n\n   ```\n   npm token list\n   ```\n\n2. In the tokens table, find and copy the ID of the token you want to delete.\n\n3. On the command line, run the following command, replacing `123456` with the ID of the token you want to delete:\n\n   ```\n   npm token delete 123456\n   ```\n\n   npm will report `Removed 1 token`\n\n4. To confirm that the token has been removed, run:\n\n   ```\n   npm token list\n   ```\n\n<Note>\n\n**Note:** You must use the token ID to delete a token, not the truncated version of the token. In some cases, there may be a delay of up to an hour before a token is successfully revoked.\n\n</Note>\n"},{"id":"38a1db2a-8775-530e-af4a-2084d7b321e9","frontmatter":{"title":"Using private packages in a CI/CD workflow"},"rawBody":"---\ntitle: Using private packages in a CI/CD workflow\nredirect_from:\n  - /private-modules/ci-server-config\n---\n\nYou can use access tokens to test private npm packages with continuous integration (CI) systems, or deploy them using continuous deployment (CD) systems.\n\n## Create a new access token\n\nCreate a new access token that will be used only to access npm packages from a CI/CD server.\n\n### Continuous integration\n\nBy default, `npm token create` will generate a token with both read and write permissions. When generating a token for use in a continuous integration environment, we recommend creating a read-only token:\n\n```\nnpm token create --read-only\n```\n\nFor more information on creating access tokens, including CIDR-whitelisted tokens, see \"[Creating an access token][create-token]\".\n\n### Continuous deployment\n\nSince continuous deployment environments usually involve the creation of a deploy artifact, you may wish to create an [automation token](create-token#creating-tokens-on-the-website) on the website.  This will allow you to publish even if you have two-factor authentication enabled on your account.\n\n### Interactive workflows\n\nIf your workflow produces a package, but you publish it manually after validation, then you will want to create a token with read and write permissions, which are granted with the standard token creation command:\n\n```\nnpm token create\n```\n\n### CIDR whitelists\n\nFor increased security, you may use a CIDR-whitelisted token that can only be used from a certain IP address range. You can use a CIDR whitelist with a read and publish token or a read-only token:\n\n```\nnpm token create --cidr=[list]\nnpm token create --read-only --cidr=[list]\n```\n\nExample:\n\n```\nnpm token create --cidr=192.0.2.0/24\n```\n\nFor more information, see \"[Creating and viewing authentication tokens](creating-and-viewing-access-tokens)\".\n\n## Set the token as an environment variable on the CI/CD server\n\nSet your token as an environment variable, or a secret, in your CI/CD server.\n\nFor example, in GitHub Actions, you would [add your token as a secret](https://docs.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets).  Then you can make the secret available to workflows.\n\nIf you named the secret `NPM_TOKEN`, then you would want to create an environment variable named `NPM_TOKEN` from that secret.\n\n```\nsteps:\n  - run: |\n      npm install\n  - env:\n      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n```\n\nConsult your CI/CD server's documentation for more details.\n\n## Create and check in a project-specific .npmrc file\n\nUse a project-specific `.npmrc` file with a variable for your token to securely authenticate your CI/CD server with npm.\n\n1. In the root directory of your project, create a custom `.npmrc` file with the following contents:\n\n   ```\n   //registry.npmjs.org/:_authToken=${NPM_TOKEN}\n   ```\n\n   **Note:** that you are specifying a literal value of `${NPM_TOKEN}`.  The npm cli will replace this value with the contents of the `NPM_TOKEN` environment variable.  Do **not** put a token in this file.\n\n2. Check in the `.npmrc` file.\n\n## Securing your token\n\nYour token may have permission to read private packages, publish new packages on your behalf, or change user or package settings.  Protect your token.\n\nDo not add your token to version control or store it insecurely.  Store it in a package manager, your cloud provider's secure storage, or your CI/CD provider's secure storage.\n\n[create-token]: creating-and-viewing-access-tokens\n"},{"id":"af579523-b207-5f66-b328-d841acb14eb9","frontmatter":{"title":"Converting your user account to an organization"},"rawBody":"---\ntitle: Converting your user account to an organization\nredirect_from:\n  - /converting-your-user-account-to-an-org\n---\nimport shared from '../../../src/shared.js'\n\nIf you have an npm user account, you can convert your user account to an organization. When you convert your user account to an organization, we will:\n\n- Create a new organization with the name of your user account.\n- Prompt you to create a new npm user account. We recommend choosing a variation of your old user name so collaborators will recognize you. For example, if your old username was \"wombat\", your new username might be \"wombat-new\".\n- Make your your new npm user account an owner of your new organization.\n- Add your new npm user account to a team called \"Developers\" in your new organization.\n- Transfer packages owned by your user account to your new organization.\n- Transfer your existing organization and team memberships and contributor access settings to your new user account.\n\n**Note:** Once your old user account has been converted to an organization, you will no longer be able to sign in to npm with your old user account.\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['organization-create'].text}</>\n\n   <>{shared['organization-create'].image}</>\n\n3. Below the account creation form, click **Convert**.\n\n   <Screenshot src=\"/organizations/creating-and-managing-organizations/convert-from-user.png\" alt=\"Screenshot showing the convert dialog\" />\n\n4. Review the account conversion steps and click **Continue**.\n\n   <Screenshot src=\"/organizations/creating-and-managing-organizations/convert-confirmation.png\" alt=\"Screenshot showing the convert confirmation dialog\" />\n\n5. On the new user account creation page, in the \"Username\" field, type the name of your new user account, then click **Submit**.\n\n   <Screenshot src=\"/organizations/creating-and-managing-organizations/convert-new-username.png\" alt=\"Screenshot showing the convert username dialog\" />\n\n6. On the plan selection page, select either the \"Unlimited private packages\" paid plan or the \"Unlimited public packages\" free plan, then click **Buy** or **Create**.\n\n   <>{shared['billing-organization-plans'].image}</>\n\n7. If you selected to use the unlimited private packages plan, in the payment dialog, provide the email, name, address, and credit card information for the card that will be used to pay for the organization.\n\n"},{"id":"c26dd8cb-d09b-5374-8278-86bcdedf1fc7","frontmatter":{"title":"Creating an organization"},"rawBody":"---\ntitle: Creating an organization\nredirect_from:\n  - /orgs/creating-an-org\n  - /creating-an-org\n---\nimport shared from '../../../src/shared.js'\n\nAny npm user can create an organization to manage contributor access to packages governed by the organization.\n\n<Note>\n\n**Note:** You need an npm user account to create an organization. To create a user account, visit the [account signup page][acct-signup]\".\n\n</Note>\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n1. <>{shared['organization-create'].text}</>\n\n   <>{shared['organization-create'].image}</>\n\n3. On the organization creation page, in the **Name** field, type a name for your organization. Your organization name will also be your organization scope.\n\n   <Screenshot src=\"/organizations/creating-and-managing-organizations/create-name.png\" alt=\"Screenshot showing the new organization name field\" />\n\n4. Under the **Name** field, choose either the \"Unlimited private packages\" paid plan or the \"Unlimited public packages\" free plan and click **Buy** or **Create**.\n\n   <>{shared['billing-organization-plans'].image}</>\n\n5. (Optional) On the organization invitation page, type the npm username or email address of a person you would like to add to your organization as a member, then click **Invite**.\n\n   <Screenshot src=\"/organizations/creating-and-managing-organizations/create-invite.png\" alt=\"Screenshot showing the invitation options for a new organization\" />\n\n6. Click **Continue**.\n\n   <Screenshot src=\"/organizations/creating-and-managing-organizations/create-confirm.png\" alt=\"Screenshot showing the new organization confirmation\" />\n\n[acct-signup]: https://www.npmjs.com/signup\n"},{"id":"fc3923fc-2a45-5416-b332-41c36214a8ac","frontmatter":{"title":"Deleting an organization"},"rawBody":"---\ntitle: Deleting an organization\nredirect_from:\n  - /deleting-an-org\n---\nimport shared from '../../../src/shared.js'\n\nOrganizations cannot be deleted from the website or command line interface.\n\n## Deleting an organization on the public registry\n\n<>To delete an organization on the public registry, the organization owner should {shared['contact-support'].text}.</>\n\n## Deleting an organization in npm Enterprise\n\n<>To delete an organization in npm Enterprise, the npm Enterprise admin should {shared['contact-enterprise-support'].text}.</>\n\n"},{"id":"bfd9f364-1fe3-5d20-b2a4-8853785df1de","frontmatter":{"title":"Creating and managing organizations"},"rawBody":"---\ntitle: Creating and managing organizations\nredirect_from:\n  - /orgs/creating-and-managing-orgs\n---\n\n<Index />\n"},{"id":"98af0755-217e-5c3a-a443-878e4a3cb391","frontmatter":{"title":"Renaming an organization"},"rawBody":"---\ntitle: Renaming an organization\nredirect_from:\n  - /renaming-an-org\n---\n\nOrganizations cannot be renamed from the website or command line interface.\n\nTo rename an organization, as an organization owner, you must manually migrate your existing organization members, teams, and packages to a new organization, then [contact npm Support][contact-support] to have the outdated packages unpublished and the previous organization deleted.\n\n1. [Create a new organization][org-create] with the name you want. If your old organization is on a paid plan, you must choose a paid plan for the new organization.\n2. [Add the members][add-org-members] of your old organization to your new organization.\n3. In your new organization, [create teams][create-teams] to match teams in your old organization.\n4. Republish packages to the new organization by updating the package scope in its `package.json` file to match the new organizationanization name and running `npm publish`.\n5. In the new organization teams, [configure package access][pkg-access] to match team package access in your old organization.\n6. [Contact npm Support][contact-support] to have the outdated packages unpublished and the previous organization deleted.\n\n\n[contact-support]: https://www.npmjs.com/support\n[org-create]: creating-an-organization\n[add-org-members]: adding-members-to-your-organization\n[create-teams]: creating-teams\n[pkg-access]: managing-team-access-to-packages\n"},{"id":"a0b76b5e-8310-5a26-a80e-6ba39f6a6784","frontmatter":{"title":"Accepting or rejecting an organization invitation"},"rawBody":"---\ntitle: Accepting or rejecting an organization invitation\nredirect_from:\n  - /accepting-or-rejecting-an-org-invitation\n---\n\n## Accepting an organization invitation\n\nIf you receive an invitation to an organization, you have to accept the invitation over email to be added to the organization.\n\nYou have the option to use a different email address than the one that received the invitation to join the organization.\n\n1. Click the verification link in the organization invitation email.\n\n2. You will be prompted to log into your npm user account. If you don't have an npm user account, you can sign up for one.\n\n   <Screenshot src=\"/organizations/managing-organization-members/accept-invitation.png\" alt=\"Accept organization invitation\" />\n\n## Rejecting an organization invitation\n\nIf you are invited to an organization that you do not want to join, you can let the invitation expire. Organization invitations expire after one week.\n"},{"id":"5592b863-7d90-54ce-b872-bc866088d468","frontmatter":{"title":"Adding members to your organization"},"rawBody":"---\ntitle: Adding members to your organization\nredirect_from:\n  - /adding-members-to-your-org\n---\nimport shared from '../../../src/shared.js'\n\nAs an organization owner, you can add other npm users to your organization to give them read or read and write access to public and private packages within your organization's scope, as well as public unscoped packages governed by your organization.\n\n<Note>\n\n**npm Enterprise users:** Make sure new users have been added to your enterprise instance before inviting them to an organization within the instance.\n\n</Note>\n\nWhen you add a member to your organization, they are sent an email inviting them to the organization.\n\nOnce the new member [accepts the invitation][accept-invitation], they are:\n\n- assigned the role of \"[member][member-perms]\"\n- added to the [\"developers\" team][developers-team]\n\nIf you have a [paid organization][paid-org], as part of an npm Teams plan, you will be billed $7 per month for each new member.\n\n## Inviting members to your organization\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['profile-settings'].text}</>\n\n   <>{shared['profile-settings'].image}</>\n\n3. <>{shared['organization-selection'].text}</>\n\n   <>{shared['organization-selection'].image}</>\n\n4. <>{shared['organization-members-tab'].text}</>\n\n   <>{shared['organization-members-tab'].image}</>\n\n5. Click the **Invite Members** button.\n\n   <Screenshot src=\"/organizations/managing-organization-members/invite-members-button.png\" alt=\"Screenshot of the invite members button\" />\n\n6. In the \"Username or email\" field, type the username or email address of the person you wish to invite.\n\n   <Screenshot src=\"/organizations/managing-organization-members/username-or-email-field.png\" alt=\"Screenshot of the username or email field\" />\n\n7. Click **Invite**.\n\n   <Screenshot src=\"/organizations/managing-organization-members/invite-button.png\" alt=\"Screenshot of the invite button\" />\n\n## Revoking an organization invitation\n\nAs an organization owner, if you've made a mistake in inviting someone to your organization, you can revoke the organization invitation.\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['profile-settings'].text}</>\n\n   <>{shared['profile-settings'].image}</>\n\n3. <>{shared['organization-selection'].text}</>\n\n   <>{shared['organization-selection'].image}</>\n\n4. <>{shared['organization-members-tab'].text}</>\n\n   <>{shared['organization-members-tab'].image}</>\n\n5. Click the **Invite Members** button.\n\n   <Screenshot src=\"/organizations/managing-organization-members/invite-members-button.png\" alt=\"Screenshot of the invite members button\" />\n\n6. Under the \"Invitations\" field, click the **X** next to the name of the user invitation you would like to revoke.\n\n   <Screenshot src=\"/organizations/managing-organization-members/revoke-invitation.png\" alt=\"Screenshot of the revoke invitation button\" />\n\n[accept-invitation]: accepting-or-rejecting-an-org-invitation\n[member-perms]: org-roles-and-permissions\n[developers-team]: about-developers-team\n[paid-org]: upgrading-to-a-paid-org-plan\n"},{"id":"dc2c43b3-b477-5396-8251-139f8641b1cd","frontmatter":{"title":"Managing organization members"},"rawBody":"---\ntitle: Managing organization members\nredirect_from:\n  - /orgs/managing-org-members\n---\n\n<Index />\n"},{"id":"8de562ce-23cc-51fd-8fdf-29c8255e1d40","frontmatter":{"title":"Managing organization permissions"},"rawBody":"---\ntitle: Managing organization permissions\nredirect_from:\n  - /managing-org-permissions\n---\nimport shared from '../../../src/shared.js'\n\nAs an organization owner, you can change the role of any member of your organization to add or remove permissions on the organization for that member.\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['profile-settings'].text}</>\n\n   <>{shared['profile-settings'].image}</>\n\n3. <>{shared['organization-selection'].text}</>\n\n   <>{shared['organization-selection'].image}</>\n\n4. <>{shared['organization-members-tab'].text}</>\n\n   <>{shared['organization-members-tab'].image}</>\n\n5. In the list of organization members, find the member whose role you want to change.\n\n6. In the member row, to select the new role of the organization member, click **member**, **admin**, or **owner**.\n\n   <Screenshot src=\"/organizations/managing-organization-members/change-member-role.png\" alt=\"Screenshot showing the change member role option\" />\n\n"},{"id":"311e83f9-33b7-5ef6-a86a-ebcab4c8792e","frontmatter":{"title":"Organization roles and permissions"},"rawBody":"---\ntitle: Organization roles and permissions\nredirect_from:\n  - /org-roles-and-permissions\n---\nimport shared from '../../../src/shared.js'\n\nThere are three roles in an organization:\n\n- **Owner:** Users who manage organization members and billing.\n- **Admin:** Users who manage team membership and package access.\n- **Member:** Users who create and publish packages in the organization scope.\n\n<><strong>On the public registry, you cannot remove the last owner from an organization.</strong> To delete an organization, {shared['contact-support'].text}.</>\n\n<Note>\n<><strong>npm Enterprise users:</strong> If you are using npm Enterprise, deactivating the only owner of an organization will cause that organization to be ownerless. If you have deactivated the last owner of an organization on an npm Enterprise instance, {shared['contact-enterprise-support'].text}.</>\n</Note>\n\n| Action                                                | **Owner** | **Admin** | **Member** |\n|:------------------------------------------------------|:---------:|:---------:|:----------:|\n| Manage organization billing                           | X         |         |          |\n| Add members to the organization                       | X         |         |          |\n| Remove members from the organization                  | X         |         |          |\n| Rename an organization                                | X         |         |          |\n| Delete an organization                                | X         |         |          |\n| Change any organization member's role                 | X         |         |          |\n| Create teams                                          | X         | X        |          |\n| Delete teams                                          | X         | X        |          |\n| Add any member to any team                            | X         | X        |          |\n| Remove any member from any team                       | X         | X        |          |\n| Manage team package access                            | X         | X        |          |\n| Create and publish packages in the organization scope | X         | X        | X         |\n"},{"id":"de5339a9-3038-5170-a2f2-ac0e6b79b810","frontmatter":{"title":"Removing members from your organization"},"rawBody":"---\ntitle: Removing members from your organization\nredirect_from:\n  - /removing-members-from-your-org\n---\nimport shared from '../../../src/shared.js'\n\nAs an organization owner, you can remove members from your organization if they are longer collaborating on packages owned or governed by your organization.\n\nIf you remove a member from an npm Teams subscription (a paid organization), then they will lose access to your organization's private packages, and the credit card on file for your organization will not be charged for them on the next billing cycle.\n\n<Note>\n\n**Note:** Members are not notified when you remove them from your organization.\n\n</Note>\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['profile-settings'].text}</>\n\n   <>{shared['profile-settings'].image}</>\n\n3. <>{shared['organization-selection'].text}</>\n\n   <>{shared['organization-selection'].image}</>\n\n4. <>{shared['organization-members-tab'].text}</>\n\n   <>{shared['organization-members-tab'].image}</>\n\n5. In the list of organization members, find the member you want to remove.\n\n6. At the end of the member row, click **X**.\n\n   <Screenshot src=\"/organizations/managing-organization-members/remove-member.png\" alt=\"Screenshot of the remove member dialog\" />\n"},{"id":"ad80dfe0-f4ce-5304-88c1-7be7046eb2a1","frontmatter":{"title":"About organization scopes and packages"},"rawBody":"---\ntitle: About organization scopes and packages\nredirect_from:\n  - /about-org-scopes-and-packages\n---\n\nEvery organization is granted an organization scope, a unique namespace for packages owned by the organization that matches the organization name. For example, an organization named \"wombat\" would have the scope `@wombat`.\n\nYou can use scopes to:\n\n- Maintain a fork of a package: `@wombat/request`.\n- Avoid name disputes with popular names: `@wombat/web`.\n- Easily find packages in the same namespace\n\nPackages in a scope must follow the same [naming guidelines][name-guidelines] as unscoped packages.\n\n## Managing unscoped packages\n\nWhile you are granted a scope by default when you create an organization, you can also use organizations to manage unscoped packages, or packages under a different scope (such as a user scope).\n\n\n[name-guidelines]: /files/package.json#name\n"},{"id":"410b1d1f-113d-5a9d-b51a-a143b47c1219","frontmatter":{"title":"Configuring your npm client with your organization settings"},"rawBody":"---\ntitle: Configuring your npm client with your organization settings\nredirect_from:\n  - /configuring-your-npm-client-with-your-org-settings\n---\nimport shared from '../../../src/shared.js'\n\nAs an organization member, you can configure your npm client to:\n\n- make a single package or all new packages you create locally use your organization's scope\n- make a single package or all new packages you create locally have default public visibility\n\nBefore configuring your npm client, you must [install npm][install-npm].\n\n## Configuring your npm client to use your organization's scope\n\nIf you will be publishing packages with your organization's scope often, you can add your organization's scope to your global `.npmrc` configuration file.\n\n### Setting your organization scope for all new packages\n\n<Note>\n\n**Note:** Setting the organization scope using the steps below will only set the scope for new packages; for existing packages, you will need to update the `name` field in `package.json`.\n\n</Note>\n\nOn the command line, run the following command, replacing &lt;org-name&gt; with the name of your organization:\n\n```\nnpm config set scope <org-name> --global\n```\n\nFor packages you do not want to publish with your organization's scope, you must manually edit the package's `package.json` to remove the organization scope from the `name` field.\n\n### Setting your organization scope for a single package\n\n1. On the command line, navigate to the package directory.\n\n   ```\n   cd /path/to/package\n   ```\n\n2. Run the following command, replacing &lt;org-name&gt; with the name of your organization:\n\n    ```\n    npm config set scope <org-name>\n    ```\n\n## Changing default package visibility to public\n\nBy default, publishing a scoped package with `npm publish` will publish the package as private. If you are a member of an organization on the free organization plan, or are on the paid organization plan but want to publish a scoped package as public, you must pass the `--access public` flag:\n\n```\nnpm publish --access public\n```\n\n### Setting package visibility to public for a single package\n\nYou can set a single package to pass `--access public ` to every `npm publish` command that you issue for that package.\n\n1. On the command line, navigate to the package directory.\n\n   ```\n   cd /path/to/package\n\n2. Run the following command:\n\n    ```\n    npm config set access public\n    ```\n\n### Setting package visibility to public for all packages\n\nYou can set all packages to pass `--access public ` to every `npm publish` command that you issue for that package.\n\n<Note>\n\n**Warning:** Setting packages access to `public` in your global `.npmrc` will affect all packages you create, including packages in your personal account scope, as well as packages scoped to your organization.\n\n</Note>\n\nOn the command line, run the following command:\n\n```\nnpm config set access public --global\n```\n\n[install-npm]: downloading-and-installing-node-js-and-npm\n"},{"id":"42049605-d20b-57e0-b6e5-901b695177b8","frontmatter":{"title":"Creating and publishing an organization scoped package"},"rawBody":"---\ntitle: Creating and publishing an organization scoped package\nredirect_from:\n  - /creating-and-publishing-an-org-scoped-package\n---\nimport shared from '../../../src/shared.js'\n\nAs an organization member, you can create and publish public and private packages within the organization's scope.\n\n## Creating an organization scoped package\n\n1. On the command line, make a directory with the name of the package you would like to create.\n\n   ```\n   mkdir /path/to/package/directory\n   ```\n\n2. Navigate to the newly-created package directory.\n\n3. To create an organization scoped package, on the command line, run:\n\n   ```\n   npm init --scope=<your_org_name>\n   ```\n\n4. To verify the package is using your organization scope, in a text editor, open the package's `package.json` file and check that the name is `@your_org_name/<pkg_name>`, replacing `your_org_name` with the name of your organization.\n\n## Publishing a private organization scoped package\n\nBy default, `npm publish` will publish a scoped package as private.\n\nBy default, any scoped package is published as private. However, if you have an organization that does not have the Private Packages feature, `npm publish` will fail unless you pass the `access` flag.\n\n1. On the command line, navigate to the package directory.\n\n2. Run `npm publish`.\n\nPrivate packages will say `private` below the package name on the npm website.\n\n<>{shared['organization-package-private'].image}</>\n\n## Publishing a public organization scoped package\n\nTo publish an organization scoped package as public, use `npm publish --access public`.\n\n1. On the command line, navigate to the package directory.\n\n2. Run `npm publish --access public`.\n\nPublic packages will say `public` below the package name on the npm website.\n\n<>{shared['organization-package-public'].image}</>\n"},{"id":"9af8ca32-da0e-5671-b7d7-0c407e7e5483","frontmatter":{"title":"Managing organization packages"},"rawBody":"---\ntitle: Managing organization packages\nredirect_from:\n  - /orgs/managing-org-packages\n---\n\n<Index />\n"},{"id":"0e6abf6a-6ccd-522d-8c83-605eac25a31b","frontmatter":{"title":"About the Developers team"},"rawBody":"---\ntitle: About the Developers team\n---\n\nThe Developers team is automatically created when you create an organization. By default, the Developers team has read/write access to all new packages created under the organization's scope.\n\n- Members added to the organization, including the organization owner, are automatically added to the Developers team\n- The [`maintainers` field] in the [`package.json`] of any newly created packages under the organization scope\nis automatically populated with the members of the current Developers team\n\nIf you create a new package under your organization's scope and you do not\nwant members of the Developers team to have read/write access to that\npackage, an owner or admin can remove the Developers team's access to that\npackage. For more informations, see \"[Managing team access to organization packages][pkg-access]\".\n\nIf an owner adds a new member to an organization and **does not** want\nthat member to be on the Developers team, an owner can remove them.\n\n<Note>\n\n**Note:** The Developers team can no longer be removed from an organization for the following reasons:\n\n* It is the source of truth for all users, packages, and default permissions in an organization.\n* When you want to restrict write access, it is almost always better to set the default permissions to read-only and create separate teams for managing write permissions.\n\n</Note>\n\n[pkg-access]: managing-team-access-to-org-packages\n[create-team]: creating-teams\n[`maintainers` field]: /files/package.json#people-fields-author-contributors\n[`package.json`]: /files/package.json\n"},{"id":"83ff3b0d-be27-5293-a77d-765fd2f17bd0","frontmatter":{"title":"Adding organization members to teams"},"rawBody":"---\ntitle: Adding organization members to teams\nredirect_from:\n  - /adding-org-members-to-teams\n---\nimport shared from '../../../src/shared.js'\n\nAs an organization owner or team admin, you can add organization members to teams to give them access to a specific set of packages governed by the organization.\n\n<Note>\n\n**Note:** An npm user must be a member of your organization before you can add them to a team. To add a member to your organization, see \"[Adding members to your organization][add-organization-members]\".\n\n</Note>\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['profile-settings'].text}</>\n\n   <>{shared['profile-settings'].image}</>\n\n3. <>{shared['organization-selection'].text}</>\n\n   <>{shared['organization-selection'].image}</>\n\n4. <>{shared['organization-teams-tab'].text}</>\n\n   <>{shared['organization-teams-tab'].image}</>\n\n5. Beside the team you want to add members to, click **Members**.\n\n   <Screenshot src=\"/organizations/managing-teams/team-members.png\" alt=\"Screenshot of the team members button\" />\n\n6. In the \"Username\" field, type the npm username of the organization member you would like to add to your team.\n\n   <Screenshot src=\"/organizations/managing-teams/team-member-select.png\" alt=\"Screenshot of the team member selection\" />\n\n7. Click **+ Add User**.\n\n   <Screenshot src=\"/organizations/managing-teams/team-member-add-button.png\" alt=\"Screenshot of the team member add button\" />\n\n<Note>\n\n**Note:** organization members are not notified when they are added to a team. We recommend telling the organization member you have added them to a team.\n\n</Note>\n\n## Managing teams from the CLI\n\nIf you would like to manage the membership of your team from\nthe command line interface (CLI), you can use:\n\n```\nnpm team\n```\n\nFor more information, see the [CLI documentation on teams][team-cli].\n\n\n[add-organization-members]: adding-members-to-your-organization\n[team-cli]: /cli/team\n"},{"id":"48b5e3fe-2c84-5193-abd3-65be51db12e5","frontmatter":{"title":"Creating teams"},"rawBody":"---\ntitle: Creating teams\n---\nimport shared from '../../../src/shared.js'\n\nAs an organization owner or team admin, you can create teams to manage access to sets of packages governed by your organization.\n\n<Note>\n\n**Note:** Team names cannot be changed. To \"rename\" a team, you must delete the team and recreate it.\n\n</Note>\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['profile-settings'].text}</>\n\n   <>{shared['profile-settings'].image}</>\n\n3. <>{shared['organization-selection'].text}</>\n\n   <>{shared['organization-selection'].image}</>\n\n4. <>{shared['organization-teams-tab'].text}</>\n\n   <>{shared['organization-teams-tab'].image}</>\n\n5. In the \"Name\" and \"Description\" fields, type a team name and helpful description. Team names must be lower case and cannot contain spaces or punctuation.\n\n   <Screenshot src=\"/organizations/managing-teams/team-name-description.png\" alt=\"Screenshot of team name and description\" />\n\n6. Click **Make it so**.\n\n   <Screenshot src=\"/organizations/managing-teams/team-creation-confirmation.png\" alt=\"Screenshot of the team creation confirmation button\" />\n\n<Note>\n\n**Note:** New teams do not have members or package access by default. Once you create a team, add packages and members from the \"Teams\" tab.\n\n</Note>\n"},{"id":"2031dcee-80dc-59db-9ec2-c3066a6eadaf","frontmatter":{"title":"Managing teams"},"rawBody":"---\ntitle: Managing teams\nredirect_from:\n  - /orgs/managing-teams\n---\n\n<Index />\n"},{"id":"f27144fd-023e-545d-a1e3-640f5b9ee816","frontmatter":{"title":"Managing team access to organization packages"},"rawBody":"---\ntitle: Managing team access to organization packages\nredirect_from:\n  - /managing-team-access-to-org-packages\n  - /managing-team-access-to-packages\n---\nimport shared from '../../../src/shared.js'\n\nAs an organization owner or team admin, you can add or remove package access to or from teams in your organization.\n\n## Adding package access to a team\n\n### Adding package access to a team on the web\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['profile-settings'].text}</>\n\n   <>{shared['profile-settings'].image}</>\n\n3. <>{shared['organization-selection'].text}</>\n\n   <>{shared['organization-selection'].image}</>\n\n4. <>{shared['organization-teams-tab'].text}</>\n\n   <>{shared['organization-teams-tab'].image}</>\n\n5. Beside the team to which you want to add package access, click **Packages**.\n\n   <Screenshot src=\"/organizations/managing-teams/team-packages-button.png\" alt=\"Screenshot of the packages button\" />\n\n6. On the \"Add Packages\" page, in the \"Package\" field, type the name of the package and select from the dropdown menu.\n\n   <Screenshot src=\"/organizations/managing-teams/team-package-select.png\" alt=\"Screenshot of the package selection\" />\n\n7. Click **+ Add Existing Package**.\n\n   <Screenshot src=\"/organizations/managing-teams/team-package-add-existing-button.png\" alt=\"Screenshot of the add package button\" />\n\n8. Beside the package name, click **read** or **read/write** to set the team permissions for the package.\n\n   <Screenshot src=\"/organizations/managing-teams/team-package-permissions.png\" alt=\"Screenshot of the team package permission option\" />\n\n### Adding package access to a team using the CLI\n\nAs an organization owner or team admin, you can use the the CLI `access` command to add package access to a team on\nthe command line:\n\n```\nnpm access grant <read-only|read-write> <org:team> [<package>]\n```\n\nFor more information, see \"[npm-access][access-cli]\".\n\n## Removing package access from a team\n\n### Removing package access from a team on the web\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['profile-settings'].text}</>\n\n   <>{shared['profile-settings'].image}</>\n\n3. <>{shared['organization-selection'].text}</>\n\n   <>{shared['organization-selection'].image}</>\n\n4. <>{shared['organization-teams-tab'].text}</>\n\n   <>{shared['organization-teams-tab'].image}</>\n\n5. Beside the team from which you want to remove package access, click **Packages**.\n\n   <Screenshot src=\"/organizations/managing-teams/team-packages-button.png\" alt=\"Screenshot of the packages button\" />\n\n6. Beside the name of the package from which you want to remove access, click **x**.\n\n   <Screenshot src=\"/organizations/managing-teams/team-package-remove-button.png\" alt=\"Screenshot of the remove package button\" />\n\n### Removing package access from a team using the CLI\n\nAs an organization owner or team admin, you can also use the the CLI `access` command to revoke package access from a team on\nthe command line:\n\n```\nnpm access revoke <org:team> [<package>]\n```\nFor more information, see \"[npm-access][access-cli]\".\n\n## Changing package access for a team\n\n### Changing package access for a team on the web\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['profile-settings'].text}</>\n\n   <>{shared['profile-settings'].image}</>\n\n3. <>{shared['organization-selection'].text}</>\n\n   <>{shared['organization-selection'].image}</>\n\n4. <>{shared['organization-teams-tab'].text}</>\n\n   <>{shared['organization-teams-tab'].image}</>\n\n5. Beside the team from which you want to remove package access, click **Packages**.\n\n   <Screenshot src=\"/organizations/managing-teams/team-packages-button.png\" alt=\"Screenshot of the packages button\" />\n\n6. Beside the package name, click **read** or **read/write** to set the team permissions for the package.\n\n   <Screenshot src=\"/organizations/managing-teams/team-package-change-permissions.png\" alt=\"Screenshot of the change package permission option\" />\n\n### Changing package access for a team from the CLI\n\nAs an organization owner or team admin, you can change package access for a team from the command line:\n\n```\nnpm access\n```\nFor more information, see the [`npm-access` CLI documentation][access-cli].\n\n\n[access-cli]: /cli/access\n"},{"id":"6f6baa2e-2974-5df7-91d2-46847cdcddab","frontmatter":{"title":"Removing organization members from teams"},"rawBody":"---\ntitle: Removing organization members from teams\nredirect_from:\n  - /removing-org-members-from-teams\n---\nimport shared from '../../../src/shared.js'\n\nAs an organization owner or team admin, you can remove organization members from teams if they no longer need access to packages accessible to the team.\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['profile-settings'].text}</>\n\n   <>{shared['profile-settings'].image}</>\n\n3. <>{shared['organization-selection'].text}</>\n\n   <>{shared['organization-selection'].image}</>\n\n4. <>{shared['organization-teams-tab'].text}</>\n\n   <>{shared['organization-teams-tab'].image}</>\n\n5. In the list of team members, find the member you want to remove.\n\n6. In the member row, to remove the member from the team, click **X**.\n\n   <Screenshot src=\"/organizations/managing-teams/team-member-remove-button.png\" alt=\"Screenshot of the team member remove button\" />\n\n<Note>\n\n**Note: Removing a member from a team, even if it is the only team they are a member of, will not remove them from the organization.** To remove a member from the organization, see \"[Removing members from your organization][removing-organization-members]\".\n\n</Note>\n\n[removing-organization-members]: removing-members-from-your-organization\n"},{"id":"bcbee485-e2c6-5f28-8ad3-c3ccdbeee37c","frontmatter":{"title":"Removing teams"},"rawBody":"---\ntitle: Removing teams\n---\nimport shared from '../../../src/shared.js'\n\nAs an organization owner or team admin, you can remove teams that no longer need access to a set of packages governed by your organization. Removing the team will not remove the team members or packages from your organization.\n\n<Note>\n<><strong>Note:</strong> if you remove all teams referencing a particular package, it will be orphaned and you will lose access to it. If this happens, {shared['contact-support'].text}.</>\n</Note>\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['profile-settings'].text}</>\n\n   <>{shared['profile-settings'].image}</>\n\n3. <>{shared['organization-selection'].text}</>\n\n   <>{shared['organization-selection'].image}</>\n\n4. <>{shared['organization-teams-tab'].text}</>\n\n   <>{shared['organization-teams-tab'].image}</>\n\n5. Beside the name of the team you want to remove, click **X**.\n\n   <Screenshot src=\"/organizations/managing-teams/team-remove.png\" alt=\"Screenshot of the remove team button\" />\n\n<Note>\n\n**Note:** You cannot remove the developers team, [learn more about the developers team](/about-developers-team).\n\n</Note>\n"},{"id":"dfbb9935-c3da-54aa-a03a-891778f6783d","frontmatter":{"title":"Downgrading to a free organization plan"},"rawBody":"---\ntitle: Downgrading to a free organization plan\nredirect_from:\n  - /downgrading-to-a-free-org-plan\n---\nimport shared from '../../../src/shared.js'\n\n<Note>\n\n**Note:** This article only applies to users of the public npm registry.\n\n</Note>\n\nIf you are a subscriber to the npm Teams product (you have a paid organization) and you are an owner of the organization, then you can downgrade from npm Teams to a free organization.  When you downgrade from a paid to a free organization, you and your organization members will lose the ability to install and publish private packages at the end of your last paid billing cycle. Your private packages will _not_ be made publicly visible when you downgrade to a free plan.\n\n**Note:** If you would like to pay for fewer seats, you can remove members from your organization by following the steps in \"[Removing members from your organization][remove-members]\".\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['profile-settings'].text}</>\n\n   <>{shared['profile-settings'].image}</>\n\n3. In the left sidebar, click the name of the organization you want to downgrade.\n\n   <>{shared['organization-selection'].image}</>\n\n4. <>{shared['organization-billing-tab'].text}</>\n\n   <>{shared['organization-billing-tab'].image}</>\n\n5. <>{shared['billing-downgrade-selection'].text}</>\n\n   <>{shared['billing-downgrade-selection'].image}</>\n\n6. <>{shared['billing-downgrade-confirm'].text}</>\n\n   <>{shared['billing-downgrade-confirm'].image}</>\n\n\n[remove-members]: removing-members-from-your-org\n"},{"id":"836ab02c-0d62-597a-821c-9517a681cbd5","frontmatter":{"title":"Paying for your organization"},"rawBody":"---\ntitle: Paying for your organization\nredirect_from:\n  - /orgs/paying-for-your-org\n---\n\n<Index />\n"},{"id":"79fdf7de-32a8-542e-b0e9-88e3695eb5f6","frontmatter":{"title":"Updating organization billing settings"},"rawBody":"---\ntitle: Updating organization billing settings\nredirect_from:\n  - /updating-org-billing-settings\n---\nimport shared from '../../../src/shared.js'\n\n<Note>\n\n**Note:** This article only applies to users of the public npm registry.\n\n</Note>\n\nAs an owner of an npm Teams subscription, a paid organization plan, you can update the credit card used to pay for your plan. Updating your credit card will not change your billing cycle date, and the new credit card will be charged on the next billing cycle.\n\n<Note>\n<><strong>Note:</strong> If the credit card used to pay for your npm Teams subscription or your paid organization plan expires, or we are otherwise are unable to charge your card, you have a grace period of {shared['grace-period'].text} to update the card.</>\n</Note>\n\n## Updating credit card information\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['profile-settings'].text}</>\n\n   <>{shared['profile-settings'].image}</>\n\n3. In the left sidebar, click the name of the organization whose credit card information you want to change.\n\n   <>{shared['organization-selection'].image}</>\n\n4. <>{shared['organization-billing-tab'].text}</>\n\n   <>{shared['organization-billing-tab'].image}</>\n\n5. <>{shared['payment-info'].text}</>\n\n   <>{shared['payment-info'].image}</>\n\n6. <>{shared['billing-form'].text}</>\n\n   <>{shared['billing-form'].image}</>\n\n7. <>{shared['payment-info-button'].text}</>\n\n   <>{shared['payment-info-button'].image}</>\n\n8. <>{shared['billing-creditcard-form'].text}</>\n\n   <>{shared['billing-creditcard-form'].image}</>\n\n9. <>{shared['payment-remember-me'].text}</>\n\n   <>{shared['payment-remember-me'].image}</>\n\n10. <>{shared['billing-update-card'].text}</>\n\n    <>{shared['billing-update-card'].image}</>\n\n## Updating billing receipt email and extra receipt information\n\nAs an organization owner, you can update the email address used for receipts, and add extra information to the receipt for your paid organization plan, such as your business name, VAT identification number, or address of record. Updated billing information will appear on all receipts immediately.\n\n<Note>\n\n**Note:** The billing email is used for receipts only and is not required to match the email address of the person whose card is used to pay for the organization.\n\n</Note>\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['profile-settings'].text}</>\n\n   <>{shared['profile-settings'].image}</>\n\n3. In the left sidebar, click the name of the organization whose billing receipt information you want to change.\n\n   <>{shared['organization-selection'].image}</>\n\n4. <>{shared['organization-billing-tab'].text}</>\n\n5. <>{shared['billing-history'].text}</>\n\n   <>{shared['billing-history'].image}</>\n\n6. <>{shared['billing-receipt-settings'].text}</>\n\n   <>{shared['billing-receipt-settings'].image}</>\n\n7. <>{shared['billing-extra-info'].text}</>\n\n   <>{shared['billing-extra-info'].image}</>\n\n8. <>{shared['billing-extra-receipt-email'].text}</>\n\n   <>{shared['billing-extra-receipt-email'].image}</>\n\n9. <>{shared['billing-extra-save'].text}</>\n\n   <>{shared['billing-extra-save'].image}</>\n"},{"id":"06bb4353-e17b-5c5d-b577-db71e9a34ea8","frontmatter":{"title":"Upgrading to a paid organization plan"},"rawBody":"---\ntitle: Upgrading to a paid organization plan\nredirect_from:\n  - /upgrading-to-a-paid-org-plan\n---\nimport shared from '../../../src/shared.js'\n\n<Note>\n\n**Note:** This article only applies to users of the public npm registry.\n\n</Note>\n\nAs an organization owner, you can upgrade your free organization plan to the npm Teams product.  npm Teams is a paid plan to give organization members the ability to install and publish private packages.  For more information about npm Teams and our organization pricing plans, see the \"npm Teams\" section of [our pricing page][org-plans-link].\n\nIf you have an organization with a private packages plan, your organization will cost you seven (7) dollars a month per user. **The $7 charge is a flat fee for any member of the organization even if the teams the member belongs do not have access to private packages**\n\nNewly added members to an organization are always billed during the next billing cycle. For more information, see \"[Adding members to your organization][add-members]\".\n\n**Note:** Your paid plan and billing cycle will start when you submit your credit card information, and you will be charged for the first month immediately.\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['profile-settings'].text}</>\n\n   <>{shared['profile-settings'].image}</>\n\n3. In the left sidebar, click the name of the organization you want to upgrade.\n\n   <>{shared['organization-selection'].image}</>\n\n4. <>{shared['organization-billing-tab'].text}</>\n\n   <>{shared['organization-billing-tab'].image}</>\n\n5. Under \"change plan\", click **Upgrade Plan ($7/User)**.\n\n6. Under \"Want to upgrade?\", click **Enable Private Publishing for $7/mo**.\n\n7. <>{shared['billing-form'].text}</>\n\n   <>{shared['billing-form'].image}</>\n\n8. <>{shared['payment-info-button'].text}</>\n\n   <>{shared['payment-info-button'].image}</>\n\n9. <>{shared['billing-creditcard-form'].text}</>\n\n   <>{shared['billing-creditcard-form'].image}</>\n\n10. <>{shared['payment-remember-me'].text}</>\n\n    <>{shared['payment-remember-me'].image}</>\n\n10. Click **Pay** for the monthly amount.  The monthly amount will be the number of members in your organization multiplied by $7.\n\n\n[org-plans-link]: https://www.npmjs.com/pricing\n[add-members]: adding-members-to-your-org\n"},{"id":"a3cbc79d-ee49-59d2-9f06-00bf77f93421","frontmatter":{"title":"Viewing, downloading, and emailing receipts for your organization"},"rawBody":"---\ntitle: Viewing, downloading, and emailing receipts for your organization\nredirect_from:\n  - /viewing-downloading-and-emailing-receipts-for-your-org\n---\nimport shared from '../../../src/shared.js'\n\n<Note>\n\n**Note:** This article only applies to users of the public npm registry.\n\n</Note>\n\nAs an organization owner, you can view, download, and email receipts for the complete billing history of your organization.\n\n## Viewing receipts\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['profile-settings'].text}</>\n\n   <>{shared['profile-settings'].image}</>\n\n3. In the left sidebar, click the name of the organization whose billing receipts you want to view.\n\n   <>{shared['organization-selection'].image}</>\n\n4. <>{shared['organization-billing-tab'].text}</>\n\n   <>{shared['organization-billing-tab'].image}</>\n\n5. <>{shared['billing-history'].text}</>\n\n   <>{shared['billing-history'].image}</>\n\n6. To view a single receipt, find the row of the receipt you want to view, then, on the right side of the row, click the view icon.\n\n6. <>{shared['billing-view'].text}</>\n\n   <>{shared['billing-view'].image}</>\n\n## Downloading receipts\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['profile-settings'].text}</>\n\n   <>{shared['profile-settings'].image}</>\n\n3. In the left sidebar, click the name of the organization whose billing receipts you want to download.\n\n   <>{shared['organization-selection'].image}</>\n\n4. <>{shared['organization-billing-tab'].text}</>\n\n   <>{shared['organization-billing-tab'].image}</>\n\n5. <>{shared['billing-history'].text}</>\n\n   <>{shared['billing-history'].image}</>\n\n6. <>{shared['billing-download'].text}</>\n\n   <>{shared['billing-download'].image}</>\n\n7. <>{shared['billing-download-checked'].text}</>\n\n   <>{shared['billing-download-checked'].image}</>\n\n## Emailing receipts\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. <>{shared['profile-settings'].text}</>\n\n   <>{shared['profile-settings'].image}</>\n\n3. In the left sidebar, click the name of the organization whose billing receipts you want to email.\n\n   <>{shared['organization-selection'].image}</>\n\n4. <>{shared['organization-billing-tab'].text}</>\n\n   <>{shared['organization-billing-tab'].image}</>\n\n5. <>{shared['billing-history'].text}</>\n\n   <>{shared['billing-history'].image}</>\n\n6. <>{shared['billing-email'].text}</>\n\n   <>{shared['billing-email'].image}</>\n\n7. <>{shared['billing-email-checked'].text}</>\n\n   <>{shared['billing-email-checked'].image}</>\n\n8. <>{shared['billing-email-receipt'].text}</>\n\n   <>{shared['billing-email-receipt'].image}</>\n\n9. Click **Send**.\n"},{"id":"65a6d61d-d38c-5a38-8775-942c9a4d510f","frontmatter":{"title":"About package README files"},"rawBody":"---\ntitle: About package README files\n---\n\nTo help others find your packages on npm and have a good experience using your code in their projects, we recommend including a README file in your package directory. Your README file may include directions for installing, configuring, and using the code in your package, as well as any other information a user may find helpful. The README file will be shown on the package page.\n\nAn npm package README file must be in the root-level directory of the package.\n\n## Creating and adding a README.md file to a package\n\n1. In a text editor, in your package root directory, create a file called `README.md`.\n2. In the `README.md` file, add useful information about your package.\n3. Save the `README.md` file.\n\n<Note>\n\n**Note:** The file extension `.md` indicates a Markdown file. For more information about Markdown, see the GitHub Guide \"<a href=\"https://guides.github.com/features/mastering-markdown/#what\">Mastering Markdown</a>\".\n\n</Note>\n\n## Updating an existing package README file\n\nThe README file will only be updated on the package page when you publish a new version of your package. To update your README file:\n\n1. In a text editor, update the contents of the `README.md` file.\n\n2. Save the `README.md` file.\n\n3. On the command line, in the package root directory, run the following commands:\n\n   ```\n   npm version patch\n   npm publish\n   ```\n\n\n[markdown-link]: https://guides.github.com/features/mastering-markdown/#what\n"},{"id":"d8839df6-a5ec-5f20-a850-732b11b9585b","frontmatter":{"title":"About semantic versioning"},"rawBody":"---\ntitle: About semantic versioning\nredirect_from:\n  - /getting-started/semantic-versioning/\n---\n\nTo keep the JavaScript ecosystem healthy, reliable, and secure, every time you make significant updates to an npm package you own, we recommend publishing a new version of the package with an updated version number in the [`package.json` file][pkg-json] that follows the [semantic versioning spec][semver-org]. Following the semantic versioning spec helps other developers who depend on your code understand the extent of changes in a given version, and adjust their own code if necessary.\n\n<div class=\"note\">\n\n<span class=\"bold\">Note:</span> If you introduce a change that breaks a package dependency, we strongly recommend incrementing the version <span class=\"bold\">major number</span>; see below for details.\n\n</div>\n\n## Incrementing semantic versions in published packages\n\nTo help developers who rely on your code, we recommend starting your package version at `1.0.0` and incrementing as follows:\n\n| Code status | Stage | Rule | Example version |\n|-------------|-------|------|----------------|\n| First release | New product | Start with 1.0.0 | 1.0.0 |\n| Backward compatible bug fixes | Patch release | Increment the third digit | 1.0.1 |\n| Backward compatible new features | Minor release | Increment the middle digit and reset last digit to zero | 1.1.0 |\n| Changes that break backward compatibility | Major release | Increment the first digit and reset middle and last digits to zero | 2.0.0 |\n\n## Using semantic versioning to specify update types your package can accept\n\nYou can specify which update types your package can accept from dependencies in your package's `package.json` file.\n\nFor example, to specify acceptable version ranges up to 1.0.4, use the following syntax:\n\n* Patch releases: `1.0` or `1.0.x` or `~1.0.4`\n* Minor releases: `1` or `1.x` or `^1.0.4`\n* Major releases: `*` or `x`\n\nFor more information on semantic versioning syntax, see the [npm semver calculator][semver-calc].\n\n### Example\n\n```json\n\n\"dependencies\": {\n  \"my_dep\": \"^1.0.0\",\n  \"another_dep\": \"~2.2.0\"\n},\n```\n\n## Resources\n\n<iframe src=\"https://www.youtube.com/embed/kK4Meix58R4\" frameborder=\"0\" allowfullscreen></iframe>\n\n\n[semver-calc]: https://semver.npmjs.com/\n[pkg-json]: creating-a-package-json-file\n[semver-org]: http://semver.org/\n[semver-video]: https://www.youtube.com/embed/kK4Meix58R4\n"},{"id":"37558650-3014-5356-a5e5-fd38dac4e8a6","frontmatter":{"title":"Adding dist-tags to packages"},"rawBody":"---\ntitle: Adding dist-tags to packages\nredirect_from:\n  - /getting-started/using-tags/\n---\n\nDistribution tags (dist-tags) are human-readable labels that you can use to organize and label different versions of packages you publish. dist-tags supplement [semantic versioning][semver]. In addition to being more human-readable than semantic version numbering, tags allow publishers to distribute their packages more effectively.\n\nFor more information, see the [`dist-tag` CLI documentation][dist-tag].\n\n<Note>\n\n**Note:** Since dist-tags share a namespace with semantic versions, avoid dist-tags that conflict with existing version numbers. We recommend avoiding dist-tags that start with a number or the letter \"v\".\n\n</Note>\n\n## Publishing a package with a dist-tag\n\nBy default, running `npm publish` will tag your package with the `latest` dist-tag. To use another dist-tag, use the `--tag` flag when publishing.\n\n1. On the command line, navigate to the root directory of your package.\n\n   ```\n   cd /path/to/package\n   ```\n\n2. Run the following command, replacing `<tag>` with the tag you want to use:\n\n   ```\n   npm publish --tag <tag>\n   ```\n\n### Example\n\nTo publish a package with the \"beta\" dist-tag, on the command line, run the following command in the root directory of your package:\n\n```\nnpm publish --tag beta\n```\n\n## Adding a dist-tag to a specific version of your package\n\n1. On the command line, navigate to the root directory of your package.\n\n   ```\n   cd /path/to/package\n   ```\n\n2. Run the following command, replacing `<package_name>` with the name of your package, `<version>` with your package version number, and `<tag>` with the distribution tag:\n\n   ```\n   npm dist-tag add <package-name>@<version> [<tag>]\n   ```\n\n### Example\n\nTo add the \"stable\" tag to the 1.4.0 version of the \"example-package\" package, you would run the following command:\n\n```\nnpm dist-tag add example-package@1.4.0 stable\n```\n\n\n[semver]: about-semantic-versioning\n[dist-tag]: /cli/dist-tag\n"},{"id":"233012ba-94cb-56c7-bd1e-2fe6e89c78a1","frontmatter":{"title":"Creating a package.json file"},"rawBody":"---\ntitle: Creating a package.json file\nredirect_from:\n  - /about-package-json-and-package-lock-json-files\n  - /getting-started/using-a-package.json\n---\n\nYou can add a `package.json` file to your package to make it easy for others to manage and install. Packages published to the registry must contain a `package.json` file.\n\nA `package.json` file:\n\n* lists the packages your project depends on\n* specifies versions of a package that your project\ncan use using [semantic versioning rules][semver]\n* makes your build reproducible, and therefore easier\nto share with other developers\n\n<Note>\n\n**Note:** To make your package easier to find on the npm website, we recommend including a custom `description` in your `package.json` file.\n\n</Note>\n\n## `package.json` fields\n\n### Required `name` and `version` fields\n\nA `package.json` file must contain `\"name\"` and `\"version\"` fields.\n\nThe `\"name\"` field contains your package's name, and must be lowercase and one word, and may contain hyphens and underscores.\n\nThe `\"version\"` field must be in the form `x.x.x` and follow the [semantic versioning guidelines][semver].\n\n### Author field\n\nIf you want to include package author information in `\"author\"` field, use the following format (email and website are both optional):\n\n```\nYour Name <email@example.com> (http://example.com)\n```\n\n### Example\n\n```\n{\n  \"name\": \"my-awesome-package\",\n  \"version\": \"1.0.0\"\n}\n```\n\n## Creating a new `package.json` file\n\nYou can create a `package.json` file by running a CLI questionnaire or  creating a default `package.json` file.\n\n### Running a CLI questionnaire\n\nTo create a `package.json` file with values that you supply, use the `npm init` command.\n\n1. On the command line, navigate to the root directory of your package.\n\n   ```\n   cd /path/to/package\n   ```\n\n2. Run the following command:\n\n   ```\n   npm init\n   ```\n\n3. Answer the questions in the command line questionnaire.\n\n#### Customizing the `package.json` questionnaire\n\nIf you expect to create many `package.json` files, you can customize the questions asked and fields created during the `init` process so all the `package.json` files contain a standard set of information.\n\n\n1. In your home directory, create a file called `.npm-init.js`.\n\n2. To add custom questions, using a text editor, add questions with the `prompt` function:\n\n   ```\n   module.exports = prompt(\"what's your favorite flavor of ice cream, buddy?\", \"I LIKE THEM ALL\");\n   ```\n\n3. To add custom fields, using a text editor, add desired fields to the `.npm-init.js` file:\n\n   ```\n   module.exports = {\n     customField: 'Example custom field',\n     otherCustomField: 'This example field is really cool'\n   }\n   ```\n\nTo learn more about creating advanced `npm init` customizations, see the [init-package-json][init-pkg-json] GitHub repository.\n\n### Creating a default `package.json` file\n\nTo create a default `package.json` using information extracted from the current directory, use the `npm init` command with the `--yes`\nor `-y` flag. For a list of default values, see \"[Default values extracted from the current directory](#default-values-extracted-from-the-current-directory)\".\n\n1. On the command line, navigate to the root directory of your package.\n\n   ```\n   cd /path/to/package\n   ```\n\n2. Run the following command:\n\n   ```\n   npm init --yes\n   ```\n\n#### Example\n\n```\n> npm init --yes\nWrote to /home/monatheoctocat/my_package/package.json:\n\n{\n  \"name\": \"my_package\",\n  \"description\": \"\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/monatheoctocat/my_package.git\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/monatheoctocat/my_package/issues\"\n  },\n  \"homepage\": \"https://github.com/monatheoctocat/my_package\"\n}\n```\n\n#### Default values extracted from the current directory\n\n  - `name`: the current directory name\n  - `version`: always `1.0.0`\n  - `description`: info from the README, or an empty string `\"\"`\n  - `scripts`: by default creates an empty `test` script\n  - `keywords`: empty\n  - `author`: empty\n  - `license`: [`ISC`][isc-license]\n  - `bugs`: information from the current directory, if present\n  - `homepage`: information from the current directory, if present\n\n### Setting config options for the init command\n\nYou can set default config options for the init command. For example, to set the default author email, author name, and license, on the command line, run the following commands:\n\n```\n> npm set init.author.email \"example-user@example.com\"\n> npm set init.author.name \"example_user\"\n> npm set init.license \"MIT\"\n```\n\n[semver]: about-semantic-versioning\n[init-pkg-json]: https://github.com/npm/init-package-json\n[isc-license]: https://opensource.org/licenses/ISC\n"},{"id":"d99e4216-f95b-5f5c-ad70-73e79e1e12ac","frontmatter":{"title":"Creating and publishing private packages"},"rawBody":"---\ntitle: Creating and publishing private packages\nredirect_from:\n  - /private-modules/intro\n---\nimport shared from '../../../src/shared.js'\n\nTo share your code with a limited set of users or teams, you can publish private user-scoped or organization-scoped packages to the npm registry.\n\nFor more information on scopes and private packages, see \"[About scopes][scopes]\" and \"[About private packages][private-pkgs]\".\n\n<Note>\n\n**Note:** Before you can publish private user-scoped npm packages, you must <a href=\"https://npmjs.com/signup\">sign up</a> for a paid npm user account.\n\nAdditionally, to publish private organization-scoped packages, you must <a href=\"https://npmjs.com/signup\">create an npm user account</a>, then <a href=\"https://www.npmjs.com/signup?next=/org/create\">\ncreate a paid npm organization</a>.\n\n</Note>\n\n## Creating a private package\n\n1. If you are using npmrc to [manage accounts on multiple registries][reg-config], on the command line, switch to the appropriate profile:\n\n    ```\n    npmrc <profile-name>\n    ```\n\n2. On the command line, create a directory for your package:\n\n    ```\n    mkdir my-test-package\n    ```\n\n3. Navigate to the root directory of your package:\n\n    ```\n    cd my-test-package\n    ```\n\n4. If you are using git to manage your package code, in the package root directory, run the following commands, replacing `git-remote-url` with the git remote URL for your package:\n\n    ```\n    git init\n    git remote add origin git://git-remote-url\n    ```\n\n5. In the package root directory, run the `npm init` command and pass the scope to the `scope` flag:\n\n   * For an organization-scoped package, replace `my-org` with the name of your organization:\n     ```\n     npm init --scope=@my-org\n     ```\n\n   * For a user-scoped package, replace `my-username` with your username:\n     ```\n     npm init --scope=@my-username\n     ```\n\n6. Respond to the prompts to generate a <a href=\"https://docs.npmjs.com/about-package-json-and-package-lock-json-files\">`package.json`</a> file. For help naming your package, see \"[Package name guidelines][pkg-name]\".\n\n7. Create a [README file][readme-file] that explains what your package code is and how to use it.\n\n8. In your preferred text editor, write the code for your package.\n\n## Reviewing package contents for sensitive or unnecessary information\n\nPublishing sensitive information to the registry can harm your users, compromise your development infrastructure, be expensive to fix, and put you at risk of legal action. **We strongly recommend removing sensitive information, such as private keys, passwords, [personally identifiable information][pii] (PII), and credit card data before publishing your package to the registry.** Even if your package is private, sensitive information can be exposed if the package is made public or downloaded to a computer that can be accessed by more users than intended.\n\nFor less sensitive information, such as testing data, use a `.npmignore` or `.gitignore` file to prevent publishing to the registry. For more information, see [this article][developers].\n\n## Testing your package\n\nTo reduce the chances of publishing bugs, we recommend testing your package before publishing it to the npm registry. To test your package, run `npm install` with the full path to your package directory:\n\n```\nnpm install my-package\n```\n\n## Publishing private packages\n\nBy default, scoped packages are published with private visibility.\n\n1. On the command line, navigate to the root directory of your package.\n\n   ```\n   cd /path/to/package\n   ```\n\n2. To publish your private package to the npm registry, run:\n\n   ```\n   npm publish\n   ```\n\n3. To see your private package page, visit https://npmjs.com/package/*package-name*, replacing *package-name* with the name of your package. Private packages will say `private` below the package name on the npm website.\n\n   <>{shared['organization-package-private'].image}</>\n\nFor more information on the `publish` command, see the [CLI documentation][cli-publish].\n\n[scopes]: about-scopes\n[private-pkgs]: about-private-packages\n[user-signup]: https://www.npmjs.com/signup\n[create-org]: https://www.npmjs.com/signup?next=/org/create\n[pkg-name]: package-name-guidelines\n[readme-file]: about-package-readme-files\n[developers]: /misc/developers#keeping-files-out-of-your-package\n[cli-publish]: /cli/publish\n[reg-config]: configuring-your-registry-settings-as-an-npm-enterprise-user#using-npmrc-to-manage-multiple-profiles-for-different-registries\n"},{"id":"f60de04f-5cf2-5aa6-88f3-99d8c030e19e","frontmatter":{"title":"Creating and publishing scoped public packages"},"rawBody":"---\ntitle: Creating and publishing scoped public packages\n---\nimport shared from '../../../src/shared.js'\n\nTo share your code publicly in a user or organization namespace, you can publish public user-scoped or organization-scoped packages to the npm registry.\n\nFor more information on scopes, see \"[About scopes][scopes]\".\n\n<Note>\n\n**Note:** Before you can publish user-scoped npm packages, you must <a href=\"https://www.npmjs.com/signup\">sign up</a> for an npm user account.\n\nAdditionally, to publish organization-scoped packages, you must <a href=\"https://www.npmjs.com/signup\">create an npm user account</a>, then <a href=\"https://www.npmjs.com/signup?next=/org/create\">create an npm organization</a>.\n\n</Note>\n\n## Creating a scoped public package\n\n1. If you are using npmrc to [manage accounts on multiple registries][reg-config], on the command line, switch to the appropriate profile:\n\n    ```\n    npmrc <profile-name>\n    ```\n\n2. On the command line, create a directory for your package:\n\n    ```\n    mkdir my-test-package\n    ```\n\n3. Navigate to the root directory of your package:\n\n    ```\n    cd my-test-package\n    ```\n\n4. If you are using git to manage your package code, in the package root directory, run the following commands, replacing `git-remote-url` with the git remote URL for your package:\n\n    ```\n    git init\n    git remote add origin git://git-remote-url\n    ```\n\n5. In the package root directory, run the `npm init` command and pass the scope to the `scope` flag:\n\n   * For an organization-scoped package, replace `my-org` with the name of your organization:\n     ```\n     npm init --scope=@my-org\n     ```\n\n   * For a user-scoped package, replace `my-username` with your username:\n     ```\n     npm init --scope=@my-username\n     ```\n\n6. Respond to the prompts to generate a <a href=\"https://docs.npmjs.com/about-package-json-and-package-lock-json-files\">`package.json`</a> file. For help naming your package, see \"[Package name guidelines][pkg-name]\".\n7. Create a [README file][readme-file] that explains what your package code is and how to use it.\n8. In your preferred text editor, write the code for your package.\n\n## Reviewing package contents for sensitive or unnecessary information\n\nPublishing sensitive information to the registry can harm your users, compromise your development infrastructure, be expensive to fix, and put you at risk of legal action. **We strongly recommend removing sensitive information, such as private keys, passwords, [personally identifiable information][pii] (PII), and credit card data before publishing your package to the registry.**\n\nFor less sensitive information, such as testing data, use a `.npmignore` or `.gitignore` file to prevent publishing to the registry. For more information, see [this article][developers].\n\n## Testing your package\n\nTo reduce the chances of publishing bugs, we recommend testing your package before publishing it to the npm registry. To test your package, run `npm install` with the full path to your package directory:\n\n```\nnpm install my-package\n```\n\n## Publishing scoped public packages\n\nBy default, scoped packages are published with private visibility. To publish a scoped package with public visibility, use `npm publish --access public`.\n\n1. On the command line, navigate to the root directory of your package.\n\n    ```\n    cd /path/to/package\n    ```\n\n2. To publish your scoped public package to the npm registry, run:\n\n    ```\n    npm publish --access public\n    ```\n\n3. To see your public package page, visit https://npmjs.com/package/*package-name*, replacing *package-name* with the name of your package. Public packages will say `public` below the package name on the npm website.\n\n   <>{shared['organization-package-public'].image}</>\n\nFor more information on the `publish` command, see the [CLI documentation][cli-publish].\n\n\n[scopes]: about-scopes\n[user-signup]: https://www.npmjs.com/signup\n[create-org]: https://www.npmjs.com/signup?next=/org/create\n[reg-config]: configuring-your-registry-settings-as-an-npm-enterprise-user\n[pkg-name]: package-name-guidelines\n[readme-file]: about-package-readme-files\n[developers]: /misc/developers#keeping-files-out-of-your-package\n[cli-publish]: /cli/publish\n[pii]: https://en.wikipedia.org/wiki/Personally_identifiable_information\n"},{"id":"eabc01d0-cc01-5360-a41a-b7c5b9b5da7b","frontmatter":{"title":"Creating and publishing unscoped public packages"},"rawBody":"---\ntitle: Creating and publishing unscoped public packages\n---\n\n<Note>\n\n**Note:** You can only publish unscoped packages to the npm public registry. You cannot publish unscoped packages to an npm Enterprise registry.\n\n</Note>\n\nAs an npm user, you can create unscoped packages to use in your own projects and publish them to the npm public registry for others to use in theirs. Unscoped packages are always public and are referred to by the package name only:\n\n```\npackage-name\n```\n\nFor more information on package scope, access, and visibility, see \"[Package scope, access level, and visibility][pkg-viz]\".\n\n<Note>\n\n**Note:** Before you can publish public unscoped npm packages, you must <a href=\"https://www.npmjs.com/signup\">sign up</a> for an npm user account.\n\n</Note>\n\n## Creating an unscoped public package\n\n1. On the command line, create a directory for your package:\n\n    ```\n    mkdir my-test-package\n    ```\n\n2. Navigate to the root directory of your package:\n\n    ```\n    cd my-test-package\n    ```\n\n3. If you are using git to manage your package code, in the package root directory, run the following commands, replacing `git-remote-url` with the git remote URL for your package:\n\n    ```\n    git init\n    git remote add origin git://git-remote-url\n    ```\n\n4. In the package root directory, run the `npm init` command.\n5. Respond to the prompts to generate a <a href=\"https://docs.npmjs.com/about-package-json-and-package-lock-json-files\">`package.json`</a> file. For help naming your package, see \"[Package name guidelines][pkg-name]\".\n6. Create a [README file][readme-file] that explains what your package code is and how to use it.\n7. In your preferred text editor, write the code for your package.\n\n## Reviewing package contents for sensitive or unnecessary information\n\nPublishing sensitive information to the registry can harm your users, compromise your development infrastructure, be expensive to fix, and put you at risk of legal action. **We strongly recommend removing sensitive information, such as private keys, passwords, [personally identifiable information][pii] (PII), and credit card data before publishing your package to the registry.**\n\nFor less sensitive information, such as testing data, use a `.npmignore` or `.gitignore` file to prevent publishing to the registry. For more information, see [this article][developers].\n\n## Testing your package\n\nTo reduce the chances of publishing bugs, we recommend testing your package before publishing it to the npm registry. To test your package, run `npm install` with the full path to your package directory:\n\n```\nnpm install my-package\n```\n\n## Publishing unscoped public packages\n\n1. On the command line, navigate to the root directory of your package.\n\n    ```\n    cd /path/to/package\n    ```\n\n2. To publish your public package to the npm registry, run:\n\n    ```\n    npm publish\n    ```\n\n3. To see your public package page, visit https://npmjs.com/package/*package-name*, replacing *package-name* with the name of your package. Public packages will say `public` below the package name on the npm website.\n\nFor more information on the `publish` command, see the [CLI documentation][cli-publish].\n\n\n[pkg-viz]: package-scope-access-level-and-visibility\n[user-signup]: https://www.npmjs.com/signup\n[create-org]: https://www.npmjs.com/signup?next=/org/create\n[pkg-name]: package-name-guidelines\n[readme-file]: about-package-readme-files\n[developers]: /misc/developers#keeping-files-out-of-your-package\n[cli-publish]: /cli/publish\n[pii]: https://en.wikipedia.org/wiki/Personally_identifiable_information\n"},{"id":"fdcd1921-0305-52ea-8756-68aee89ea71e","frontmatter":{"title":"Creating Node.js modules"},"rawBody":"---\ntitle: Creating Node.js modules\nredirect_from:\n  - /getting-started/creating-node-modules\n---\n\nNode.js modules are a type of [package][about-pkgs] that can be published to npm.\n\n## Overview\n\n1. [Create a `package.json` file](#create-a-package-json-file)\n2. [Create the file that will be loaded when your module is required by another application](#create-the-file-that-will-be-loaded-when-your-module-is-required-by-another-application)\n3. [Test your module](#test-your-module)\n\n## Create a `package.json` file\n\n1. To create a `package.json` file, on the command line, in the root directory of your Node.js module, run `npm init`:\n   - For [scoped modules][scoped-pkg], run `npm init --scope=@scope-name`\n   - For [unscoped modules][unscoped-pkg], run `npm init`\n2. Provide responses for the required fields (`name` and `version`), as well as the `main` field:\n   - `name`: The name of your module.\n   - `version`: The initial module version. We recommend following [semantic versioning guidelines][semver] and starting with `1.0.0`.\n\nFor more information on `package.json` files, see \"[Creating a package.json file][creating-pkg-json]\".\n\n## Create the file that will be loaded when your module is required by another application\n\n\nIn the file, add a function as a property of the `exports` object. This will make the function available to other code:\n\n```\nexports.printMsg = function() {\n  console.log(\"This is a message from the demo package\");\n}\n```\n\n## Test your module\n\n1. Publish your package to npm:\n\n   - For [private packages][priv-pkg-pub] and [unscoped packages][unscoped-pkg-pub], use `npm publish`.\n   - For [scoped public packages][scoped-pkg-pub], use `npm publish --access public`\n\n2. On the command line, create a new test directory outside of your project directory.\n\n   ```\n   mkdir test-directory\n   ```\n\n3. Switch to the new directory:\n\n   ```\n   cd /path/to/test-directory\n   ```\n\n4. In the test directory, install your module:\n\n   ```\n   npm install <your-module-name>\n   ```\n\n5. In the test directory, create a `test.js` file which requires your module and calls your module as a method.\n\n6. On the command line, run `node test.js`. The message sent to the console.log should appear.\n\n## Resources\n\n<iframe src=\"https://www.youtube.com/embed/3I78ELjTzlQ\" frameborder=\"0\" allowfullscreen></iframe>\n\n\n[about-pkgs]: about-packages-and-modules\n[scoped-pkg]: about-scopes\n[unscoped-pkg]: creating-and-publishing-unscoped-public-packages\n[semver]: about-semantic-versioning\n[creating-pkg-json]: creating-a-package-json-file\n[priv-pkg-pub]: creating-and-publishing-private-packages#publishing-private-packages\n[unscoped-pkg-pub]: creating-and-publishing-unscoped-public-packages#publishing-unscoped-public-packages\n[scoped-pkg-pub]: creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages\n"},{"id":"80254e39-35b3-5d35-857a-d58e7e7b37b7","frontmatter":{"title":"Contributing packages to the registry"},"rawBody":"---\ntitle: Contributing packages to the registry\nredirect_from: [ /getting-started/publishing-npm-packages ]\n---\n\n<Index />\n"},{"id":"7649271c-dacc-5c62-9a3d-a0b654eae11a","frontmatter":{"title":"Package name guidelines"},"rawBody":"---\ntitle: Package name guidelines\n---\n\nWhen choosing a name for your package, choose a name that\n\n- is unique\n- is descriptive\n- meets [npm policy guidelines][policies]. For example, do not give your package an offensive name, and do not use someone else's trademarked name or violate the [npm trademark policy][npm-trademark].\n\nAdditionally, when choosing a name for an [**unscoped** package][create-unscoped], also choose a name that\n\n- is not already owned by someone else\n- is not spelled in a similar way to another package name\n- will not confuse others about authorship\n\n\n[policies]: https://www.npmjs.com/policies\n[npm-trademark]: https://www.npmjs.com/policies/trademark#the-npm-trademark-policy\n[create-unscoped]: creating-and-publishing-unscoped-public-packages\n"},{"id":"431e9df4-2a18-51a9-9f1b-84cb07f0d2ff","frontmatter":{"title":"Specifying dependencies and devDependencies in a package.json file"},"rawBody":"---\ntitle: Specifying dependencies and devDependencies in a package.json file\n---\n\nTo specify the packages your project depends on, you must\nlist them as `\"dependencies\"` or `\"devDependencies\"` in your package's [`package.json`][pkg-json] file. When you (or another user) run `npm install`, npm will download dependencies and devDependencies that are listed in `package.json` that meet the [semantic version][semver] requirements listed for each. To see which versions of a package will be installed, use the [semver calculator][semver-calc].\n\n- `\"dependencies\"`: Packages required by your application in production.\n- `\"devDependencies\"`: Packages that are only needed for local development and testing.\n\n## Adding dependencies to a `package.json` file\n\nYou can add dependencies to a `package.json` file from the command line or by manually editing the `package.json` file.\n\n### Adding dependencies to a `package.json` file from the command line\n\nTo add dependencies and devDependencies to a `package.json` file from the command line, you can install them in the root directory of your package using the `--save-prod` flag for dependencies (the default behavior of `npm install`) or the `--save-dev` flag for devDependencies.\n\nTo add an entry to the `\"dependencies\"` attribute of a `package.json` file, on the command line, run the following command:\n\n```\nnpm install <package-name> [--save-prod]\n```\n\nTo add an entry to the `\"devDependencies\"` attribute of a `package.json` file, on the command line, run the following command:\n\n```\nnpm install <package-name> --save-dev\n```\n\n### Manually editing the `package.json` file\n\nTo add dependencies to a `package.json` file, in a text editor, add an attribute called `\"dependencies\"` that references the name and [semantic version][semver] of each dependency:\n\n```\n{\n  \"name\": \"my_package\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"my_dep\": \"^1.0.0\",\n    \"another_dep\": \"~2.2.0\"\n  }\n}\n```\n\nTo add devDependencies to a `package.json` file, in a text editor, add an attribute called `\"devDependencies\"` that references the name and [semantic version][semver] of each devDependency:\n\n```\n\"name\": \"my_package\",\n\"version\": \"1.0.0\",\n\"dependencies\": {\n  \"my_dep\": \"^1.0.0\",\n  \"another_dep\": \"~2.2.0\"\n},\n\"devDependencies\" : {\n  \"my_test_framework\": \"^3.1.0\".\n  \"another_dev_dep\": \"1.0.0 - 1.2.0\"\n}\n```\n\n[pkg-json]: creating-a-packge-json-file\n[semver]: about-semantic-versioning\n[semver-calc]: https://semver.npmjs.com/\n"},{"id":"86f67d67-59ed-5978-91b8-2abb00bd0462","frontmatter":{"title":"Downloading and installing packages globally"},"rawBody":"---\ntitle: Downloading and installing packages globally\nredirect_from:\n  - /getting-started/installing-npm-packages-globally\n---\n\n<Note>\n\n**Tip:** If you are using npm 5.2 or higher, we recommend using `npx` to run packages globally.\n\n</Note>\n\n[Installing][cli-install] a package globally allows you to use the code in the package as a set of tools on your local computer.\n\nTo download and install packages globally, on the command line, run the following command:\n\n```\nnpm install -g <package_name>\n```\n\nIf you get an EACCES permissions error, you may need to reinstall npm with a version manager or manually change npm's default directory. For more information, see \"[Resolving EACCES permissions errors when installing packages globally][perm-errors]\".\n\n\n[cli-install]: /cli/install\n[perm-errors]: resolving-eacces-permissions-errors-when-installing-packages-globally\n"},{"id":"731d5d33-7975-5aa7-80b1-7c30eefbf445","frontmatter":{"title":"Downloading and installing packages locally"},"rawBody":"---\ntitle: Downloading and installing packages locally\nredirect_from:\n  - /downloading-and-installing-packages\n  - /getting-started/installing-npm-packages-locally\n---\n\nYou can [install][cli-install] a package locally if you want to depend on the package from your own module, using something like Node.js `require`. This is `npm install`'s default behavior.\n\n## Installing an unscoped package\n\nUnscoped packages are always public, which means they can be searched for, downloaded, and installed by anyone. To install a public package, on the command line, run\n\n```\nnpm install <package_name>\n```\n\nThis will create the `node_modules` directory in your current directory (if one doesn't exist yet) and will download the package to that directory.\n\n<Note>\n\n**Note:** If there is no `package.json` file in the local directory, the latest version of the package is installed.\n\nIf there is a `package.json` file, npm installs the latest version that satisfies the [semver rule](about-semantic-versioning) declared in `package.json`.\n\n</Note>\n\n## Installed a scoped public package\n\n[Scoped public packages][scoped-public-pkg] can be downloaded and installed by anyone, as long as the scope name is referenced during installation:\n\n```\nnpm install @scope/package-name\n```\n\n## Installing a private package\n\n[Private packages][private-pkg] can only be downloaded and installed by those who have been granted read access to the package. Since private packages are always scoped, you must reference the scope name during installation:\n\n```\nnpm install @scope/private-package-name\n```\n\n## Testing package installation\n\nTo confirm that `npm install` worked correctly, in your module directory, check that a `node_modules` directory exists and that it contains a directory for the package(s) you installed:\n\n```\nls node_modules\n```\n\n## Installed package version\n\nIf there is a `package.json` file in the directory in which `npm install` is run, npm instalsx the latest version of the package that satisfies the [semantic versioning rule][semver] declared in `package.json`.\n\nIf there is no `package.json` file, the latest version of the package is installed.\n\n## Installing a package with dist-tags\n\nLike `npm publish`, `npm install <package_name>` will use the `latest` tag by default.\n\nTo override this behavior, use `npm install <package_name>@<tag>`. For example, to install the `example-package` at the version tagged with `beta`, you would run the following command:\n\n```\nnpm install example-package@beta\n```\n\n## Resources\n\n<iframe src=\"https://www.youtube.com/embed/JDSfqFFbNYQ\" frameborder=\"0\" allowfullscreen></iframe>\n\n\n[scoped-public-pkg]: about-scopes\n[private-pkg]: about-private-packages\n[cli-install]: /cli-documentation/install\n[semver]: about-semantic-versioning\n"},{"id":"84e0994f-cac8-519c-bb23-29b12eef7d5a","frontmatter":{"title":"Getting packages from the registry"},"rawBody":"---\ntitle: Getting packages from the registry\n---\n\n<Index />\n"},{"id":"33219d4f-238c-5066-a1fe-8fb3d957961b","frontmatter":{"title":"Resolving EACCES permissions errors when installing packages globally"},"rawBody":"---\ntitle: Resolving EACCES permissions errors when installing packages globally\nredirect_from:\n  - /getting-started/fixing-npm-permissions\n---\n\nIf you see an `EACCES` error when you try to [install a package globally][global-install], you can either:\n\n- Reinstall npm with a node version manager (recommended),\n\n  **or**\n\n- Manually change npm's default directory\n\n## Reinstall npm with a node version manager\n\nThis is the best way to avoid permissions issues. To reinstall npm with a node version manager, follow the steps in \"[Downloading and installing Node.js and npm][install-npm]\". You do not need to remove your current version of npm or Node.js before installing a node version manager.\n\n## Manually change npm's default directory\n\n<Note>\n\n**Note:** This section does not apply to Microsoft Windows.\n\n</Note>\n\nTo minimize the chance of permissions errors, you can configure npm to use a different directory. In this example, you will create and use hidden directory in your home directory.\n\n1. Back up your computer.\n\n2. On the command line, in your home directory, create a directory for global installations:\n\n    ```\n    mkdir ~/.npm-global\n    ```\n\n3. Configure npm to use the new directory path:\n\n   ```\n   npm config set prefix '~/.npm-global'\n   ```\n\n4. In your preferred text editor, open or create a `~/.profile` file and add this line:\n\n    ```\n    export PATH=~/.npm-global/bin:$PATH\n    ```\n\n5. On the command line, update your system variables:\n\n    ```\n    source ~/.profile\n    ```\n\n6. To test your new configuration, install a package globally without using `sudo`:\n\n    ```\n    npm install -g jshint\n    ```\n\nInstead of steps 2-4, you can use the corresponding ENV variable (e.g. if you don't want to modify `~/.profile`):\n\n```\nNPM_CONFIG_PREFIX=~/.npm-global\n```\n\n<Note>\n\n**npx: an alternative to running global commands**\n\nIf you are using npm version 5.2 or greater, you may want to consider [npx](https://www.npmjs.com/package/npx) as an alternative way to run global commands, especially if you only need a command occasionally. For more information, see [this article about npx](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b).\n\n</Note>\n\n[global-install]: downloading-and-installing-packages-globally\n[install-npm]: downloading-and-installing-node-js-and-npm\n[npx]: https://www.npmjs.com/package/npx\n[npx-article]: https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b\n"},{"id":"a2a0ad87-15c1-533a-b4b9-da7c74650bd0","frontmatter":{"title":"Using deprecated packages"},"rawBody":"---\ntitle: Using deprecated packages\n---\n\nIf you install a package, and it prints a deprecation message, we recommend following the instructions, if possible.\n\nThat might mean updating to a new version, or updating your package dependencies.\n\n<Screenshot src=\"/packages-and-modules/getting-packages-from-the-registry/package-deprecated.png\" alt=\"Screenshot of a deprecated package showing that it is no longer supported\" />\n\nA deprecation message doesn't always mean the package or version is unusable; it may mean the package is unmaintained and will no longer be updated by the publisher.\n"},{"id":"9d2d08dd-753e-5630-8adb-cbce90506ae8","frontmatter":{"title":"Using npm packages in your projects"},"rawBody":"---\ntitle: Using npm packages in your projects\n---\n\nOnce you have [installed a package][install-pkg] in `node_modules`, you can use it in your code.\n\n## Using unscoped packages in your projects\n\n### Node.js module\n\nIf you are creating a Node.js module, you can use a package in your module by passing it as an argument to the `require` function.\n\n\n```javascript\nvar lodash = require('lodash');\n\nvar output = lodash.without([1, 2, 3], 1);\nconsole.log(output);\n```\n\n\n### package.json file\n\nIn `package.json`, list the package under dependencies. You can optionally include a [semantic version][semver].\n\n```json\n{\n  \"dependencies\": {\n    \"@package_name\": \"^1.0.0\"\n  }\n}\n```\n\n## Using scoped packages in your projects\n\nTo use a scoped package, simply include the scope wherever you use the package name.\n\n### Node.js module\n\n\n```js\nvar projectName = require(\"@scope/package-name\")\n```\n\n### package.json file\n\nIn `package.json`:\n\n```json\n{\n  \"dependencies\": {\n    \"@scope/package_name\": \"^1.0.0\"\n  }\n}\n```\n\n## Resolving \"Cannot find module\" errors\n\nIf you have not properly installed a package, you will receive an error when you try to use it in your code. For example, if you reference the `lodash` package without installing it, you would see the following error:\n\n```\nmodule.js:340\n    throw err;\n          ^\nError: Cannot find module 'lodash'\n```\n\n\n- For scoped packages, run `npm install <@scope/package_name>`\n- For unscoped packages, run `npm install <package_name>`\n\n\n[install-pkg]: downloading-and-installing-packages\n[semver]: about-semantic-versioning\n"},{"id":"7ae02fc8-d625-545d-b259-c93500eb9ee0","frontmatter":{"title":"About packages and modules"},"rawBody":"---\ntitle: About packages and modules\nredirect_from:\n  - /getting-started/packages\n---\n\nThe npm registry contains packages, many of which are also Node modules, or contain Node modules. Read on to understand how they differ and how they interact.\n\n## About packages\n\nA **package** is a file or directory that is described by a `package.json` file. A package must contain a `package.json` file in order to be published to the npm registry. For more information on creating a `package.json` file, see \"[Creating a package.json file][pkg-json]\".\n\nPackages can be unscoped or scoped to a user or organization, and scoped packages can be private or public. For more information, see\n- \"[About scopes][about-scopes]\"\n- \"[About private packages][private-pkgs]\"\n- \"[Package scope, access level, and visibility][pkg-viz]\"\n\n### About package formats\n\nA package is any of the following:\n\n* a) A folder containing a program described by a `package.json` file.\n* b) A gzipped tarball containing (a).\n* c) A URL that resolves to (b).\n* d) A `<name>@<version>` that is published on the registry with (c).\n* e) A `<name>@<tag>` that points to (d).\n* f) A `<name>` that has a `latest` tag satisfying (e).\n* g) A `git` url that, when cloned, results in (a).\n\n### npm package git URL formats\n\nGit URLs used for npm packages can be formatted in the following ways:\n\n- `git://github.com/user/project.git#commit-ish`\n- `git+ssh://user@hostname:project.git#commit-ish`\n- `git+http://user@hostname/project/blah.git#commit-ish`\n- `git+https://user@hostname/project/blah.git#commit-ish`\n\nThe `commit-ish` can be any tag, sha, or branch that can be supplied as\nan argument to `git checkout`. The default `commit-ish` is `master`.\n\n## About modules\n\nA **module** is any file or directory in the `node_modules` directory that can be loaded by the Node.js `require()` function.\n\nTo be loaded by the Node.js `require()` function, a module must be one of the following:\n\n* A folder with a `package.json` file containing a `\"main\"` field.\n* A JavaScript file.\n\n<div class=\"note\">\n\n<span class=\"bold\">Note:</span>\nSince modules are not required to have a <code class=\"highlighter-rouge\">package.json</code> file, not all modules are packages. Only modules that have a <code class=\"highlighter-rouge\">package.json</code> file are also packages.\n\n</div>\n\nIn the context of a Node program, the `module` is also the thing that\nwas loaded *from* a file. For example, in the following program:\n\n    var req = require('request')\n\nwe might say that \"The variable `req` refers to the `request` module\".\n\n\n[about-scopes]: about-scopes\n[private-pkgs]: about-private-packages\n[pkg-json]: creating-a-package-json-file\n[pkg-viz]: package-scope-access-level-and-visibility\n"},{"id":"25144378-3db6-5cce-bd22-6683b13abe00","frontmatter":{"title":"About private packages"},"rawBody":"---\ntitle: About private packages\n---\n\n<div class=\"note\">\n\nTo use private packages, you must\n\n<ul>\n<li> be using npm version 2.7.0 or greater. To upgrade, on the command line, run <code class=\"highlighter-rouge\">npm install npm@latest -g</code></li>\n<li>have a <a href=\"https://www.npmjs.com/pricing\">paid user or organization account</a></li>\n</ul>\n\n</div>\n\nWith npm private packages, you can use the npm registry to host code that is only visible to you and chosen collaborators, allowing you to manage and use private code alongside public code in your projects.\n\nPrivate packages always have a scope, and scoped packages are private by default.\n\n* **User-scoped private packages** can only be accessed by you and collaborators to whom you have granted read or read/write access. For more information, see \"[Adding collaborators to private packages owned by a user account][user-pkg-add]\".\n* **Organization-scoped private packages** can only be accessed by teams that have been granted read or read/write access. For more information, see \"[Managing team access to organization packages][team-pkg-add]\".\n\n## Next steps\n\n- \"[Creating and publishing private packages][create-priv-pkg]\"\n- \"[Using npm packages in your projects][use-pkg]\"\n\n## Resources\n\n<iframe src=\"https://www.youtube.com/embed/O6JoXGnHK_Y\" frameborder=\"0\" allowfullscreen></iframe>\n\n[paid-acct]: https://www.npmjs.com/pricing\n[user-pkg-add]: adding-collaborators-to-private-packages-owned-by-a-user-account\n[team-pkg-add]: managing-team-access-to-organization-packages\n[create-priv-pkg]: creating-and-publishing-private-packages\n[install-pkgs]: installing-packages-and-dependencies#installing-private-packages\n[use-pkg]: using-npm-packages-in-your-projects\n"},{"id":"f2d08035-ab85-5ded-8de9-7c5379e530b3","frontmatter":{"title":"About public packages"},"rawBody":"---\ntitle: About public packages\n---\n\nAs an npm user or organization member, you can create and publish public packages that anyone can download and use in their own projects.\n\n* **Unscoped** public packages exist in the global public registry namespace and can be referenced in a `package.json` file with the package name alone: `package-name`.\n* **Scoped** public packages belong to a user or organization and must be preceded by the user or organization name when included as a dependency in a `package.json` file:\n  * `@username/package-name`\n  * `@org-name/package-name`\n\n## Next steps\n\n* \"[Creating and publishing scoped public packages][create-scoped-pkg]\"\n* \"[Creating and publishing unscoped public packages][create-unscoped-pkg]\"\n* \"[Using npm packages in your projects][use-pkg]\"\n\n\n[create-scoped-pkg]: creating-and-publishing-scoped-public-packages\n[create-unscoped-pkg]: creating-and-publishing-unscoped-public-packages\n[use-pkg]: using-npm-packages-in-your-projects\n"},{"id":"fe6412d3-c106-5594-9a4f-cfec15480ace","frontmatter":{"title":"About scopes"},"rawBody":"---\ntitle: About scopes\nredirect_from:\n  - /getting-started/scoped-packages\n---\n\n<div class=\"note\">\n\n<span class=\"bold\">Note:</span> You must be using npm version 2 or greater to use scopes. To upgrade to the latest version of npm, on the command line, run <code class=\"highlighter-rouge\">npm install npm@latest -g</code>\n\n</div>\n\nWhen you sign up for an npm user account or create an organization, you are granted a scope that matches your user or organization name. You can use this scope as a namespace for related packages.\n\nA scope allows you to create a package with the same name as a package created by another user or organization without conflict.\n\nWhen listed as a dependent in a `package.json` file, scoped packages are preceded by their scope name. The scope name is everything between the `@` and the slash:\n\n* **\"npm\" scope:**\n```\n@npm/package-name\n```\n* **\"npmcorp\" scope:**\n```\n@npmcorp/package-name\n```\n\nTo create and publish public scoped packages, see \"[Creating and publishing scoped public packages][create-public-pkg]\".\n\nTo create and publish private scoped packages, see \"[Creating and publishing private packages][create-private-pkg]\".\n\n## Scopes and package visibility\n\n- Unscoped packages are always public.\n- [Private packages][about-priv-pkg] are always scoped.\n- Scoped packages are private by default; you must pass a command-line flag when publishing to make them public.\n\nFor more information on package scope and visibility, see \"[Package scope, access level, and visibility][pkg-viz]\".\n\n\n[create-public-pkg]: creating-and-publishing-scoped-public-packages\n[create-private-pkg]: creating-and-publishing-private-packages\n[about-priv-pkg]: about-private-packages\n[pkg-viz]: package-scope-access-level-and-visibility\n"},{"id":"a2192793-60a8-5837-9b0d-2ed914761f97","frontmatter":{"title":"About the public npm registry"},"rawBody":"---\ntitle: About the public npm registry\n---\n\nThe public npm registry is a database of JavaScript packages, each comprised of software and metadata. Open source developers and developers at companies use the npm registry to contribute packages to the entire community or members of their organizations, and download packages to use in their own projects.\n\nTo get started with the registry, [sign up for an npm account][signup] and check out the \"[Getting started][getting-started]\" and [CLI][cli] documentation.\n\n[public-website]: https://npmjs.com\n[cli]: /cli-documentation\n[signup]: https://www.npmjs.com/signup\n[getting-started]: /getting-started\n"},{"id":"588f6e3e-c67f-541c-8243-3817fbec39b9","frontmatter":{"title":"Introduction to packages and modules"},"rawBody":"---\ntitle: Introduction to packages and modules\n---\n\n<Index />\n"},{"id":"18e92413-ebe9-5c75-8443-2e1fd1061b53","frontmatter":{"title":"npm package scope, access level, and visibility"},"rawBody":"---\ntitle: npm package scope, access level, and visibility\n---\n\nVisibility of npm packages depends on the scope (namespace) in which the package is contained, and the access level (private or public) set for the package.\n\n<div class=\"note\">\n\n<span class=\"bold\">Note:</span> To create organization-scoped packages, you must first create an organization. For more information, see \"<a href=\"https://docs.npmjs.com/organizations/creating-an-organization\">Creating an organization</a>\".\n\n</div>\n\n## Public registry\n\n| Scope        | Access level | Can view and download | Can write (publish)                                                                  |\n|--------------|--------------|-----------------------------------------------------------------------------|---|\n| Org | Private      | Members of a team in the organization with read access to the package | Members of a team in the organization with read and write access to the package |\n| Org | Public       | Everyone     | Members of a team in the organization with read and write access to the package |\n| User     | Private      | The package owner and users who have been granted read access to the package  | The package owner and users who have been granted read and write access to the package |\n| User     | Public       | Everyone  | The package owner and users who have been granted read and write access to the package |\n| Unscoped | Public | Everyone | The package owner and users who have been granted read and write access to the package |\n\n<div class=\"note\">\n\n<span class=\"bold\">Note:</span> Only user accounts can create and manage unscoped packages. Organizations can only manage scoped packages.\n\n</div>\n\n## npm Enterprise\n\n<div class=\"note\">\n\nThe following table applies to customers who purchased <a href=\"https://docs.npmjs.com/enterprise\">npm Enterprise</a> after July 26, 2018.\n\n</div>\n\n| Scope        | Access level | Can view and download | Can write (publish)                                                                  |\n|--------------|--------------|-----------------------------------------------------------------------------|---|\n| Org | Private      | Logged-in members of the Enterprise registry who belong to a team in the Org with read access to the package | Logged-in members of the Enterprise registry who belong to a team in the Org with read and write access to the package |\n| Org | Public       | All logged-in members of the Enterprise registry     | Logged-in members of the Enterprise registry who belong to a team in the Org with read and write access to the package |\n| User     | Private      | The package owner and logged-in members of the Enterprise registry who have been granted read access to the package  | The package owner and logged-in members of the Enterprise registry who have been granted read and write access to the package |\n| User     | Public       | All logged-in members of the Enterprise registry  | The package owner and logged-in members of the Enterprise registry who have been granted read and write access to the package |\n| Unscoped | Public | All users of the Enterprise registry | None (see note below) |\n\n<div class=\"note\">\n\n<span class=\"bold\">Note:</span> The unscoped namespace on npm Enterprise is reserved for unscoped packages in the public npm registry. To prevent npm Enterprise users from accidentally publishing proprietary code to the public npm registry, where it would be visible to anyone on the internet, we do not allow publishing unscoped packages to npm Enterprise.\n\n</div>\n"},{"id":"d1e4838e-50e0-5cc8-a0ac-dd7f44423237","frontmatter":{"title":"About audit reports"},"rawBody":"---\ntitle: About audit reports\n---\n\n# About audit reports\n\nAudit reports contain tables of information about security vulnerabilities in your project's dependencies to help you fix the vulnerability or troubleshoot further.\n\n<Screenshot src=\"/packages-and-modules/securing-your-code/audit-report-results.png\" alt=\"Screenshot showing command-line audit report results\" />\n\n## Vulnerability table fields\n\n* [Severity](#severity)\n* [Description](#description)\n* [Package](#package)\n* [Patched in](#patched-in)\n* [Dependency of](#dependency-of)\n* [Path](#path)\n* [More info](#more-info)\n\n### Severity\n\nThe severity of the vulnerability, determined by the impact and exploitability of the vulnerability in its most common use case.\n\n| Severity |  Recommended action |\n|:---------|:--------------------|\n| Critical | Address immediately |\n| High | Address as quickly as possible |\n| Moderate | Address as time allows |\n| Low | Address at your discretion |\n\n#### Description\nThe description of the vulnerability. For example, \"Denial of service\".\n\n#### Package\nThe name of the package that contains the vulnerability.\n\n#### Patched in\nThe semantic version range that describes which versions contain a fix for the vulnerability.\n\n#### Dependency of\nThe module that the package with the vulnerability depends on.\n\n#### Path\nThe path to the code that contains the vulnerability.\n\n#### More info\nA link to the security report.\n"},{"id":"5c502cd6-8abd-5a51-a247-d7dc53560527","frontmatter":{"title":"About package PGP signatures"},"rawBody":"---\ntitle: About package PGP signatures\n---\n\nTo increase confidence in the npm public registry, we add our [PGP][pgp-wiki] signature to package metadata and publicize our public PGP key on [Keybase][keybase]. Our Keybase account is \"[npmregistry][npmregistry]\" and our public PGP key can be found at https://keybase.io/npmregistry/pgp_keys.asc\n\nYou can use the package PGP signature and our public PGP key to verify that the same entity who published the key (npm) also signed the package you downloaded from the npm public registry. For more information, see \"[Verifying the PGP signature of a package from the npm public registry][verify-pgp]\".\n\n## Tools we use\n\n### openpgpjs\n\nTo generate PGP signatures, we use [openpgpjs][openpgpjs-repo], a pure JavaScript implementation of OpenPGP. To learn more about openpgpjs, see https://openpgpjs.org/.\n\n### Keybase\n\nWe use Keybase to publicize our PGP key and give you confidence that the npm registry you install from is the same registry that signs packages.\n\nKeybase offers two advantages over the core OpenPGP experience that move us to recommend it to you:\n\n- The Keybase application and CLI provide an excellent user experience for PGP, which can be intimidating for newcomers.\n- Keybase manages and displays social proofs that the entity that controls a specific PGP key also controls accounts on social media and other places. These proofs help you determine whether you can trust an account.\n\nWe’ve established proofs on Keybase that we control [@npmjs][npmjs-twitter] on Twitter, the domain [npmjs.com][npmjs-com], and the domain [npmjs.org][npmjs-org]. Verifying these proofs won’t tell you who owns those domains, but it does establish that the same entity controls them and the PGP key advertised on Keybase.\n\nIf you install Keybase and create an account, you can follow npmregistry yourself and obtain a local copy of the registry’s public key. For more information, and to verify the PGP signature of a specific package version from the npm public registry, see \"[Verifying the PGP signature for a package from the npm public registry][verify-pgp]\".\n\n\n[keybase]: https://keybase.io\n[pgp-wiki]: https://en.wikipedia.org/wiki/Pretty_Good_Privacy\n[npmregistry]: https://keybase.io/npmregistry\n[openpgpjs-repo]: https://github.com/openpgpjs/openpgpjs\n[npmjs-twitter]: https://twitter.com/npmjs\n[npmjs-com]: https://npmjs.com\n[npmjs-org]: https://npmjs.org\n[verify-pgp]: verifying-the-pgp-signature-for-a-package-from-the-npm-public-registry\n"},{"id":"09c9e0ae-17d2-5e46-a753-97df56082d3a","frontmatter":{"title":"Auditing package dependencies for security vulnerabilities"},"rawBody":"---\ntitle: Auditing package dependencies for security vulnerabilities\nredirect_from:\n  - /getting-started/running-a-security-audit/\n---\n\n## About security audits\n\nA security audit is an assessment of package dependencies for security vulnerabilities. Security audits help you protect your package's users by enabling you to find and fix known vulnerabilities in dependencies that could cause data loss, service outages, unauthorized access to sensitive information, or other issues.\n\n## Running a security audit with `npm audit`\n\n<Note>\n\n**Note:** The `npm audit` command is available in npm@6. To upgrade, run `npm install npm@latest -g`.\n\n</Note>\n\nThe <a href=\"https://docs.npmjs.com/cli/audit\">`npm audit` command</a> submits a description of the dependencies configured in your package to your default registry and asks for a report of known vulnerabilities. `npm audit` checks direct dependencies, devDependencies, bundledDependencies, and optionalDependencies, but does not check peerDependencies.\n\n`npm audit` automatically runs when you install a package with `npm install`. You can also run `npm audit` manually on your [locally installed packages](downloading-and-installing-packages-locally) to conduct a security audit of the package and produce a report of dependency vulnerabilities and, if available, suggested patches.\n\n1. On the command line, navigate to your package directory by typing `cd path/to/your-package-name` and pressing **Enter**.\n2. Ensure your package contains `package.json` and `package-lock.json` files.\n3. Type `npm audit` and press **Enter**.\n4. Review the audit report and run recommended commands or investigate further if needed.\n\n### Resolving `EAUDITNOPJSON` and `EAUDITNOLOCK` errors\n\n`npm audit` requires packages to have `package.json` and `package-lock.json` files.\n\n* If you get an `EAUDITNOPJSON` error, create a `package.json` file by following the steps in \"[Creating a package.json file](creating-a-package-json-file)\".\n* If you get an `EAUDITNOLOCK` error, make sure your package has a `package.json` file, then create the package lock file by running `npm i --package-lock-only`.\n\n## Reviewing and acting on the security audit report\n\nRunning `npm audit` will produce a report of security vulnerabilities with the affected package name, vulnerability severity and description, path, and other information, and, if available, commands to apply patches to resolve vulnerabilities. For more information on the fields in the audit report, see \"[About audit reports](about-audit-reports)\"\n\n### Security vulnerabilities found with suggested updates\n\nIf security vulnerabilities are found and updates are available, you can either:\n\n* Run the `npm audit fix` subcommand to automatically install compatible updates to vulnerable dependencies.\n* Run the recommended commands individually to install updates to vulnerable dependencies. (Some updates may be semver-breaking changes; for more information, see \"[SEMVER warnings](#semver-warnings)\".)\n\n<Screenshot src=\"/packages-and-modules/securing-your-code/audit-report-suggested-fixes.png\" alt=\"Screenshot of command-line audit results with suggested fixes\" />\n\n#### SEMVER warnings\n\nIf the recommended action is a potential breaking change (semantic version major change), it will be followed by a `SEMVER WARNING` that says \"SEMVER WARNING: Recommended action is a potentially breaking change\". If the package with the vulnerability has changed its API, you may need to make additional changes to your package's code.\n\n### Security vulnerabilities found requiring manual review\n\nIf security vulnerabilities are found, but no patches are available, the audit report will provide information about the vulnerability so you can investigate further.\n\n<Screenshot src=\"/packages-and-modules/securing-your-code/audit-manual-review.png\" alt=\"Screenshot of command-line audit results requiring a manual review\" />\n\nTo address the vulnerability, you can\n\n* [Check for mitigating factors](#check-for-mitigating-factors)\n* [Update dependent packages if a fix exists](#update-dependent-packages-if-a-fix-exists)\n* [Fix the vulnerability](#fix-the-vulnerability)\n* [Open an issue in the package or dependent package issue tracker](#open-an-issue-in-the-package-or-dependent-package-issue-tracker)\n\n#### Check for mitigating factors\n\nReview the security advisory in the \"More info\" field for mitigating factors that may allow you to continue using the package with the vulnerability in limited cases. For example, the vulnerability may only exist when the code is used on specific operating systems, or when a specific function is called.\n\n#### Update dependent packages if a fix exists\n\nIf a fix exists but packages that depend on the package with the vulnerability have not been updated to include the fixed version, you may want to open a pull or merge request on the dependent package repository to use the fixed version.\n\n1. To find the package that must be updated, check the \"Path\" field for the location of the package with the vulnerability, then check for the package that depends on it. For example, if the path to the vulnerability is `@package-name > dependent-package > package-with-vulnerability`, you will need to update `dependent-package`.\n2. On the [npm public registry](https://npmjs.com), find the dependent package and navigate to its repository. For more information on finding packages, see \"[Searching for and choosing packages to download](searching-for-and-choosing-packages-to-download)\".\n3. In the dependent package repository, open a pull or merge request to update the version of the vulnerable package to a version with a fix.\n4. Once the pull or merge request is merged and the package has been updated in the [npm public registry](https://npmjs.com), update your copy of the package with `npm update`.\n\n#### Fix the vulnerability\n\nIf a fix does not exist, you may want to suggest changes that address the vulnerability to the package maintainer in a pull or merge request on the package repository.\n\n1. Check the \"Path\" field for the location of the vulnerability.\n2. On the [npm public registry](https://npmjs.com), find the package with the vulnerability. For more information on finding packages, see \"[Searching for and choosing packages to download](searching-for-and-choosing-packages-to-download)\".\n3. In the package repository, open a pull or merge request to make the fix on the package repository.\n4. Once the fix is merged and the package has been updated in the npm public registry, update your copy of the package that depends on the package with the fix.\n\n#### Open an issue in the package or dependent package issue tracker\n\nIf you do not want to fix the vulnerability or update the dependent package yourself, open an issue in the package or dependent package issue tracker.\n\n1. On the [npm public registry](https://npmjs.com), find the package with the vulnerability or the dependent package that needs an update. For more information on finding packages, see \"[Searching for and choosing packages to download](searching-for-and-choosing-packages-to-download)\".\n2. In the package or dependent package issue tracker, open an issue and include information from the audit report, including the vulnerability report from the \"More info\" field.\n\n### No security vulnerabilities found\n\nIf no security vulnerabilities are found, this means that packages with known vulnerabilities were not found in your package dependency tree. Since the advisory database can be updated at any time, we recommend regularly running `npm audit` manually, or adding `npm audit` to your continuous integration process.\n\n<Screenshot src=\"/packages-and-modules/securing-your-code/audit-no-vulnerabilities.png\" alt=\"Screenshot showing audit report with no vulnerabilities\" />\n\n## Turning off `npm audit` on package installation\n\n### Installing a single package\n\nTo turn off `npm audit` when installing a single package, use the `--no-audit` flag:\n\n```\nnpm install example-package-name --no-audit\n```\n\nFor more information, see the [`npm-install` command][cli-install].\n\n### Installing all packages\n\nTo turn off `npm audit` when installing all packages, set the `audit` setting to `false` in your user and global npmrc config files:\n\n```\nnpm set audit false\n```\n\nFor more information, see the [`npm-config` management command][cli-config] and the [`npm-config` audit setting][cli-config-audit].\n\n\n[cli-install]: /cli/install\n[cli-config]: /cli/config\n[cli-config-audit]: /cli/config#audit\n"},{"id":"d27213fb-a92e-5cb5-a94c-68f75a86e15c","frontmatter":{"title":"Securing your code"},"rawBody":"---\ntitle: Securing your code\n---\n\n<Index />\n"},{"id":"0ced2fb0-c82d-54b1-b518-ce662882b687","frontmatter":{"title":"Reporting a vulnerability in an npm package"},"rawBody":"---\ntitle: Reporting a vulnerability in an npm package\n---\n\n<Note>\n\n**Note:** Vulnerability reporting is currently only available for packages in the public npm registry.\n\n</Note>\n\nIf you find a security vulnerability in an npm package (either yours or someone else's), you can report it to the npm Security team to help keep the Javascript ecosystem safe.\n\n## Disclosure timeline\n\n- Vulnerability is reported\n- npm Security triages vulnerability report\n- npm Security notifies package maintainers\n- npm Security publishes security advisory when package maintainers release a fix\n- If maintainers are unresponsive after 45 days, npm Security makes the advisory public\n\n## Reporting a vulnerability\n\n<Note>\n\n**Note:** Vulnerability reports are sent to the npm Security team, not the package maintainer.\n\n</Note>\n\n1. Gather information about the vulnerability.\n2. On the package page, click **Report a vulnerability**.\n3. On the vulnerability report page, provide information about yourself and the vulnerability:\n   - **Name:** Your name.\n   - **Email address:** An email address the npm Security team can use to contact you.\n   - **Package name and version:** The name of the package that contains the vulnerability.\n   - **Package version:** The version of the package that contains the vulnerability. Include all affected versions.\n   - **Description of vulnerability:** A brief description of the vulnerability and its effects. Include references, commits, and/or code examples that would help our researchers reproduce and investigate the vulnerability.\n4. Click **Send Report**.\n"},{"id":"a3757046-836d-539b-8aff-c744bd263483","frontmatter":{"title":"Requiring 2FA for package publishing and settings modification"},"rawBody":"---\ntitle: Requiring 2FA for package publishing and settings modification\n---\nimport shared from '../../../src/shared.js'\n\nTo protect your packages, as a package publisher, you can require everyone who has write access to a package to have two-factor authentication (2FA) enabled.  This will require that users provide a one-time password in addition to their login token when they publish the package.  For more information, see \"[Configuring two-factor authentication][config-2fa]\".\n\nYou may also choose to allow publishing with either two-factor authentication _or_ with [automation tokens][creating-tokens].  This lets you configure automation tokens in a CI/CD workflow, but requires two-factor authentication from interactive publishes.\n\n## Configuring two-factor authentication\n\n1. <>{shared['user-login'].text}</>\n\n   <>{shared['user-login'].image}</>\n\n2. Navigate to the package on which you want to require a second factor to publish or modify settings.\n\n3. Click **Settings**.\n\n   <Screenshot src=\"/packages-and-modules/securing-your-code/2fa-package-admin.png\" alt=\"Screenshot showing the admin tab on a package page\" />\n\n4. Under \"Publishing access\", select the requirements to publish a package.\n   1. **Two-factor authentication is not required**  \n      With this option, a maintainer can publish a package or change the package settings whether they have two-factor authentication enabled or not.  This is the least secure setting.\n\n   2. **Require two-factor authentication or automation tokens**  \n      With this option, maintainers must have two-factor authentication enabled for their account.  If they publish a package interactively, using the `npm publish` command, they will be required to enter a one-time passcode when they perform the publish.  However, maintainers may also create an [automation token][creating-tokens] and use that to publish.  A one-time passcode is _not_ required when using an automation token, making it useful for continuous integration and continuous deployment workflows.\n\n   3. **Two-factor authentication only**  \n      With this option, a maintainer must have two-factor authentication enabled for their account, and they must publish interactively.  Maintainers will be required to enter a one-time passcode when they perform the publish.\n\n   <Screenshot src=\"/packages-and-modules/securing-your-code/2fa-package-require.png\" alt=\"Screenshot showing the require two-factor option for a package\" />\n\n5. Click **Update Package Settings**.\n\n   <Screenshot src=\"/packages-and-modules/securing-your-code/2fa-package-update.png\" alt=\"Screenshot showing the update package settings button\" />\n\n[config-2fa]: configuring-two-factor-authentication\n"},{"id":"b0617300-f370-5245-8e18-7b3f074ec5ad","frontmatter":{"title":"Verifying the PGP signature of a package from the npm public registry"},"rawBody":"---\ntitle: Verifying the PGP signature of a package from the npm public registry\n---\n\nTo ensure the integrity of a package version you download from the npm public registry, you can manually verify the [PGP signature][about-pgp-sig] of the package.\n\n<Note>\n\n**Note:** Since fully verifying signatures on Keybase requires rechecking proofs (which requires network activity) and is therefore expensive, we recommend only verifying signatures if it is absolutely necessary -- for example, when verifying a deploy artifact, or when initially storing a package in your cache.\n\n</Note>\n\n## Prerequisites\n\n1. Install Keybase from https://keybase.io/download\n2. Create a Keybase account on https://keybase.io\n3. Follow \"[npmregistry][npmregistry]\" on Keybase.\n4. Download a local copy of the npm public registry's [public PGP key][npm-key].\n\n## Verifying npm signatures for the public registry\n\n<Note>\n\n**Note:** The following steps use version 1.4.3 of the `light-cycle` package as an example.\n\n</Note>\n\n1. On the command line, fetch the signature for the package version you want and save it in a file:\n\n   ```\n   $ http GET https://registry.npmjs.org/light-cycle | json \"versions['1.4.3'].dist.npm-signature\" > sig-to-check\n   ```\n\n2. Get the integrity field for that version (example below includes response):\n\n   ```\n   $ http GET https://registry.npmjs.org/light-cycle | json \"versions['1.4.3'].dist.integrity\"\n   ```\n\n   Example response:\n\n   ```\n   sha512-sFcuivsDZ99fY0TbvuRC6CDXB8r/ylafjJAMnbSF0y4EMM1/1DtQo40G2WKz1rBbyiz4SLAc3Wa6yZyC4XSGOQ==\n   ```\n\n3. Construct the string that ties the unique package name and version to the integrity string (example below includes response):\n\n   ```\n   $ keybase pgp verify --signed-by npmregistry -d sig-to-check -m 'light-cycle@1.4.3:sha512-sFcuivsDZ99fY0TbvuRC6CDXB8r/ylafjJAMnbSF0y4EMM1/1DtQo40G2WKz1rBbyiz4SLAc3Wa6yZyC4XSGOQ=='\n   ```\n\n   Example response:\n\n   ```\n   ▶ INFO Identifying npmregistry\n   ✔ <tracked> public key fingerprint: 0963 1802 8A2B 58C8 4929 D8E1 3D4D 5B12 0276 566A\n   You last followed npmregistry on 2018-04-10 21:21:57 PDT\n   ✔ <tracked> admin of DNS zone npmjs.com: found TXT entry keybase-site-verification=iK3pjpRBkv-CIJ4PHtWL4TTcFXMpPiwPynatKl3oWO4\n   ✔ <tracked> \"npmjs\" on twitter: https://twitter.com/npmjs/status/981288548845240320 [cached 2018-04-12 13:18:31 PDT; but got a retryable error (API network error: Get https://twitter.com/npmjs/status/981288548845240320: net/http: request canceled (Client.Timeout exceeded while awaiting headers) (code=170)) this time around]\n   ✔ <tracked> admin of DNS zone npmjs.org: found TXT entry keybase-site-verification=Ls8jN55i6KesjiX91Ck79bUZ17eA-iohmw2jJFM16xc\n   Signature verified. Signed by npmregistry 7 minutes ago (2018-04-13 15:00:37 -0700 PDT).\n   PGP Fingerprint: 096318028a2b58c84929d8e13d4d5b120276566a.\n   ```\n\n[about-pgp-sig]: about-pgp-signatures-for-packages-in-the-public-registry\n[keybase]: https://keybase.io\n[npmregistry]: https://keybase.io/npmregistry\n[npm-key]: https://keybase.io/npmregistry/pgp_keys.asc\n"},{"id":"1265aeaa-28ed-5446-9fb3-e272db6bd62b","frontmatter":{"title":"Adding collaborators to private packages owned by a user account"},"rawBody":"---\ntitle: Adding collaborators to private packages owned by a user account\n---\n\nAs an npm user with a paid user account, you can another npm user with a paid account as a collaborator on a private package you own.\n\n<Note>\n\n**Note:** The user you want to add as a collaborator on your private package must have a paid user account. To sign up for a paid account, they can visit `https://https://www.npmjs.com/settings/username/billing`, replacing `username` with their npm username.\n\n</Note>\n\n## Granting access to a private user package on the web\n\n1. On the [npm website][npmjs-com], go to the package to which you want to add a collaborator: `https://www.npmjs.com/package/<your-package-name>`\n2. On the package page, under \"Collaborators\", click **+**.\n3. Enter the npm username of the collaborator.\n4. Click **Submit**.\n\n## Granting private package access from the command line interface\n\nTo add a collaborator to a package on the command line, run the following command, replacing `<user>` with the npm username of your collaborator, and `<your-package-name>` with the name of the private package:\n\n```\nnpm owner add <user> <your-package-name>\n```\n\n## Granting access to private organization packages\n\nTo grant an npm user access to private organization packages, you must have an organization owner add them to your organization, then add them to a team that has access to the private package. For more information, see \"[Adding members to your organization][add-org-members]\".\n\n[npmjs-com]: https://npmjs.com\n[add-org-members]: adding-members-to-your-organization\n"},{"id":"a6083216-2841-536c-aaa7-7148adf05d82","frontmatter":{"title":"Changing package visibility"},"rawBody":"---\ntitle: Changing package visibility\n---\n\nYou can change the visibility of a scoped package from the website or command line.\n\nYou must be the owner of the user account or organization that owns the package in order to change package visibility.\n\nFor more information about package visibility, see \"[Package scope, access level, and visibility][pkg-viz]\".\n\n<Note>\n\n**Note:** You cannot change the visibility of an unscoped package. Only scoped packages with a paid subscription may be private.\n\n</Note>\n\n## Making a public package private\n\n<Note>\n\n**Note:** Making a package private requires a paid user account or organization. To sign up for a paid user or organization, go to `https://www.npmjs.com/settings/account-name/billing`, replacing `account-name` with the name of your npm user account or organization.\n\n</Note>\n\nIf you want to restrict access and visibility for a public package you own, you can make the package private. When you make a package private, it will be removed from the website within a few minutes of the change.\n\n### Using the website\n\n1. On the [npm website][npmjs-com], go to the package page.\n2. On the package page, click **Admin**.\n3. Under \"Package Access\", select \"Is Package Private?\"\n4. Click **Update package settings**.\n\n### Using the command line\n\nTo make a public package private on the command line, run the following command, replacing `<package-name>` with the name of your package:\n\n```\nnpm access restricted <package-name>\n```\n\nFor more information, see the <a href=\"https://docs.npmjs.com/cli-documentation/access\">`npm access`</a> documentation.\n\n## Making a private package public\n\n<div class=\"note\">\n\n<span class=\"bold\">Note:</span> When you make a private package public, the package will be visible to and downloadable by all npm users.\n\n</div>\n\n### Using the website\n\n1. On the npm website, go to the package page.\n2. On the package page, click **Admin**.\n3. Under \"Package Access\", deselect \"Is Package Private?\"\n4. Click **Update package settings**.\n\n### Using the command line\n\nTo make a private package public on the command line, run the following command, replacing `<package-name>` with the name of your package:\n\n```\nnpm access public <package-name>\n```\n\nFor more information, see the [`npm access` CLI documentation][access-cli].\n\n\n[contact-support]: https://www.npmjs.com/support\n[pkg-viz]: package-scope-access-level-and-visibility\n[npmjs-com]: https://npmjs.com\n[access-cli]: /cli/access\n"},{"id":"ee828cfa-7b56-5963-8ded-42c3abc81e10","frontmatter":{"title":"Deprecating and undeprecating packages or package versions"},"rawBody":"---\ntitle: Deprecating and undeprecating packages or package versions\n---\n\nIf you no longer wish to maintain a package, or if you would like to encourage users to update to a new or different version, you can [deprecate][deprecate-cli] it. Deprecating a package or version will print a message to the terminal when a user installs it.\n\nA deprecation warning or message can say anything. You may wish to include a message encouraging users to update to a specific version, or an alternate, supported package.\n\n<Note>\n\n**Note:** We strongly recommend deprecating packages or package versions instead of <a href=\"/unpublishing-packages-from-the-registry\">unpublishing</a> them, because unpublishing removes a package from the registry entirely, meaning anyone who relied on it will no longer be able to use it, with no warning.\n\n</Note>\n\n## Deprecating an entire package or a single version of a package\n\n### Deprecating an entire package\n\nDeprecating an entire package will remove it from search results on the npm website, and a deprecation message will also be displayed on the package page.\n\n<Screenshot src=\"/packages-and-modules/updating-and-managing-your-published-packages/deprecate-package.png\" alt=\"Screenshot of package deprecation\" />\n\nTo deprecate an entire package, run the following command, replacing `<package-name>` with the name of your package, and `\"<message>\"` with your deprecation message:\n\n```\nnpm deprecate <package-name> \"<message>\"\n```\n\nIf you have enabled [two-factor authentication][two-factor-auth], add a one-time password to the command, `--otp=123456` (where *123456* is the code from your authenticator app).\n\n### Deprecating a single version of a package\n\nWhen you deprecate a version fo a package, a red message will be displayed on that version's package page, similar to deprecating an entire package.\n\n<Screenshot src=\"/packages-and-modules/updating-and-managing-your-published-packages/deprecate-version.png\" alt=\"Screenshot of package deprecation for a particular version\" />\n\nTo deprecate a package version, run the following command, replacing `<package-name>` with the name of your package, `<version>` with your version number, and `\"<message>\"` with your deprecation message:\n\n```\nnpm deprecate <package-name>@<version> \"<message>\"\n```\n\nThe CLI will also accept version ranges for `<version>`.\n\nIf you have two-factor auth, add a one-time password to the command, `--otp=123456` (where *123456* is the code from your authenticator).\n\n## Undeprecating a package or version\n\nTo undeprecate a package, replace `\"<message>\"` with `\"\"` (an empty string) in one of the above commands.\n\nFor example, to undeprecate a package version, run the following command, replacing `<package-name>` with the name of your package, and `<version>` with your version number:\n\n```\nnpm deprecate <package-name>@<version> \"\"\n```\n\nIf you have two-factor auth, add a one-time password to the command, `--otp=123456` (where *123456* is the code from your authenticator).\n\n## Transferring a deprecated package to npm\n\nIf you are no longer maintaining a package, but other users depend on it, and you'd like to remove it from your user profile, you can transfer it to the [`@npm`][npm-account] user account, which is owned by the npm registry.\n\n<Note>\n\n**Note:** Once you transfer a package to the npm account, you will no longer be able to update it.\n\n</Note>\n\nTo transfer a package to the npm user account, run the following two commands in order, replacing `<user>` with your npm user name, and `<package-name>` with the package you want to transfer:\n\n```\nnpm owner add npm <package-name>\nnpm owner rm <user> <package-name>\n```\n\nIf you have two-factor auth, add a one-time password to the command, `--otp=123456` (where *123456* is the code from your authenticator).\n\n[deprecate-cli]: /cli/deprecate\n[two-factor-auth]: about-two-factor-authentication\n[npm-account]: https://www.npmjs.com/~npm\n"},{"id":"bae3e6a3-91bf-5d92-b195-f8158b88b73e","frontmatter":{"title":"Updating and managing your published packages"},"rawBody":"---\ntitle: Updating and managing your published packages\n---\n\n<Index />\n"},{"id":"f436305c-225a-5ed4-b464-fdb7f7d9b8c5","frontmatter":{"title":"Transferring a package from a user account to another user account"},"rawBody":"---\ntitle: Transferring a package from a user account to another user account\n---\n\nAs a package owner or maintainer, you can transfer ownership of a package you no longer wish to maintain to another trusted npm user on either the npm website or the command line.\n\nFor more information on how npm support handles package name disputes between users, you can refer to npm's [package name dispute policy][dispute-policy].\n\n<Note>\n\n**Note:** If your package is scoped and private, the new package owner must also have a [paid user account](https://www.npmjs.com/pricing). It is possible to transfer ownership of user-scoped packages, however we don't recommend it because it can create some ownership confusion.\n\n</Note>\n\n## Transferring a package from a user account to another user account on the website\n\nTo transfer a package you own or maintain to another user, follow these steps:  \n\n1. Navigate to the package page for the package you want to transfer, replacing `<your-package-name>` with the name of your package:\n`https://www.npmjs.com/package/<your-package-name>`.\n\n2. On the package Admin tab, under \"Maintainers\", enter the npm username of the new maintainer.\n\n   <Screenshot src=\"/packages-and-modules/updating-and-managing-your-published-packages/package-maintainer-invite.png\" alt=\"Screenshot showing text field to invite maintainers\" />\n\n3. Click \"Invite.\"\n\n4. To remove yourself as a maintainer, under the maintainers list, click the \"x\" next to your username.\n\n   <Screenshot src=\"/packages-and-modules/updating-and-managing-your-published-packages/package-maintainer-list.png\" alt=\"Screenshot showing maintainer list\" />\n\n## Transferring a package from a user account to another user account on the command line\n\nTo transfer a package to another npm user using the CLI, run the [`npm owner add`][npm-owner] and `rm` commands in order, replacing `<their-username>` with the other user's npm username, `<your-username>` with your npm username, and `<package-name>` with the package you want to transfer:\n\n```\nnpm owner add <their-username> <package-name>\nnpm owner rm <your-username> <package-name>\n```\n\nIf you have two-factor authentication enabled for writes, add a one-time password to the command, `--otp=123456` (where *123456* is the code from your authenticator application).\n\n```\nnpm owner add <their-username> <package-name> --otp=123456\nnpm owner rm <your-username> <package-name> --otp=123456\n```\n\n[dispute-policy]: https://www.npmjs.com/policies/disputes\n[npm-owner]: cli/owner\n"},{"id":"8d1238b7-7bde-59b2-b084-f731213b0bad","frontmatter":{"title":"Unpublishing packages from the registry"},"rawBody":"---\ntitle: Unpublishing packages from the registry\n---\nimport shared from '../../../src/shared.js'\n\n## How to unpublish\n\nAs a package owner or collaborator, if your package has no dependents, you can permanently remove it from the npm registry by using the CLI. You can [unpublish][unpublish-cli] within 72 hours of the initial publish. Beyond 72 hours,so you can still unpublish your package if [it meets certain criteria](https://www.npmjs.com/policies/unpublish).\n\n<Note>\n\n**Note:** Removing all the collaborators or teams from the package will not unpublish it.\n\n</Note>\n\n### Unpublishing a single version of a package\n\nTo unpublish a single version of a package, run the following command, replacing `<package-name>` with the name of your package, and `<version>` with your version number:\n\n```\nnpm unpublish <package-name>@<version>\n```\n\n### Unpublishing an entire package\n\nTo unpublish an entire package, run the following command, replacing `<package-name>` with the name of your package:\n\n```\nnpm unpublish <package-name> -f\n```\n\nIf you have [two-factor authentication][two-factor-auth] enabled for writes, you will need to add a one-time password to the `unpublish` command, `--otp=123456` (where *123456* is the code from your authenticator app).\n\n<>If you need help unpublishing your package, please {shared['contact-support'].text}. If you are an Enterprise customer, please {shared['contact-enterprise-support'].text}</>.\n\n## When to unpublish\n\nUnpublishing a package permanently removes the package from the registry so it is no longer available for other users to install. Once a package is unpublished, it cannot be republished. If you've unpublished a package by mistake, we'd recommend publishing again under a different name, or for unpublished versions, bumping the version number and publishing again.\n\nYou might want to unpublish a package because you:\n\n* Published something accidentally.\n* Wanted to test npm.\n* Published content you [didn't intend to be public][oh-no].\n* Want to rename a package. (The only way to rename a package is to re-publish it under a new name)\n\n<Note>\n\n**Note:** `package-name@version` is unique, and cannot be reused by unpublishing and re-publishing it. We recommend publishing a minor version update instead.\n\n</Note>\n\n## When to deprecate\n\nIf you are no longer interested in maintaining a package, but want it to remain available for users to install, or if your package has dependents, we'd recommend [deprecating][deprecate-cli] it. To learn about how to deprecate a package, see \"[Deprecating and undeprecating packages or package versions][deprecate-package]\".\n\n\n[unpublish-cli]: cli/unpublish\n[oh-no]: https://blog.npmjs.org/post/101934969510/oh-no-i-accidentally-published-private-data-to\n[deprecate-cli]: cli/deprecate\n[deprecate-package]: deprecating-and-undeprecating-packages-or-package-versions\n[unpublish-policy]: https://www.npmjs.com/policies/unpublish\n[two-factor-auth]: about-two-factor-authentication\n"},{"id":"9b5f2016-386b-5b39-9579-da42ffe62e33","frontmatter":{"title":"Updating your published package version number"},"rawBody":"---\ntitle: Updating your published package version number\n---\n\nWhen you make significant changes to a published package, we recommend updating the version number to communicate the extent of the changes to others who rely on your code.\n\n<Note>\n\n**Note:** If you have linked a git repository to a package, updating the package version number will also add a tag with the updated release number to the linked git repository.\n\n</Note>\n\n1. To change the version number in `package.json`, on the command line, in the package root directory, run the following command, replacing `<update_type>` with one of the [semantic versioning][semver] release types (patch, major, or minor):\n\n   ```\n   npm version <update_type>\n   ```\n\n2. Run `npm publish`.\n\n3. Go to your package page (`https://npmjs.com/package/<package>`) to check that the package version has been updated.\n\nFor more information on `npm version`, see the [CLI documentation][cli-version].\n\n\n[semver]: about-semantic-versioning\n[cli-version]: /cli/version\n"},{"id":"87031dd6-68de-5593-aa55-54ed06e097c4","frontmatter":{"title":"CLI Commands"},"rawBody":"---\ntitle: CLI Commands\nredirect_from:\n  - commands\n  - /cli/commands\n  - /cli-documentation/cli\n  - /cli-documentation/cli-commands\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/index.mdx\n---\n\n<Index depth=\"1\" />\n"},{"id":"d624a318-4150-5c8a-aaa2-69946b51e041","frontmatter":{"title":"npm-access"},"rawBody":"---\ntitle: npm-access\nsection: 1\ndescription: Set access level on published packages\nredirect_from:\n  - /cli/access\n  - /cli/access.html\n  - /cli/commands/access\n  - /cli-commands/access\n  - /cli-commands/access.html\n  - /cli-commands/npm-access\n  - /cli-documentation/access\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-access.md\n---\n\n### Synopsis\n\n```bash\nnpm access public [<package>]\nnpm access restricted [<package>]\n\nnpm access grant <read-only|read-write> <scope:team> [<package>]\nnpm access revoke <scope:team> [<package>]\n\nnpm access 2fa-required [<package>]\nnpm access 2fa-not-required [<package>]\n\nnpm access ls-packages [<user>|<scope>|<scope:team>]\nnpm access ls-collaborators [<package> [<user>]]\nnpm access edit [<package>]\n```\n\n### Description\n\nUsed to set access controls on private packages.\n\nFor all of the subcommands, `npm access` will perform actions on the packages\nin the current working directory if no package name is passed to the\nsubcommand.\n\n* public / restricted:\n  Set a package to be either publicly accessible or restricted.\n\n* grant / revoke:\n  Add or remove the ability of users and teams to have read-only or read-write\n  access to a package.\n\n* 2fa-required / 2fa-not-required:\n  Configure whether a package requires that anyone publishing it have two-factor\n  authentication enabled on their account.\n\n* ls-packages:\n  Show all of the packages a user or a team is able to access, along with the\n  access level, except for read-only public packages (it won't print the whole\n  registry listing)\n\n* ls-collaborators:\n  Show all of the access privileges for a package. Will only show permissions\n  for packages to which you have at least read access. If `<user>` is passed in,\n  the list is filtered only to teams _that_ user happens to belong to.\n\n* edit:\n  Set the access privileges for a package at once using `$EDITOR`.\n\n### Details\n\n`npm access` always operates directly on the current registry, configurable\nfrom the command line using `--registry=<registry url>`.\n\nUnscoped packages are *always public*.\n\nScoped packages *default to restricted*, but you can either publish them as\npublic using `npm publish --access=public`, or set their access as public using\n`npm access public` after the initial publish.\n\nYou must have privileges to set the access of a package:\n\n* You are an owner of an unscoped or scoped package.\n* You are a member of the team that owns a scope.\n* You have been given read-write privileges for a package, either as a member\n  of a team or directly as an owner.\n\nIf you have two-factor authentication enabled then you'll have to pass in an\notp with `--otp` when making access changes.\n\nIf your account is not paid, then attempts to publish scoped packages will fail\nwith an HTTP 402 status code (logically enough), unless you use\n`--access=public`.\n\nManagement of teams and team memberships is done with the `npm team` command.\n\n### See Also\n\n* [`libnpmaccess`](https://npm.im/libnpmaccess)\n* [npm team](/cli/v6/commands/npm-team)\n* [npm publish](/cli/v6/commands/npm-publish)\n* [npm config](/cli/v6/commands/npm-config)\n* [npm registry](/cli/v6/using-npm/registry)\n"},{"id":"56282ba5-718f-58fe-8c4e-7c079f7ddff2","frontmatter":{"title":"npm-adduser"},"rawBody":"---\ntitle: npm-adduser\nsection: 1\ndescription: Add a registry user account\nredirect_from:\n  - /cli/adduser\n  - /cli/adduser.html\n  - /cli/commands/adduser\n  - /cli-commands/adduser\n  - /cli-commands/adduser.html\n  - /cli-commands/npm-adduser\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-adduser.md\n---\n\n### Synopsis\n\n```bash\nnpm adduser [--registry=url] [--scope=@orgname] [--always-auth] [--auth-type=legacy]\n\naliases: login, add-user\n```\n\n### Description\n\nCreate or verify a user named `<username>` in the specified registry, and\nsave the credentials to the `.npmrc` file. If no registry is specified,\nthe default registry will be used (see [`config`](/cli/v6/using-npm/config)).\n\nThe username, password, and email are read in from prompts.\n\nTo reset your password, go to <https://www.npmjs.com/forgot>\n\nTo change your email address, go to <https://www.npmjs.com/email-edit>\n\nYou may use this command multiple times with the same user account to\nauthorize on a new machine.  When authenticating on a new machine,\nthe username, password and email address must all match with\nyour existing record.\n\n`npm login` is an alias to `adduser` and behaves exactly the same way.\n\n### Configuration\n\n#### registry\n\nDefault: https://registry.npmjs.org/\n\nThe base URL of the npm package registry. If `scope` is also specified,\nthis registry will only be used for packages with that scope. `scope` defaults\nto the scope of the project directory you're currently in, if any. See [`scope`](/cli/v6/using-npm/scope).\n\n#### scope\n\nDefault: none\n\nIf specified, the user and login credentials given will be associated\nwith the specified scope. See [`scope`](/cli/v6/using-npm/scope). You can use both at the same time,\ne.g.\n\n```bash\n    npm adduser --registry=http://myregistry.example.com --scope=@myco\n```    \n\nThis will set a registry for the given scope and login or create a user for\nthat registry at the same time.\n\n#### always-auth\n\nDefault: false\n\nIf specified, save configuration indicating that all requests to the given\nregistry should include authorization information. Useful for private\nregistries. Can be used with `--registry` and / or `--scope`, e.g.\n\n```bash\n    npm adduser --registry=http://private-registry.example.com --always-auth\n```\n\nThis will ensure that all requests to that registry (including for tarballs)\ninclude an authorization header. This setting may be necessary for use with\nprivate registries where metadata and package tarballs are stored on hosts with\ndifferent hostnames. See `always-auth` in [`config`](/cli/v6/using-npm/config) for more details on always-auth. Registry-specific configuration of `always-auth` takes precedence over any global configuration.\n\n#### auth-type\n\n* Default: `'legacy'`\n* Type: `'legacy'`, `'sso'`, `'saml'`, `'oauth'`\n\nWhat authentication strategy to use with `adduser`/`login`. Some npm registries\n(for example, npmE) might support alternative auth strategies besides classic\nusername/password entry in legacy npm.\n\n### See Also\n\n* [npm registry](/cli/v6/using-npm/registry)\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n* [npm owner](/cli/v6/commands/npm-owner)\n* [npm whoami](/cli/v6/commands/npm-whoami)\n"},{"id":"ce51fb4a-50b8-5d03-8a87-920dbd121e84","frontmatter":{"title":"npm-audit"},"rawBody":"---\ntitle: npm-audit\nsection: 1\ndescription: Run a security audit\nredirect_from:\n  - /cli/audit\n  - /cli/audit.html\n  - /cli/commands/audit\n  - /cli-commands/audit\n  - /cli-commands/audit.html\n  - /cli-commands/npm-audit\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-audit.md\n---\n\n### Synopsis\n\n```bash\nnpm audit [--json|--parseable|--audit-level=(low|moderate|high|critical)]\nnpm audit fix [--force|--package-lock-only|--dry-run]\n\ncommon options: [--production] [--only=(dev|prod)]\n```\n\n### Examples\n\nScan your project for vulnerabilities and automatically install any compatible\nupdates to vulnerable dependencies:\n```bash\n$ npm audit fix\n```\n\nRun `audit fix` without modifying `node_modules`, but still updating the\npkglock:\n```bash\n$ npm audit fix --package-lock-only\n```\n\nSkip updating `devDependencies`:\n```bash\n$ npm audit fix --only=prod\n```\n\nHave `audit fix` install semver-major updates to toplevel dependencies, not just\nsemver-compatible ones:\n```bash\n$ npm audit fix --force\n```\n\nDo a dry run to get an idea of what `audit fix` will do, and _also_ output\ninstall information in JSON format:\n```bash\n$ npm audit fix --dry-run --json\n```\n\nScan your project for vulnerabilities and just show the details, without fixing\nanything:\n```bash\n$ npm audit\n```\n\nGet the detailed audit report in JSON format:\n```bash\n$ npm audit --json\n```\n\nGet the detailed audit report in plain text result, separated by tab characters, allowing for\nfuture reuse in scripting or command line post processing, like for example, selecting\nsome of the columns printed:\n```bash\n$ npm audit --parseable\n```\n\nTo parse columns, you can use for example `awk`, and just print some of them:\n```bash\n$ npm audit --parseable | awk -F $'\\t' '{print $1,$4}'\n```\n\nFail an audit only if the results include a vulnerability with a level of moderate or higher:\n```bash\n$ npm audit --audit-level=moderate\n```\n\n### Description\n\nThe audit command submits a description of the dependencies configured in\nyour project to your default registry and asks for a report of known\nvulnerabilities. The report returned includes instructions on how to act on\nthis information. The command will exit with a 0 exit code if no\nvulnerabilities were found.\n\nYou can also have npm automatically fix the vulnerabilities by running `npm\naudit fix`. Note that some vulnerabilities cannot be fixed automatically and\nwill require manual intervention or review. Also note that since `npm audit fix`\nruns a full-fledged `npm install` under the hood, all configs that apply to the\ninstaller will also apply to `npm install` -- so things like `npm audit fix\n--package-lock-only` will work as expected.\n\nBy default, the audit command will exit with a non-zero code if any vulnerability\nis found. It may be useful in CI environments to include the `--audit-level` parameter\nto specify the minimum vulnerability level that will cause the command to fail. This\noption does not filter the report output, it simply changes the command's failure\nthreshold.\n\n### Content Submitted\n\n* npm_version\n* node_version\n* platform\n* node_env\n* A scrubbed version of your package-lock.json or npm-shrinkwrap.json\n\n#### Scrubbing\n\nIn order to ensure that potentially sensitive information is not included in\nthe audit data bundle, some dependencies may have their names (and sometimes\nversions) replaced with opaque non-reversible identifiers.  It is done for\nthe following dependency types:\n\n* Any module referencing a scope that is configured for a non-default\n  registry has its name scrubbed.  (That is, a scope you did a `npm login --scope=@ourscope` for.)\n* All git dependencies have their names and specifiers scrubbed.\n* All remote tarball dependencies have their names and specifiers scrubbed.\n* All local directory and tarball dependencies have their names and specifiers scrubbed.\n\nThe non-reversible identifiers are a sha256 of a session-specific UUID and the\nvalue being replaced, ensuring a consistent value within the payload that is\ndifferent between runs.\n\n### Exit Code\n\nThe `npm audit` command will exit with a 0 exit code if no vulnerabilities were found.\n\nIf vulnerabilities were found the exit code will depend on the `audit-level`\nconfiguration setting.\n\n### See Also\n\n* [npm install](/cli/v6/commands/npm-install)\n* [package-locks](/cli/v6/configuring-npm/package-locks)\n* [config](/cli/v6/using-npm/config)\n"},{"id":"35860864-7510-556a-a070-acf9316b0cb9","frontmatter":{"title":"npm-bin"},"rawBody":"---\ntitle: npm-bin\nsection: 1\ndescription: Display npm bin folder\nredirect_from:\n  - /cli/bin\n  - /cli/bin.html\n  - /cli/commands/bin\n  - /cli-commands/bin\n  - /cli-commands/bin.html\n  - /cli-commands/npm-bin\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-bin.md\n---\n\n### Synopsis\n```bash\nnpm bin [-g|--global]\n```\n\n### Description\n\nPrint the folder where npm will install executables.\n\n### See Also\n\n* [npm prefix](/cli/v6/commands/npm-prefix)\n* [npm root](/cli/v6/commands/npm-root)\n* [npm folders](/cli/v6/configuring-npm/folders)\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n"},{"id":"86ad796b-f3f9-55ab-a183-fecd20583d05","frontmatter":{"title":"npm-bugs"},"rawBody":"---\ntitle: npm-bugs\nsection: 1\ndescription: Bugs for a package in a web browser maybe\nredirect_from:\n  - /cli/bugs\n  - /cli/bugs.html\n  - /cli/commands/bugs\n  - /cli-commands/bugs\n  - /cli-commands/bugs.html\n  - /cli-commands/npm-bugs\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-bugs.md\n---\n\n### Synopsis\n```bash\nnpm bugs [<pkgname>]\n\naliases: issues\n```\n\n### Description\n\nThis command tries to guess at the likely location of a package's\nbug tracker URL, and then tries to open it using the `--browser`\nconfig param. If no package name is provided, it will search for\na `package.json` in the current folder and use the `name` property.\n\n### Configuration\n\n#### browser\n\n* Default: OS X: `\"open\"`, Windows: `\"start\"`, Others: `\"xdg-open\"`\n* Type: String\n\nThe browser that is called by the `npm bugs` command to open websites.\n\n#### registry\n\n* Default: https://registry.npmjs.org/\n* Type: url\n\nThe base URL of the npm package registry.\n\n\n### See Also\n\n* [npm docs](/cli/v6/commands/npm-docs)\n* [npm view](/cli/v6/commands/npm-view)\n* [npm publish](/cli/v6/commands/npm-publish)\n* [npm registry](/cli/v6/using-npm/registry)\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n* [package.json](/cli/v6/configuring-npm/package-json)\n"},{"id":"1b580263-503b-5bc5-bf2b-76aef1a83d85","frontmatter":{"title":"npm-build"},"rawBody":"---\ntitle: npm-build\nsection: 1\ndescription: Build a package\nredirect_from:\n  - /cli/build\n  - /cli/build.html\n  - /cli/commands/build\n  - /cli-commands/build\n  - /cli-commands/build.html\n  - /cli-commands/npm-build\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-build.md\n---\n\n### Synopsis\n```shell\nnpm build [<package-folder>]\n```\n\n* `<package-folder>`:\n  A folder containing a `package.json` file in its root.\n\n### Description\n\nThis is the plumbing command called by `npm link` and `npm install`.\n\nIt should generally be called during installation, but if you need to run it\ndirectly, run:\n```bash\n    npm run-script build\n```\n\n### See Also\n\n* [npm install](/cli/v6/commands/npm-install)\n* [npm link](/cli/v6/commands/npm-link)\n* [npm scripts](/cli/v6/using-npm/scripts)\n* [package.json](/cli/v6/configuring-npm/package-json)\n"},{"id":"3f229705-f996-5169-8477-94818e3c2515","frontmatter":{"title":"npm-bundle"},"rawBody":"---\ntitle: npm-bundle\nsection: 1\ndescription: REMOVED\nredirect_from:\n  - /cli/bundle\n  - /cli/bundle.html\n  - /cli/commands/bundle\n  - /cli-commands/bundle\n  - /cli-commands/bundle.html\n  - /cli-commands/npm-bundle\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-bundle.md\n---\n\n### Description\n\nThe `npm bundle` command has been removed in 1.0, for the simple reason\nthat it is no longer necessary, as the default behavior is now to\ninstall packages into the local space.\n\nJust use `npm install` now to do what `npm bundle` used to do.\n\n### See Also\n\n* [npm install](/cli/v6/commands/npm-install)\n"},{"id":"679734a4-84cd-5487-9280-1e027d8d83e0","frontmatter":{"title":"npm-cache"},"rawBody":"---\ntitle: npm-cache\nsection: 1\ndescription: Manipulates packages cache\nredirect_from:\n  - /cli/cache\n  - /cli/cache.html\n  - /cli/commands/cache\n  - /cli-commands/cache\n  - /cli-commands/cache.html\n  - /cli-commands/npm-cache\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-cache.md\n---\n\n### Synopsis\n\n```bash\nnpm cache add <tarball file>\nnpm cache add <folder>\nnpm cache add <tarball url>\nnpm cache add <name>@<version>\n\nnpm cache clean [<path>]\naliases: npm cache clear, npm cache rm\n\nnpm cache verify\n```\n\n### Description\n\nUsed to add, list, or clean the npm cache folder.\n\n* add:\n  Add the specified package to the local cache.  This command is primarily\n  intended to be used internally by npm, but it can provide a way to\n  add data to the local installation cache explicitly.\n\n* clean:\n  Delete all data out of the cache folder.\n\n* verify:\n  Verify the contents of the cache folder, garbage collecting any unneeded data,\n  and verifying the integrity of the cache index and all cached data.\n\n### Details\n\nnpm stores cache data in an opaque directory within the configured `cache`,\nnamed `_cacache`. This directory is a `cacache`-based content-addressable cache\nthat stores all http request data as well as other package-related data. This\ndirectory is primarily accessed through `pacote`, the library responsible for\nall package fetching as of npm@5.\n\nAll data that passes through the cache is fully verified for integrity on both\ninsertion and extraction. Cache corruption will either trigger an error, or\nsignal to `pacote` that the data must be refetched, which it will do\nautomatically. For this reason, it should never be necessary to clear the cache\nfor any reason other than reclaiming disk space, thus why `clean` now requires\n`--force` to run.\n\nThere is currently no method exposed through npm to inspect or directly manage\nthe contents of this cache. In order to access it, `cacache` must be used\ndirectly.\n\nnpm will not remove data by itself: the cache will grow as new packages are\ninstalled.\n\n### A note about the cache's design\n\nThe npm cache is strictly a cache: it should not be relied upon as a persistent\nand reliable data store for package data. npm makes no guarantee that a\npreviously-cached piece of data will be available later, and will automatically\ndelete corrupted contents. The primary guarantee that the cache makes is that,\nif it does return data, that data will be exactly the data that was inserted.\n\nTo run an offline verification of existing cache contents, use `npm cache\nverify`.\n\n### Configuration\n\n#### cache\n\nDefault: `~/.npm` on Posix, or `%AppData%/npm-cache` on Windows.\n\nThe root cache folder.\n\n### See Also\n\n* [npm folders](/cli/v6/configuring-npm/folders)\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n* [npm install](/cli/v6/commands/npm-install)\n* [npm publish](/cli/v6/commands/npm-publish)\n* [npm pack](/cli/v6/commands/npm-pack)\n* https://npm.im/cacache\n* https://npm.im/pacote\n"},{"id":"ca93a0a3-f79b-5d9a-a468-01605ba7ea46","frontmatter":{"title":"npm-ci"},"rawBody":"---\ntitle: npm-ci\nsection: 1\ndescription: Install a project with a clean slate\nredirect_from:\n  - /cli/ci\n  - /cli/ci.html\n  - /cli/commands/ci\n  - /cli-commands/ci\n  - /cli-commands/ci.html\n  - /cli-commands/npm-ci\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-ci.md\n---\n\n### Synopsis\n```bash\nnpm ci\n```\n\n### Example\n\nMake sure you have a package-lock and an up-to-date install:\n\n```bash\n$ cd ./my/npm/project\n$ npm install\nadded 154 packages in 10s\n$ ls | grep package-lock\n```\n\nRun `npm ci` in that project\n\n```bash\n$ npm ci\nadded 154 packages in 5s\n```\n\nConfigure Travis to build using `npm ci` instead of `npm install`:\n\n```bash\n# .travis.yml\ninstall:\n- npm ci\n# keep the npm cache around to speed up installs\ncache:\n  directories:\n  - \"$HOME/.npm\"\n```\n\n### Description\n\nThis command is similar to [`npm install`](/cli/v6/commands/npm-install), except it's meant to be used in\nautomated environments such as test platforms, continuous integration, and\ndeployment -- or any situation where you want to make sure you're doing a clean\ninstall of your dependencies. It can be significantly faster than a regular npm\ninstall by skipping certain user-oriented features. It is also more strict than\na regular install, which can help catch errors or inconsistencies caused by the\nincrementally-installed local environments of most npm users.\n\nIn short, the main differences between using `npm install` and `npm ci` are:\n\n* The project **must** have an existing `package-lock.json` or `npm-shrinkwrap.json`.\n* If dependencies in the package lock do not match those in `package.json`, `npm ci` will exit with an error, instead of updating the package lock.\n* `npm ci` can only install entire projects at a time: individual dependencies cannot be added with this command.\n* If a `node_modules` is already present, it will be automatically removed before `npm ci` begins its install.\n* It will never write to `package.json` or any of the package-locks: installs are essentially frozen.\n\n### See Also\n\n* [npm install](/cli/v6/commands/npm-install)\n* [package-locks](/cli/v6/configuring-npm/package-locks)\n"},{"id":"84cd9146-af0d-58f8-a84a-5680ca3b515d","frontmatter":{"title":"npm-completion"},"rawBody":"---\ntitle: npm-completion\nsection: 1\ndescription: Tab Completion for npm\nredirect_from:\n  - /cli/completion\n  - /cli/completion.html\n  - /cli/commands/completion\n  - /cli-commands/completion\n  - /cli-commands/completion.html\n  - /cli-commands/npm-completion\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-completion.md\n---\n\n### Synopsis\n```bash\nsource <(npm completion)\n```\n\n### Description\n\nEnables tab-completion in all npm commands.\n\nThe synopsis above\nloads the completions into your current shell.  Adding it to\nyour ~/.bashrc or ~/.zshrc will make the completions available\neverywhere:\n\n```bash\nnpm completion >> ~/.bashrc\nnpm completion >> ~/.zshrc\n```\n\nYou may of course also pipe the output of `npm completion` to a file\nsuch as `/usr/local/etc/bash_completion.d/npm` or \n`/etc/bash_completion.d/npm` if you have a system that will read \nthat file for you.\n\nWhen `COMP_CWORD`, `COMP_LINE`, and `COMP_POINT` are defined in the\nenvironment, `npm completion` acts in \"plumbing mode\", and outputs\ncompletions based on the arguments.\n\n### See Also\n\n* [npm developers](/cli/v6/using-npm/developers)\n* [npm](/cli/v6/commands/npm)\n"},{"id":"70ca1a7f-b780-512e-a4b1-8040b72d3f81","frontmatter":{"title":"npm-config"},"rawBody":"---\ntitle: npm-config\nsection: 1\ndescription: Manage the npm configuration files\nredirect_from:\n  - /cli/config\n  - /cli/config.html\n  - /cli/commands/config\n  - /cli-commands/config\n  - /cli-commands/config.html\n  - /cli-commands/npm-config\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-config.md\n---\n\n### Synopsis\n```bash\nnpm config set <key> <value> [-g|--global]\nnpm config get <key>\nnpm config delete <key>\nnpm config list [-l] [--json]\nnpm config edit\nnpm get <key>\nnpm set <key> <value> [-g|--global]\n\naliases: c\n```\n\n### Description\n\nnpm gets its config settings from the command line, environment\nvariables, `npmrc` files, and in some cases, the `package.json` file.\n\nSee [npmrc](/cli/v6/configuring-npm/npmrc) for more information about the npmrc files.\n\nSee [config](/cli/v6/using-npm/config) for a more thorough discussion of the mechanisms\ninvolved.\n\nThe `npm config` command can be used to update and edit the contents\nof the user and global npmrc files.\n\n### Sub-commands\n\nConfig supports the following sub-commands:\n\n#### set\n```bash\nnpm config set key value\n```\nSets the config key to the value.\n\nIf value is omitted, then it sets it to \"true\".\n\n#### get\n```bash\nnpm config get key\n```\n\nEcho the config value to stdout.\n\n#### list\n```bash\nnpm config list\n```\n\nShow all the config settings. Use `-l` to also show defaults. Use `--json`\nto show the settings in json format.\n\n#### delete\n```bash\nnpm config delete key\n```\n\nDeletes the key from all configuration files.\n\n#### edit\n```bash\nnpm config edit\n```\n\nOpens the config file in an editor.  Use the `--global` flag to edit the\nglobal config.\n\n### See Also\n\n* [npm folders](/cli/v6/configuring-npm/folders)\n* [npm config](/cli/v6/commands/npm-config)\n* [package.json](/cli/v6/configuring-npm/package-json)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n* [npm](/cli/v6/commands/npm)\n"},{"id":"bfda055d-b160-52c2-9b5d-675ce3cdd0db","frontmatter":{"title":"npm-dedupe"},"rawBody":"---\ntitle: npm-dedupe\nsection: 1\ndescription: Reduce duplication\nredirect_from:\n  - /cli/dedupe\n  - /cli/dedupe.html\n  - /cli/commands/dedupe\n  - /cli-commands/dedupe\n  - /cli-commands/dedupe.html\n  - /cli-commands/npm-dedupe\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-dedupe.md\n---\n\n### Synopsis\n```bash\nnpm dedupe\nnpm ddp\n\naliases: find-dupes, ddp\n```\n\n### Description\n\nSearches the local package tree and attempts to simplify the overall\nstructure by moving dependencies further up the tree, where they can\nbe more effectively shared by multiple dependent packages.\n\nFor example, consider this dependency graph:\n\n```bash\na\n+-- b <-- depends on c@1.0.x\n|   `-- c@1.0.3\n`-- d <-- depends on c@~1.0.9\n    `-- c@1.0.10\n```\n\nIn this case, `npm dedupe` will transform the tree to:\n\n```bash\na\n+-- b\n+-- d\n`-- c@1.0.10\n```\n\nBecause of the hierarchical nature of node's module lookup, b and d\nwill both get their dependency met by the single c package at the root\nlevel of the tree.\n\nThe deduplication algorithm walks the tree, moving each dependency as far\nup in the tree as possible, even if duplicates are not found. This will\nresult in both a flat and deduplicated tree.\n\nIf a suitable version exists at the target location in the tree\nalready, then it will be left untouched, but the other duplicates will\nbe deleted.\n\nArguments are ignored. Dedupe always acts on the entire tree.\n\nModules\n\nNote that this operation transforms the dependency tree, but will never\nresult in new modules being installed.\n\n### See Also\n\n* [npm ls](/cli/v6/commands/npm-ls)\n* [npm update](/cli/v6/commands/npm-update)\n* [npm install](/cli/v6/commands/npm-install)\n"},{"id":"9ea5feb3-b5a3-538e-9b9b-60d12f632e4b","frontmatter":{"title":"npm-deprecate"},"rawBody":"---\ntitle: npm-deprecate\nsection: 1\ndescription: Deprecate a version of a package\nredirect_from:\n  - /cli/deprecate\n  - /cli/deprecate.html\n  - /cli/commands/deprecate\n  - /cli-commands/deprecate\n  - /cli-commands/deprecate.html\n  - /cli-commands/npm-deprecate\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-deprecate.md\n---\n\n### Synopsis\n```bash\nnpm deprecate <pkg>[@<version>] <message>\n```\n\n### Description\n\nThis command will update the npm registry entry for a package, providing\na deprecation warning to all who attempt to install it.\n\nIt works on [version ranges](https://semver.npmjs.com/) as well as specific \nversions, so you can do something like this:\n```bash\nnpm deprecate my-thing@\"< 0.2.3\" \"critical bug fixed in v0.2.3\"\n```\n\nNote that you must be the package owner to deprecate something.  See the\n`owner` and `adduser` help topics.\n\nTo un-deprecate a package, specify an empty string (`\"\"`) for the `message` \nargument. Note that you must use double quotes with no space between them to \nformat an empty string.\n\n### See Also\n\n* [npm publish](/cli/v6/commands/npm-publish)\n* [npm registry](/cli/v6/using-npm/registry)\n"},{"id":"288265f9-aebc-5ec1-bb41-cd8121edff9f","frontmatter":{"title":"npm-dist-tag"},"rawBody":"---\ntitle: npm-dist-tag\nsection: 1\ndescription: Modify package distribution tags\nredirect_from:\n  - /cli/dist-tag\n  - /cli/dist-tag.html\n  - /cli/commands/dist-tag\n  - /cli-commands/dist-tag\n  - /cli-commands/dist-tag.html\n  - /cli-commands/npm-dist-tag\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-dist-tag.md\n---\n\n### Synopsis\n```bash\nnpm dist-tag add <pkg>@<version> [<tag>]\nnpm dist-tag rm <pkg> <tag>\nnpm dist-tag ls [<pkg>]\n\naliases: dist-tags\n```\n\n### Description\n\nAdd, remove, and enumerate distribution tags on a package:\n\n* add:\n  Tags the specified version of the package with the specified tag, or the\n  `--tag` config if not specified. If you have two-factor authentication on\n  auth-and-writes then you’ll need to include a one-time password on the\n  command line with `--otp <one-time password>`.\n\n* rm:\n  Clear a tag that is no longer in use from the package.\n\n* ls:\n  Show all of the dist-tags for a package, defaulting to the package in\n  the current prefix. This is the default action if none is specified.\n\nA tag can be used when installing packages as a reference to a version instead\nof using a specific version number:\n\n```bash\nnpm install <name>@<tag>\n```\n\nWhen installing dependencies, a preferred tagged version may be specified:\n\n```bash\nnpm install --tag <tag>\n```\n\nThis also applies to `npm dedupe`.\n\nPublishing a package sets the `latest` tag to the published version unless the\n`--tag` option is used. For example, `npm publish --tag=beta`.\n\nBy default, `npm install <pkg>` (without any `@<version>` or `@<tag>`\nspecifier) installs the `latest` tag.\n\n### Purpose\n\nTags can be used to provide an alias instead of version numbers.\n\nFor example, a project might choose to have multiple streams of development\nand use a different tag for each stream,\ne.g., `stable`, `beta`, `dev`, `canary`.\n\nBy default, the `latest` tag is used by npm to identify the current version of\na package, and `npm install <pkg>` (without any `@<version>` or `@<tag>`\nspecifier) installs the `latest` tag. Typically, projects only use the `latest`\ntag for stable release versions, and use other tags for unstable versions such\nas prereleases.\n\nThe `next` tag is used by some projects to identify the upcoming version.\n\nBy default, other than `latest`, no tag has any special significance to npm\nitself.\n\n### Caveats\n\nThis command used to be known as `npm tag`, which only created new tags, and so\nhad a different syntax.\n\nTags must share a namespace with version numbers, because they are specified in\nthe same slot: `npm install <pkg>@<version>` vs `npm install <pkg>@<tag>`.\n\nTags that can be interpreted as valid semver ranges will be rejected. For\nexample, `v1.4` cannot be used as a tag, because it is interpreted by semver as\n`>=1.4.0 <1.5.0`.  See <https://github.com/npm/npm/issues/6082>.\n\nThe simplest way to avoid semver problems with tags is to use tags that do not\nbegin with a number or the letter `v`.\n\n### See Also\n\n* [npm publish](/cli/v6/commands/npm-publish)\n* [npm install](/cli/v6/commands/npm-install)\n* [npm dedupe](/cli/v6/commands/npm-dedupe)\n* [npm registry](/cli/v6/using-npm/registry)\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n"},{"id":"fe5d9c8f-e7c5-5811-9fd2-410e277affde","frontmatter":{"title":"npm-docs"},"rawBody":"---\ntitle: npm-docs\nsection: 1\ndescription: Docs for a package in a web browser maybe\nredirect_from:\n  - /cli/docs\n  - /cli/docs.html\n  - /cli/commands/docs\n  - /cli-commands/docs\n  - /cli-commands/docs.html\n  - /cli-commands/npm-docs\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-docs.md\n---\n\n### Synopsis\n\n```bash\nnpm docs [<pkgname> [<pkgname> ...]]\nnpm docs .\nnpm home [<pkgname> [<pkgname> ...]]\nnpm home .\n```\n\n### Description\n\nThis command tries to guess at the likely location of a package's\ndocumentation URL, and then tries to open it using the `--browser`\nconfig param. You can pass multiple package names at once. If no\npackage name is provided, it will search for a `package.json` in\nthe current folder and use the `name` property.\n\n### Configuration\n\n#### browser\n\n* Default: OS X: `\"open\"`, Windows: `\"start\"`, Others: `\"xdg-open\"`\n* Type: String\n\nThe browser that is called by the `npm docs` command to open websites.\n\n#### registry\n\n* Default: https://registry.npmjs.org/\n* Type: url\n\nThe base URL of the npm package registry.\n\n\n### See Also\n\n* [npm view](/cli/v6/commands/npm-view)\n* [npm publish](/cli/v6/commands/npm-publish)\n* [npm registry](/cli/v6/using-npm/registry)\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n* [package.json](/cli/v6/configuring-npm/package-json)\n"},{"id":"b3646d42-771c-5781-8be1-d53d236233a9","frontmatter":{"title":"npm-doctor"},"rawBody":"---\ntitle: npm-doctor\nsection: 1\ndescription: Check your environments\nredirect_from:\n  - /cli/doctor\n  - /cli/doctor.html\n  - /cli/commands/doctor\n  - /cli-commands/doctor\n  - /cli-commands/doctor.html\n  - /cli-commands/npm-doctor\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-doctor.md\n---\n\n### Synopsis\n\n```bash\nnpm doctor\n```\n\n### Description\n\n`npm doctor` runs a set of checks to ensure that your npm installation has\nwhat it needs to manage your JavaScript packages. npm is mostly a standalone tool, but it does\nhave some basic requirements that must be met:\n\n+ Node.js and git must be executable by npm.\n+ The primary npm registry, `registry.npmjs.com`, or another service that uses\n  the registry API, is available.\n+ The directories that npm uses, `node_modules` (both locally and globally),\n  exist and can be written by the current user.\n+ The npm cache exists, and the package tarballs within it aren't corrupt.\n\nWithout all of these working properly, npm may not work properly.  Many issues\nare often attributable to things that are outside npm's code base, so `npm\ndoctor` confirms that the npm installation is in a good state.\n\nAlso, in addition to this, there are also very many issue reports due to using\nold versions of npm. Since npm is constantly improving, running `npm@latest` is\nbetter than an old version.\n\n`npm doctor` verifies the following items in your environment, and if there are\nany recommended changes, it will display them.\n\n#### `npm ping`\n\nBy default, npm installs from the primary npm registry, `registry.npmjs.org`.\n`npm doctor` hits a special ping endpoint within the registry. This can also be\nchecked with `npm ping`. If this check fails, you may be using a proxy that\nneeds to be configured, or may need to talk to your IT staff to get access over\nHTTPS to `registry.npmjs.org`.\n\nThis check is done against whichever registry you've configured (you can see\nwhat that is by running `npm config get registry`), and if you're using a\nprivate registry that doesn't support the `/whoami` endpoint supported by the\nprimary registry, this check may fail.\n\n#### `npm -v`\n\nWhile Node.js may come bundled with a particular version of npm, it's the\npolicy of the CLI team that we recommend all users run `npm@latest` if they\ncan. As the CLI is maintained by a small team of contributors, there are only\nresources for a single line of development, so npm's own long-term support\nreleases typically only receive critical security and regression fixes. The\nteam believes that the latest tested version of npm is almost always likely to\nbe the most functional and defect-free version of npm.\n\n#### `node -v`\n\nFor most users, in most circumstances, the best version of Node will be the\nlatest long-term support (LTS) release. Those of you who want access to new\nECMAscript features or bleeding-edge changes to Node's standard library may be\nrunning a newer version, and some of you may be required to run an older\nversion of Node because of enterprise change control policies. That's OK! But\nin general, the npm team recommends that most users run Node.js LTS.\n\n#### `npm config get registry`\n\nSome of you may be installing from private package registries for your project\nor company. That's great! Others of you may be following tutorials or\nStackOverflow questions in an effort to troubleshoot problems you may be\nhaving. Sometimes, this may entail changing the registry you're pointing at.\nThis part of `npm doctor` just lets you, and maybe whoever's helping you with\nsupport, know that you're not using the default registry.\n\n#### `which git`\n\nWhile it's documented in the README, it may not be obvious that npm needs Git\ninstalled to do many of the things that it does. Also, in some cases\n– especially on Windows – you may have Git set up in such a way that it's not\naccessible via your `PATH` so that npm can find it. This check ensures that Git\nis available.\n\n#### Permissions checks\n\n* Your cache must be readable and writable by the user running npm.\n* Global package binaries must be writable by the user running npm.\n* Your local `node_modules` path, if you're running `npm doctor` with a project\n  directory, must be readable and writable by the user running npm.\n\n#### Validate the checksums of cached packages\n\nWhen an npm package is published, the publishing process generates a checksum\nthat npm uses at install time to verify that the package didn't get corrupted\nin transit. `npm doctor` uses these checksums to validate the package tarballs\nin your local cache (you can see where that cache is located with `npm config\nget cache`, and see what's in that cache with `npm cache ls` – probably more\nthan you were expecting!). In the event that there are corrupt packages in your\ncache, you should probably run `npm cache clean` and reset the cache.\n\n### See Also\n\n* [npm bugs](/cli/v6/commands/npm-bugs)\n* [npm help](/cli/v6/commands/npm-help)\n* [npm ping](/cli/v6/commands/npm-ping)\n"},{"id":"af6fd056-420d-53f4-af8e-3e7fb91d1a54","frontmatter":{"title":"npm-edit"},"rawBody":"---\ntitle: npm-edit\nsection: 1\ndescription: Edit an installed package\nredirect_from:\n  - /cli/edit\n  - /cli/edit.html\n  - /cli/commands/edit\n  - /cli-commands/edit\n  - /cli-commands/edit.html\n  - /cli-commands/npm-edit\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-edit.md\n---\n\n### Synopsis\n\n```bash\nnpm edit <pkg>[/<subpkg>...]\n```\n\n### Description\n\nSelects a (sub)dependency in the current\nworking directory and opens the package folder in the default editor\n(or whatever you've configured as the npm `editor` config -- see\n[`npm-config`](npm-config).)\n\nAfter it has been edited, the package is rebuilt so as to pick up any\nchanges in compiled packages.\n\nFor instance, you can do `npm install connect` to install connect\ninto your package, and then `npm edit connect` to make a few\nchanges to your locally installed copy.\n\n### Configuration\n\n#### editor\n\n* Default: `EDITOR` environment variable if set, or `\"vi\"` on Posix,\n  or `\"notepad\"` on Windows.\n* Type: path\n\nThe command to run for `npm edit` or `npm config edit`.\n\n### See Also\n\n* [npm folders](/cli/v6/configuring-npm/folders)\n* [npm explore](/cli/v6/commands/npm-explore)\n* [npm install](/cli/v6/commands/npm-install)\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n"},{"id":"0ffc3b3a-0889-58a4-9dcf-ebdb4092ac09","frontmatter":{"title":"npm-explore"},"rawBody":"---\ntitle: npm-explore\nsection: 1\ndescription: Browse an installed package\nredirect_from:\n  - /cli/explore\n  - /cli/explore.html\n  - /cli/commands/explore\n  - /cli-commands/explore\n  - /cli-commands/explore.html\n  - /cli-commands/npm-explore\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-explore.md\n---\n\n### Synopsis\n\n```bash\nnpm explore <pkg> [ -- <command>]\n```\n\n### Description\n\nSpawn a subshell in the directory of the installed package specified.\n\nIf a command is specified, then it is run in the subshell, which then\nimmediately terminates.\n\nThis is particularly handy in the case of git submodules in the\n`node_modules` folder:\n\n```bash\nnpm explore some-dependency -- git pull origin master\n```\n\nNote that the package is *not* automatically rebuilt afterwards, so be\nsure to use `npm rebuild <pkg>` if you make any changes.\n\n### Configuration\n\n#### shell\n\n* Default: SHELL environment variable, or \"bash\" on Posix, or \"cmd\" on\n  Windows\n* Type: path\n\nThe shell to run for the `npm explore` command.\n\n### See Also\n\n* [npm folders](/cli/v6/configuring-npm/folders)\n* [npm edit](/cli/v6/commands/npm-edit)\n* [npm rebuild](/cli/v6/commands/npm-rebuild)\n* [npm build](/cli/v6/commands/npm-build)\n* [npm install](/cli/v6/commands/npm-install)\n"},{"id":"5a1649c3-6819-5495-8548-7e6ec06e1024","frontmatter":{"title":"npm-fund"},"rawBody":"---\ntitle: npm-fund\nsection: 1\ndescription: Retrieve funding information\nredirect_from:\n  - /cli/fund\n  - /cli/fund.html\n  - /cli/commands/fund\n  - /cli-commands/fund\n  - /cli-commands/fund.html\n  - /cli-commands/npm-fund\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-fund.md\n---\n\n### Synopsis\n\n```bash\n    npm fund [<pkg>]\n```\n\n### Description\n\nThis command retrieves information on how to fund the dependencies of\na given project. If no package name is provided, it will list all\ndependencies that are looking for funding in a tree-structure in which\nare listed the type of funding and the url to visit. If a package name\nis provided then it tries to open its funding url using the `--browser`\nconfig param; if there are multiple funding sources for the package, the\nuser will be instructed to pass the `--which` command to disambiguate.\n\nThe list will avoid duplicated entries and will stack all packages\nthat share the same type/url as a single entry. Given this nature the\nlist is not going to have the same shape of the output from `npm ls`.\n\n### Configuration\n\n#### browser\n\n* Default: OS X: `\"open\"`, Windows: `\"start\"`, Others: `\"xdg-open\"`\n* Type: String\n\nThe browser that is called by the `npm fund` command to open websites.\n\n#### json\n\n* Type: Boolean\n* Default: false\n\nShow information in JSON format.\n\n#### unicode\n\n* Type: Boolean\n* Default: true\n\nWhether to represent the tree structure using unicode characters.\nSet it to `false` in order to use all-ansi output.\n\n#### which\n\n* Type: Number\n* Default: undefined\n\nIf there are multiple funding sources, which 1-indexed source URL to open.\n\n## See Also\n\n* [npm docs](/cli/v6/commands/npm-docs)\n* [npm config](/cli/v6/commands/npm-config)\n* [npm install](/cli/v6/commands/npm-install)\n* [npm ls](/cli/v6/commands/npm-ls)\n\n"},{"id":"d6d78c2a-5d49-5b55-86d1-c413aa42af84","frontmatter":{"title":"npm-help-search"},"rawBody":"---\ntitle: npm-help-search\nsection: 1\ndescription: Search npm help documentation\nredirect_from:\n  - /cli/help-search\n  - /cli/help-search.html\n  - /cli/commands/help-search\n  - /cli-commands/help-search\n  - /cli-commands/help-search.html\n  - /cli-commands/npm-help-search\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-help-search.md\n---\n\n### Synopsis\n\n```bash\nnpm help-search <text>\n```\n\n### Description\n\nThis command will search the npm markdown documentation files for the\nterms provided, and then list the results, sorted by relevance.\n\nIf only one result is found, then it will show that help topic.\n\nIf the argument to `npm help` is not a known help topic, then it will\ncall `help-search`.  It is rarely if ever necessary to call this\ncommand directly.\n\n### Configuration\n\n#### long\n\n* Type: Boolean\n* Default: false\n\nIf true, the \"long\" flag will cause help-search to output context around\nwhere the terms were found in the documentation.\n\nIf false, then help-search will just list out the help topics found.\n\n### See Also\n\n* [npm](/cli/v6/commands/npm)\n* [npm help](/cli/v6/commands/npm-help)\n"},{"id":"1270eeff-8112-5ea4-8e99-789b5bca14d5","frontmatter":{"title":"npm-help"},"rawBody":"---\ntitle: npm-help\nsection: 1\ndescription: Get help on npm\nredirect_from:\n  - /cli/help\n  - /cli/help.html\n  - /cli/commands/help\n  - /cli-commands/help\n  - /cli-commands/help.html\n  - /cli-commands/npm-help\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-help.md\n---\n\n### Synopsis\n\n```bash\nnpm help <term> [<terms..>]\n```\n\n### Description\n\nIf supplied a topic, then show the appropriate documentation page.\n\nIf the topic does not exist, or if multiple terms are provided, then run\nthe `help-search` command to find a match.  Note that, if `help-search`\nfinds a single subject, then it will run `help` on that topic, so unique\nmatches are equivalent to specifying a topic name.\n\n### Configuration\n\n#### viewer\n\n* Default: \"man\" on Posix, \"browser\" on Windows\n* Type: path\n\nThe program to use to view help content.\n\nSet to `\"browser\"` to view html help content in the default web browser.\n\n### See Also\n\n* [npm](/cli/v6/commands/npm)\n* [npm folders](/cli/v6/configuring-npm/folders)\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n* [package.json](/cli/v6/configuring-npm/package-json)\n* [npm help-search](/cli/v6/commands/npm-help-search)\n"},{"id":"06052cc6-757b-5f1f-8c99-ceace6591a1c","frontmatter":{"title":"npm-hook"},"rawBody":"---\ntitle: npm-hook\nsection: 1\ndescription: Manage registry hooks\nredirect_from:\n  - /cli/hook\n  - /cli/hook.html\n  - /cli/commands/hook\n  - /cli-commands/hook\n  - /cli-commands/hook.html\n  - /cli-commands/npm-hook\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-hook.md\n---\n\n### Synopsis\n\n```bash\nnpm hook ls [pkg]\nnpm hook add <entity> <url> <secret>\nnpm hook update <id> <url> [secret]\nnpm hook rm <id>\n```\n\n### Example\n\nAdd a hook to watch a package for changes:\n```bash\n$ npm hook add lodash https://example.com/ my-shared-secret\n```\n\nAdd a hook to watch packages belonging to the user `substack`:\n```bash\n$ npm hook add ~substack https://example.com/ my-shared-secret\n```\n\nAdd a hook to watch packages in the scope `@npm`\n```bash\n$ npm hook add @npm https://example.com/ my-shared-secret\n```\n\nList all your active hooks:\n```bash\n$ npm hook ls\n```\n\nList your active hooks for the `lodash` package:\n```bash\n$ npm hook ls lodash\n```\n\nUpdate an existing hook's url:\n```bash\n$ npm hook update id-deadbeef https://my-new-website.here/\n```\n\nRemove a hook:\n```bash\n$ npm hook rm id-deadbeef\n```\n\n### Description\n\nAllows you to manage [npm hooks](https://blog.npmjs.org/post/145260155635/introducing-hooks-get-notifications-of-npm),\nincluding adding, removing, listing, and updating.\n\nHooks allow you to configure URL endpoints that will be notified whenever a\nchange happens to any of the supported entity types. Three different types of\nentities can be watched by hooks: packages, owners, and scopes.\n\nTo create a package hook, simply reference the package name.\n\nTo create an owner hook, prefix the owner name with `~` (as in, `~youruser`).\n\nTo create a scope hook, prefix the scope name with `@` (as in, `@yourscope`).\n\nThe hook `id` used by `update` and `rm` are the IDs listed in `npm hook ls` for\nthat particular hook.\n\nThe shared secret will be sent along to the URL endpoint so you can verify the\nrequest came from your own configured hook.\n\n### See Also\n\n* [\"Introducing Hooks\" blog post](https://blog.npmjs.org/post/145260155635/introducing-hooks-get-notifications-of-npm)\n"},{"id":"5cfa054f-6585-5be3-8a46-1263832cdbb9","frontmatter":{"title":"npm-init"},"rawBody":"---\ntitle: npm-init\nsection: 1\ndescription: create a package.json file\nredirect_from:\n  - /cli/init\n  - /cli/init.html\n  - /cli/commands/init\n  - /cli-commands/init\n  - /cli-commands/init.html\n  - /cli-commands/npm-init\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-init.md\n---\n\n### Synopsis\n```bash\nnpm init [--force|-f|--yes|-y|--scope]\nnpm init <@scope> (same as `npx <@scope>/create`)\nnpm init [<@scope>/]<name> (same as `npx [<@scope>/]create-<name>`)\n```\n\n### Examples\n\nCreate a new React-based project using [`create-react-app`](https://npm.im/create-react-app):\n```bash\n$ npm init react-app ./my-react-app\n```\n\nCreate a new `esm`-compatible package using [`create-esm`](https://npm.im/create-esm):\n```bash\n$ mkdir my-esm-lib && cd my-esm-lib\n$ npm init esm --yes\n```\n\nGenerate a plain old package.json using legacy init:\n```bash\n$ mkdir my-npm-pkg && cd my-npm-pkg\n$ git init\n$ npm init\n```\n\nGenerate it without having it ask any questions:\n```bash\n$ npm init -y\n```\n\n### Description\n\n`npm init <initializer>` can be used to set up a new or existing npm package.\n\n`initializer` in this case is an npm package named `create-<initializer>`, which\nwill be installed by [`npx`](https://npm.im/npx), and then have its main bin\nexecuted -- presumably creating or updating `package.json` and running any other\ninitialization-related operations.\n\nThe init command is transformed to a corresponding `npx` operation as follows:\n\n* `npm init foo` -> `npx create-foo`\n* `npm init @usr/foo` -> `npx @usr/create-foo`\n* `npm init @usr` -> `npx @usr/create`\n\nAny additional options will be passed directly to the command, so `npm init foo\n--hello` will map to `npx create-foo --hello`.\n\nIf the initializer is omitted (by just calling `npm init`), init will fall back\nto legacy init behavior. It will ask you a bunch of questions, and then write a\npackage.json for you. It will attempt to make reasonable guesses based on\nexisting fields, dependencies, and options selected. It is strictly additive, so\nit will keep any fields and values that were already set. You can also use\n`-y`/`--yes` to skip the questionnaire altogether. If you pass `--scope`, it\nwill create a scoped package.\n\n### See Also\n\n* <https://github.com/isaacs/init-package-json>\n* [package.json](/cli/v6/configuring-npm/package-json)\n* [npm version](/cli/v6/commands/npm-version)\n* [npm scope](/cli/v6/using-npm/scope)\n"},{"id":"bf34eb7d-55a3-53d7-a9f8-54e074fd85db","frontmatter":{"title":"npm-install-ci-test"},"rawBody":"---\ntitle: npm-install-ci-test\nsection: 1\ndescription: Install a project with a clean slate and run tests\nredirect_from:\n  - /cli/install-ci-test\n  - /cli/install-ci-test.html\n  - /cli/commands/install-ci-test\n  - /cli-commands/install-ci-test\n  - /cli-commands/install-ci-test.html\n  - /cli-commands/npm-install-ci-test\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-install-ci-test.md\n---\n\n### Synopsis\n\n```bash\nnpm install-ci-test\n\nalias: npm cit\n```\n\n### Description\n\nThis command runs an `npm ci` followed immediately by an `npm test`.\n\n### See Also\n\n* [npm ci](/cli/v6/commands/npm-ci)\n* [npm test](/cli/v6/commands/npm-test)\n"},{"id":"8216c32a-ac02-5fa8-b76c-9afe9950119e","frontmatter":{"title":"npm-install-test"},"rawBody":"---\ntitle: npm-install-test\nsection: 1\ndescription: Install package(s) and run tests\nredirect_from:\n  - /cli/install-test\n  - /cli/install-test.html\n  - /cli/commands/install-test\n  - /cli-commands/install-test\n  - /cli-commands/install-test.html\n  - /cli-commands/npm-install-test\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-install-test.md\n---\n\n### Synopsis\n\n```bash\nnpm install-test (with no args, in package dir)\nnpm install-test [<@scope>/]<name>\nnpm install-test [<@scope>/]<name>@<tag>\nnpm install-test [<@scope>/]<name>@<version>\nnpm install-test [<@scope>/]<name>@<version range>\nnpm install-test <tarball file>\nnpm install-test <tarball url>\nnpm install-test <folder>\n\nalias: npm it\ncommon options: [--save|--save-dev|--save-optional] [--save-exact] [--dry-run]\n```\n\n### Description\n\nThis command runs an `npm install` followed immediately by an `npm test`. It\ntakes exactly the same arguments as `npm install`.\n\n### See Also\n\n* [npm install](/cli/v6/commands/npm-install)\n* [npm test](/cli/v6/commands/npm-test)\n"},{"id":"a378dccc-31e1-5f0e-9857-b4cf1261f588","frontmatter":{"title":"npm-install"},"rawBody":"---\ntitle: npm-install\nsection: 1\ndescription: Install a package\nredirect_from:\n  - /cli/install\n  - /cli/install.html\n  - /cli/commands/install\n  - /cli-commands/install\n  - /cli-commands/install.html\n  - /cli-commands/npm-install\n  - /cli-documentation/install\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-install.md\n---\n\n### Synopsis\n\n```bash\nnpm install (with no args, in package dir)\nnpm install [<@scope>/]<name>\nnpm install [<@scope>/]<name>@<tag>\nnpm install [<@scope>/]<name>@<version>\nnpm install [<@scope>/]<name>@<version range>\nnpm install <alias>@npm:<name>\nnpm install <git-host>:<git-user>/<repo-name>\nnpm install <git repo url>\nnpm install <tarball file>\nnpm install <tarball url>\nnpm install <folder>\n\naliases: npm i, npm add\ncommon options: [-P|--save-prod|-D|--save-dev|-O|--save-optional] [-E|--save-exact] [-B|--save-bundle] [--no-save] [--dry-run]\n```\n\n### Description\n\nThis command installs a package, and any packages that it depends on. If the\npackage has a package-lock or shrinkwrap file, the installation of dependencies\nwill be driven by that, with an `npm-shrinkwrap.json` taking precedence if both\nfiles exist. See [package-lock.json](/cli/v6/configuring-npm/package-lock-json) and [`npm shrinkwrap`](/cli/v6/commands/npm-shrinkwrap).\n\nA `package` is:\n\n* a) a folder containing a program described by a [`package.json`](/cli/v6/configuring-npm/package-json) file\n* b) a gzipped tarball containing (a)\n* c) a url that resolves to (b)\n* d) a `<name>@<version>` that is published on the registry (see [`registry`](/cli/v6/using-npm/registry)) with (c)\n* e) a `<name>@<tag>` (see [`npm dist-tag`](/cli/v6/commands/npm-dist-tag)) that points to (d)\n* f) a `<name>` that has a \"latest\" tag satisfying (e)\n* g) a `<git remote url>` that resolves to (a)\n\nEven if you never publish your package, you can still get a lot of\nbenefits of using npm if you just want to write a node program (a), and\nperhaps if you also want to be able to easily install it elsewhere\nafter packing it up into a tarball (b).\n\n\n* `npm install` (in package directory, no arguments):\n\n    Install the dependencies in the local node_modules folder.\n\n    In global mode (ie, with `-g` or `--global` appended to the command),\n    it installs the current package context (ie, the current working\n    directory) as a global package.\n\n    By default, `npm install` will install all modules listed as dependencies\n    in [`package.json`](/cli/v6/configuring-npm/package-json).\n\n    With the `--production` flag (or when the `NODE_ENV` environment variable\n    is set to `production`), npm will not install modules listed in\n    `devDependencies`. To install all modules listed in both `dependencies` \n    and `devDependencies` when `NODE_ENV` environment variable is set to `production`, \n    you can use `--production=false`.\n\n    > NOTE: The `--production` flag has no particular meaning when adding a\n    dependency to a project.\n\n* `npm install <folder>`:\n\n    Install the package in the directory as a symlink in the current project.\n    Its dependencies will be installed before it's linked. If `<folder>` sits\n    inside the root of your project, its dependencies may be hoisted to the\n    toplevel `node_modules` as they would for other types of dependencies.\n\n* `npm install <tarball file>`:\n\n    Install a package that is sitting on the filesystem.  Note: if you just want\n    to link a dev directory into your npm root, you can do this more easily by\n    using `npm link`.\n\n    Tarball requirements:\n    * The filename *must* use `.tar`, `.tar.gz`, or `.tgz` as\n    the extension.\n    * The package contents should reside in a subfolder inside the tarball (usually it is called `package/`). npm strips one directory layer when installing the package (an equivalent of `tar x --strip-components=1` is run).\n    * The package must contain a `package.json` file with `name` and `version` properties.\n\n    Example:\n\n          npm install ./package.tgz\n\n* `npm install <tarball url>`:\n\n    Fetch the tarball url, and then install it.  In order to distinguish between\n    this and other options, the argument must start with \"http://\" or \"https://\"\n\n    Example:\n\n          npm install https://github.com/indexzero/forever/tarball/v0.5.6\n\n* `npm install [<@scope>/]<name>`:\n\n    Do a `<name>@<tag>` install, where `<tag>` is the \"tag\" config. (See\n    [`config`](/cli/v6/using-npm/config). The config's default value is `latest`.)\n\n    In most cases, this will install the version of the modules tagged as\n    `latest` on the npm registry.\n\n    Example:\n\n          npm install sax\n\n* `npm install <alias>@npm:<name>`:\n\n    Install a package under a custom alias. Allows multiple versions of\n    a same-name package side-by-side, more convenient import names for\n    packages with otherwise long ones and using git forks replacements\n    or forked npm packages as replacements. Aliasing works only on your\n    project and does not rename packages in transitive dependencies.\n    Aliases should follow the naming conventions stated in\n    [`validate-npm-package-name`](https://www.npmjs.com/package/validate-npm-package-name#naming-rules).\n\n    Examples:\n\n          npm install my-react@npm:react\n          npm install jquery2@npm:jquery@2\n          npm install jquery3@npm:jquery@3\n          npm install npa@npm:npm-package-arg\n\n\n    `npm install` saves any specified packages into `dependencies` by default.\n    Additionally, you can control where and how they get saved with some\n    additional flags:\n\n    * `-P, --save-prod`: Package will appear in your `dependencies`. This is the\n                         default unless `-D` or `-O` are present.\n\n    * `-D, --save-dev`: Package will appear in your `devDependencies`.\n\n    * `-O, --save-optional`: Package will appear in your `optionalDependencies`.\n\n    * `--no-save`: Prevents saving to `dependencies`.\n\n    When using any of the above options to save dependencies to your\n    package.json, there are two additional, optional flags:\n\n    * `-E, --save-exact`: Saved dependencies will be configured with an\n      exact version rather than using npm's default semver range\n      operator.\n\n    * `-B, --save-bundle`: Saved dependencies will also be added to your `bundleDependencies` list.\n\n    Further, if you have an `npm-shrinkwrap.json` or `package-lock.json` then it\n    will be updated as well.\n\n    `<scope>` is optional. The package will be downloaded from the registry\n    associated with the specified scope. If no registry is associated with\n    the given scope the default registry is assumed. See [`scope`](/cli/v6/using-npm/scope).\n\n    Note: if you do not include the @-symbol on your scope name, npm will\n    interpret this as a GitHub repository instead, see below. Scopes names\n    must also be followed by a slash.\n\n    Examples:\n\n    ```bash\n    npm install sax\n    npm install githubname/reponame\n    npm install @myorg/privatepackage\n    npm install node-tap --save-dev\n    npm install dtrace-provider --save-optional\n    npm install readable-stream --save-exact\n    npm install ansi-regex --save-bundle\n    ```\n\n    **Note**: If there is a file or folder named `<name>` in the current\n    working directory, then it will try to install that, and only try to\n    fetch the package by name if it is not valid.\n\n* `npm install [<@scope>/]<name>@<tag>`:\n\n    Install the version of the package that is referenced by the specified tag.\n    If the tag does not exist in the registry data for that package, then this\n    will fail.\n\n    Example:\n\n    ```bash\n    npm install sax@latest\n    npm install @myorg/mypackage@latest\n    ```\n\n* `npm install [<@scope>/]<name>@<version>`:\n\n    Install the specified version of the package.  This will fail if the\n    version has not been published to the registry.\n\n    Example:\n\n    ```bash\n    npm install sax@0.1.1\n    npm install @myorg/privatepackage@1.5.0\n    ```\n\n* `npm install [<@scope>/]<name>@<version range>`:\n\n    Install a version of the package matching the specified version range.  This\n    will follow the same rules for resolving dependencies described in [`package.json`](/cli/v6/configuring-npm/package-json).\n\n    Note that most version ranges must be put in quotes so that your shell will\n    treat it as a single argument.\n\n    Example:\n    ```bash\n    npm install sax@\">=0.1.0 <0.2.0\"\n    npm install @myorg/privatepackage@\">=0.1.0 <0.2.0\"\n    ```\n\n* `npm install <git remote url>`:\n\n    Installs the package from the hosted git provider, cloning it with `git`.\n    For a full git remote url, only that URL will be attempted.\n\n    ```bash\n      <protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish> | #semver:<semver>]\n    ```\n\n    `<protocol>` is one of `git`, `git+ssh`, `git+http`, `git+https`, or\n    `git+file`.\n\n    If `#<commit-ish>` is provided, it will be used to clone exactly that\n    commit. If the commit-ish has the format `#semver:<semver>`, `<semver>` can\n    be any valid semver range or exact version, and npm will look for any tags\n    or refs matching that range in the remote repository, much as it would for a\n    registry dependency. If neither `#<commit-ish>` or `#semver:<semver>` is\n    specified, then the default branch of the repository is used.\n\n    If the repository makes use of submodules, those submodules will be cloned\n    as well.\n\n    If the package being installed contains a `prepare` script, its\n    `dependencies` and `devDependencies` will be installed, and the prepare\n    script will be run, before the package is packaged and installed.\n\n    The following git environment variables are recognized by npm and will be\n    added to the environment when running git:\n\n    * `GIT_ASKPASS`\n    * `GIT_EXEC_PATH`\n    * `GIT_PROXY_COMMAND`\n    * `GIT_SSH`\n    * `GIT_SSH_COMMAND`\n    * `GIT_SSL_CAINFO`\n    * `GIT_SSL_NO_VERIFY`\n\n    See the git man page for details.\n\n    Examples:\n\n    ```bash\n    npm install git+ssh://git@github.com:npm/cli.git#v1.0.27\n    npm install git+ssh://git@github.com:npm/cli#semver:^5.0\n    npm install git+https://isaacs@github.com/npm/cli.git\n    npm install git://github.com/npm/cli.git#v1.0.27\n    GIT_SSH_COMMAND='ssh -i ~/.ssh/custom_ident' npm install git+ssh://git@github.com:npm/cli.git\n    ```\n\n* `npm install <githubname>/<githubrepo>[#<commit-ish>]`:\n* `npm install github:<githubname>/<githubrepo>[#<commit-ish>]`:\n\n    Install the package at `https://github.com/githubname/githubrepo` by\n    attempting to clone it using `git`.\n\n    If `#<commit-ish>` is provided, it will be used to clone exactly that\n    commit. If the commit-ish has the format `#semver:<semver>`, `<semver>` can\n    be any valid semver range or exact version, and npm will look for any tags\n    or refs matching that range in the remote repository, much as it would for a\n    registry dependency. If neither `#<commit-ish>` or `#semver:<semver>` is\n    specified, then `master` is used.\n\n    As with regular git dependencies, `dependencies` and `devDependencies` will\n    be installed if the package has a `prepare` script, before the package is\n    done installing.\n\n    Examples:\n    \n    ```bash\n    npm install mygithubuser/myproject\n    npm install github:mygithubuser/myproject\n   ```\n\n* `npm install gist:[<githubname>/]<gistID>[#<commit-ish>|#semver:<semver>]`:\n\n    Install the package at `https://gist.github.com/gistID` by attempting to\n    clone it using `git`. The GitHub username associated with the gist is\n    optional and will not be saved in `package.json`.\n\n    As with regular git dependencies, `dependencies` and `devDependencies` will\n    be installed if the package has a `prepare` script, before the package is\n    done installing.\n\n    Example:\n    \n    ```bash\n    npm install gist:101a11beef\n    ```\n\n* `npm install bitbucket:<bitbucketname>/<bitbucketrepo>[#<commit-ish>]`:\n\n    Install the package at `https://bitbucket.org/bitbucketname/bitbucketrepo`\n    by attempting to clone it using `git`.\n\n    If `#<commit-ish>` is provided, it will be used to clone exactly that\n    commit. If the commit-ish has the format `#semver:<semver>`, `<semver>` can\n    be any valid semver range or exact version, and npm will look for any tags\n    or refs matching that range in the remote repository, much as it would for a\n    registry dependency. If neither `#<commit-ish>` or `#semver:<semver>` is\n    specified, then `master` is used.\n\n    As with regular git dependencies, `dependencies` and `devDependencies` will\n    be installed if the package has a `prepare` script, before the package is\n    done installing.\n\n    Example:\n    \n    ```bash\n    npm install bitbucket:mybitbucketuser/myproject\n    ```\n\n* `npm install gitlab:<gitlabname>/<gitlabrepo>[#<commit-ish>]`:\n\n    Install the package at `https://gitlab.com/gitlabname/gitlabrepo`\n    by attempting to clone it using `git`.\n\n    If `#<commit-ish>` is provided, it will be used to clone exactly that\n    commit. If the commit-ish has the format `#semver:<semver>`, `<semver>` can\n    be any valid semver range or exact version, and npm will look for any tags\n    or refs matching that range in the remote repository, much as it would for a\n    registry dependency. If neither `#<commit-ish>` or `#semver:<semver>` is\n    specified, then `master` is used.\n\n    As with regular git dependencies, `dependencies` and `devDependencies` will\n    be installed if the package has a `prepare` script, before the package is\n    done installing.\n\n    Example:\n    \n    ```bash\n    npm install gitlab:mygitlabuser/myproject\n    npm install gitlab:myusr/myproj#semver:^5.0\n    ```\n\nYou may combine multiple arguments, and even multiple types of arguments.\nFor example:\n\n```bash\nnpm install sax@\">=0.1.0 <0.2.0\" bench supervisor\n```\n\nThe `--tag` argument will apply to all of the specified install targets. If a\ntag with the given name exists, the tagged version is preferred over newer\nversions.\n\nThe `--dry-run` argument will report in the usual way what the install would\nhave done without actually installing anything.\n\nThe `--package-lock-only` argument will only update the `package-lock.json`,\ninstead of checking `node_modules` and downloading dependencies.\n\nThe `-f` or `--force` argument will force npm to fetch remote resources even if a\nlocal copy exists on disk.\n\n```bash\nnpm install sax --force\n```\n\nThe `--no-fund` argument will hide the message displayed at the end of each\ninstall that acknowledges the number of dependencies looking for funding.\nSee `npm-fund(1)`\n\nThe `-g` or `--global` argument will cause npm to install the package globally\nrather than locally.  See [folders](/cli/v6/configuring-npm/folders).\n\nThe `--global-style` argument will cause npm to install the package into\nyour local `node_modules` folder with the same layout it uses with the\nglobal `node_modules` folder. Only your direct dependencies will show in\n`node_modules` and everything they depend on will be flattened in their\n`node_modules` folders. This obviously will eliminate some deduping.\n\nThe `--ignore-scripts` argument will cause npm to not execute any\nscripts defined in the package.json. See [`scripts`](/cli/v6/using-npm/scripts).\n\nThe `--legacy-bundling` argument will cause npm to install the package such\nthat versions of npm prior to 1.4, such as the one included with node 0.8,\ncan install the package. This eliminates all automatic deduping.\n\nThe `--link` argument will cause npm to link global installs into the\nlocal space in some cases.\n\nThe `--no-bin-links` argument will prevent npm from creating symlinks for\nany binaries the package might contain.\n\nThe `--no-optional` argument will prevent optional dependencies from\nbeing installed.\n\nThe `--no-shrinkwrap` argument, which will ignore an available\npackage lock or shrinkwrap file and use the package.json instead.\n\nThe `--no-package-lock` argument will prevent npm from creating a\n`package-lock.json` file.  When running with package-lock's disabled npm\nwill not automatically prune your node modules when installing.\n\nThe `--nodedir=/path/to/node/source` argument will allow npm to find the\nnode source code so that npm can compile native modules.\n\nThe `--only={prod[uction]|dev[elopment]}` argument will cause either only\n`devDependencies` or only non-`devDependencies` to be installed regardless of the `NODE_ENV`.\n\nThe `--no-audit` argument can be used to disable sending of audit reports to\nthe configured registries.  See [`npm-audit`](npm-audit) for details on what is sent.\n\nSee [`config`](/cli/v6/using-npm/config).  Many of the configuration params have some\neffect on installation, since that's most of what npm does.\n\n#### Algorithm\n\nTo install a package, npm uses the following algorithm:\n```bash\nload the existing node_modules tree from disk\nclone the tree\nfetch the package.json and assorted metadata and add it to the clone\nwalk the clone and add any missing dependencies\n  dependencies will be added as close to the top as is possible\n  without breaking any other modules\ncompare the original tree with the cloned tree and make a list of\nactions to take to convert one to the other\nexecute all of the actions, deepest first\n  kinds of actions are install, update, remove and move\n```\n\nFor this `package{dep}` structure: `A{B,C}, B{C}, C{D}`,\nthis algorithm produces:\n\n```bash\nA\n+-- B\n+-- C\n+-- D\n```\n\nThat is, the dependency from B to C is satisfied by the fact that A\nalready caused C to be installed at a higher level. D is still installed\nat the top level because nothing conflicts with it.\n\nFor `A{B,C}, B{C,D@1}, C{D@2}`, this algorithm produces:\n\n```bash\nA\n+-- B\n+-- C\n   `-- D@2\n+-- D@1\n```\n\nBecause B's D@1 will be installed in the top level, C now has to install D@2\nprivately for itself. This algorithm is deterministic, but different trees may\nbe produced if two dependencies are requested for installation in a different\norder.\n\nSee [folders](/cli/v6/configuring-npm/folders) for a more detailed description of the specific folder structures that npm creates.\n\n### Limitations of npm's Install Algorithm\n\nnpm will refuse to install any package with an identical name to the\ncurrent package. This can be overridden with the `--force` flag, but in\nmost cases can simply be addressed by changing the local package name.\n\nThere are some very rare and pathological edge-cases where a cycle can\ncause npm to try to install a never-ending tree of packages.  Here is\nthe simplest case:\n\n```bash\nA -> B -> A' -> B' -> A -> B -> A' -> B' -> A -> ...\n```\n\nwhere `A` is some version of a package, and `A'` is a different version\nof the same package.  Because `B` depends on a different version of `A`\nthan the one that is already in the tree, it must install a separate\ncopy.  The same is true of `A'`, which must install `B'`.  Because `B'`\ndepends on the original version of `A`, which has been overridden, the\ncycle falls into infinite regress.\n\nTo avoid this situation, npm flat-out refuses to install any\n`name@version` that is already present anywhere in the tree of package\nfolder ancestors.  A more correct, but more complex, solution would be\nto symlink the existing version into the new location.  If this ever\naffects a real use-case, it will be investigated.\n\n### See Also\n\n* [npm folders](/cli/v6/configuring-npm/folders)\n* [npm update](/cli/v6/commands/npm-update)\n* [npm audit](/cli/v6/commands/npm-audit)\n* [npm fund](/cli/v6/commands/npm-fund)\n* [npm link](/cli/v6/commands/npm-link)\n* [npm rebuild](/cli/v6/commands/npm-rebuild)\n* [npm scripts](/cli/v6/using-npm/scripts)\n* [npm build](/cli/v6/commands/npm-build)\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n* [npm registry](/cli/v6/using-npm/registry)\n* [npm dist-tag](/cli/v6/commands/npm-dist-tag)\n* [npm uninstall](/cli/v6/commands/npm-uninstall)\n* [npm shrinkwrap](/cli/v6/commands/npm-shrinkwrap)\n* [package.json](/cli/v6/configuring-npm/package-json)\n"},{"id":"57053709-f65f-5087-83bf-3443b5393051","frontmatter":{"title":"npm-link"},"rawBody":"---\ntitle: npm-link\nsection: 1\ndescription: Symlink a package folder\nredirect_from:\n  - /cli/link\n  - /cli/link.html\n  - /cli/commands/link\n  - /cli-commands/link\n  - /cli-commands/link.html\n  - /cli-commands/npm-link\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-link.md\n---\n\n### Synopsis\n\n```bash\nnpm link (in package dir)\nnpm link [<@scope>/]<pkg>[@<version>]\n\nalias: npm ln\n```\n\n### Description\n\nPackage linking is a two-step process.\n\nFirst, `npm link` in a package folder will create a symlink in the global folder\n`{prefix}/lib/node_modules/<package>` that links to the package where the `npm\nlink` command was executed. It will also link any bins in the package to `{prefix}/bin/{name}`.\nNote that `npm link` uses the global prefix (see `npm prefix -g` for its value).\n\nNext, in some other location, `npm link package-name` will create a\nsymbolic link from globally-installed `package-name` to `node_modules/`\nof the current folder.\n\nNote that `package-name` is taken from `package.json`,\nnot from directory name.\n\nThe package name can be optionally prefixed with a scope. See [`scope`](/cli/v6/using-npm/scope).\nThe scope must be preceded by an @-symbol and followed by a slash.\n\nWhen creating tarballs for `npm publish`, the linked packages are\n\"snapshotted\" to their current state by resolving the symbolic links.\n\nThis is handy for installing your own stuff, so that you can work on it and\ntest it iteratively without having to continually rebuild.\n\nFor example:\n\n```bash\n    cd ~/projects/node-redis    # go into the package directory\n    npm link                    # creates global link\n    cd ~/projects/node-bloggy   # go into some other package directory.\n    npm link redis              # link-install the package\n```\n\nNow, any changes to ~/projects/node-redis will be reflected in\n~/projects/node-bloggy/node_modules/node-redis/. Note that the link should\nbe to the package name, not the directory name for that package.\n\nYou may also shortcut the two steps in one.  For example, to do the\nabove use-case in a shorter way:\n\n```bash\ncd ~/projects/node-bloggy  # go into the dir of your main project\nnpm link ../node-redis     # link the dir of your dependency\n```\n\nThe second line is the equivalent of doing:\n\n```bash\n(cd ../node-redis; npm link)\nnpm link redis\n```\n\nThat is, it first creates a global link, and then links the global\ninstallation target into your project's `node_modules` folder.\n\nNote that in this case, you are referring to the directory name, `node-redis`,\nrather than the package name `redis`.\n\nIf your linked package is scoped (see [`scope`](/cli/v6/using-npm/scope)) your link command must include that scope, e.g.\n\n```bash\nnpm link @myorg/privatepackage\n```\n\n### See Also\n\n* [npm developers](/cli/v6/using-npm/developers)\n* [package.json](/cli/v6/configuring-npm/package-json)\n* [npm install](/cli/v6/commands/npm-install)\n* [npm folders](/cli/v6/configuring-npm/folders)\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n"},{"id":"ec8a7031-474f-5f89-9b10-95183c10cae6","frontmatter":{"title":"npm-logout"},"rawBody":"---\ntitle: npm-logout\nsection: 1\ndescription: Log out of the registry\nredirect_from:\n  - /cli/logout\n  - /cli/logout.html\n  - /cli/commands/logout\n  - /cli-commands/logout\n  - /cli-commands/logout.html\n  - /cli-commands/npm-logout\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-logout.md\n---\n\n### Synopsis\n\n```bash\nnpm logout [--registry=<url>] [--scope=<@scope>]\n```\n\n### Description\n\nWhen logged into a registry that supports token-based authentication, tell the\nserver to end this token's session. This will invalidate the token everywhere\nyou're using it, not just for the current environment.\n\nWhen logged into a legacy registry that uses username and password authentication, this will\nclear the credentials in your user configuration. In this case, it will _only_ affect\nthe current environment.\n\nIf `--scope` is provided, this will find the credentials for the registry\nconnected to that scope, if set.\n\n### Configuration\n\n#### registry\n\nDefault: https://registry.npmjs.org/\n\nThe base URL of the npm package registry. If `scope` is also specified,\nit takes precedence.\n\n#### scope\n\nDefault: The scope of your current project, if any, otherwise none.\n\nIf specified, you will be logged out of the specified scope. See [`scope`](/cli/v6/using-npm/scope).\n\n```bash\nnpm logout --scope=@myco\n```\n\n### See Also\n\n* [npm adduser](/cli/v6/commands/npm-adduser)\n* [npm registry](/cli/v6/using-npm/registry)\n* [npm config](/cli/v6/commands/npm-config)\n* [npm whoami](/cli/v6/commands/npm-whoami)\n"},{"id":"a2a0f1ed-134e-5d4c-8d19-aa3f690a9800","frontmatter":{"title":"npm-ls"},"rawBody":"---\ntitle: npm-ls\nsection: 1\ndescription: List installed packages\nredirect_from:\n  - /cli/ls\n  - /cli/ls.html\n  - /cli/commands/ls\n  - /cli-commands/ls\n  - /cli-commands/ls.html\n  - /cli-commands/npm-ls\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-ls.md\n---\n\n### Synopsis\n\n```bash\nnpm ls [[<@scope>/]<pkg> ...]\n\naliases: list, la, ll\n```\n\n### Description\n\nThis command will print to stdout all the versions of packages that are\ninstalled, as well as their dependencies, in a tree-structure.\n\nPositional arguments are `name@version-range` identifiers, which will\nlimit the results to only the paths to the packages named.  Note that\nnested packages will *also* show the paths to the specified packages.\nFor example, running `npm ls promzard` in npm's source tree will show:\n\n```bash\n    npm@6.0.0 /path/to/npm\n    └─┬ init-package-json@0.0.4\n      └── promzard@0.1.5\n```\n\nIt will print out extraneous, missing, and invalid packages.\n\nIf a project specifies git urls for dependencies these are shown\nin parentheses after the name@version to make it easier for users to\nrecognize potential forks of a project.\n\nThe tree shown is the logical dependency tree, based on package\ndependencies, not the physical layout of your node_modules folder.\n\nWhen run as `ll` or `la`, it shows extended information by default.\n\n### Configuration\n\n#### json\n\n* Default: false\n* Type: Boolean\n\nShow information in JSON format.\n\n#### long\n\n* Default: false\n* Type: Boolean\n\nShow extended information.\n\n#### parseable\n\n* Default: false\n* Type: Boolean\n\nShow parseable output instead of tree view.\n\n#### global\n\n* Default: false\n* Type: Boolean\n\nList packages in the global install prefix instead of in the current\nproject.\n\n#### depth\n\n* Type: Int\n\nMax display depth of the dependency tree.\n\n#### prod / production\n\n* Type: Boolean\n* Default: false\n\nDisplay only the dependency tree for packages in `dependencies`.\n\n#### dev / development\n\n* Type: Boolean\n* Default: false\n\nDisplay only the dependency tree for packages in `devDependencies`.\n\n#### only\n\n* Type: String\n\nWhen \"dev\" or \"development\", is an alias to `dev`.\n\nWhen \"prod\" or \"production\", is an alias to `production`.\n\n#### link\n\n* Type: Boolean\n* Default: false\n\nDisplay only dependencies which are linked\n\n#### unicode\n\n* Type: Boolean\n* Default: true\n\nWhether to represent the tree structure using unicode characters.\nSet it to false in order to use all-ansi output.\n\n### See Also\n\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n* [npm folders](/cli/v6/configuring-npm/folders)\n* [npm install](/cli/v6/commands/npm-install)\n* [npm link](/cli/v6/commands/npm-link)\n* [npm prune](/cli/v6/commands/npm-prune)\n* [npm outdated](/cli/v6/commands/npm-outdated)\n* [npm update](/cli/v6/commands/npm-update)\n"},{"id":"7245ecf4-c02e-546f-bd49-cd8ceb106be1","frontmatter":{"title":"npm-org"},"rawBody":"---\ntitle: npm-org\nsection: 1\ndescription: Manage orgs\nredirect_from:\n  - /cli/org\n  - /cli/org.html\n  - /cli/commands/org\n  - /cli-commands/org\n  - /cli-commands/org.html\n  - /cli-commands/npm-org\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-org.md\n---\n\n### Synopsis\n\n```bash\nnpm org set <orgname> <username> [developer | admin | owner]\nnpm org rm <orgname> <username>\nnpm org ls <orgname> [<username>]\n```\n\n### Example\n\nAdd a new developer to an org:\n\n```bash\n$ npm org set my-org @mx-smith\n```\n\nAdd a new admin to an org (or change a developer to an admin):\n\n```bash\n$ npm org set my-org @mx-santos admin\n```\n\nRemove a user from an org:\n\n```bash\n$ npm org rm my-org mx-santos\n```\n\nList all users in an org:\n\n```bash\n$ npm org ls my-org\n```\n\nList all users in JSON format:\n\n```bash\n$ npm org ls my-org --json\n```\n\nSee what role a user has in an org:\n\n```bash\n$ npm org ls my-org @mx-santos\n```\n\n### Description\n\nYou can use the `npm org` commands to manage and view users of an organization.\nIt supports adding and removing users, changing their roles, listing them, and\nfinding specific ones and their roles.\n\n### See Also\n\n* [Documentation on npm Orgs](https://docs.npmjs.com/orgs/)\n"},{"id":"637f8b33-2498-5d4c-a2e9-2430efb92643","frontmatter":{"title":"npm-outdated"},"rawBody":"---\ntitle: npm-outdated\nsection: 1\ndescription: Check for outdated packages\nredirect_from:\n  - /cli/outdated\n  - /cli/outdated.html\n  - /cli/commands/outdated\n  - /cli-commands/outdated\n  - /cli-commands/outdated.html\n  - /cli-commands/npm-outdated\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-outdated.md\n---\n\n### Synopsis\n\n```bash\nnpm outdated [[<@scope>/]<pkg> ...]\n```\n\n### Description\n\nThis command will check the registry to see if any (or, specific) installed\npackages are currently outdated.\n\nIn the output:\n\n* `wanted` is the maximum version of the package that satisfies the semver\n  range specified in `package.json`. If there's no available semver range (i.e.\n  you're running `npm outdated --global`, or the package isn't included in\n  `package.json`), then `wanted` shows the currently-installed version.\n* `latest` is the version of the package tagged as latest in the registry.\n  Running `npm publish` with no special configuration will publish the package\n  with a dist-tag of `latest`. This may or may not be the maximum version of\n  the package, or the most-recently published version of the package, depending\n  on how the package's developer manages the latest [dist-tag](npm-dist-tag).\n* `location` is where in the dependency tree the package is located. Note that\n  `npm outdated` defaults to a depth of 0, so unless you override that, you'll\n  always be seeing only top-level dependencies that are outdated.\n* `package type` (when using `--long` / `-l`) tells you whether this package is\n  a `dependency` or a `devDependency`. Packages not included in `package.json`\n  are always marked `dependencies`.\n* `homepage` (when using `--long` / `-l`) is the `homepage` value contained in the package's `package.json`\n* Red means there's a newer version matching your semver requirements, so you should update now.\n* Yellow indicates that there's a newer version above your semver requirements (usually new major, or new 0.x minor) so proceed with caution.\n\n### An example\n\n```bash\n$ npm outdated\nPackage      Current   Wanted   Latest  Location\nglob          5.0.15   5.0.15    6.0.1  test-outdated-output\nnothingness    0.0.3      git      git  test-outdated-output\nnpm            3.5.1    3.5.2    3.5.1  test-outdated-output\nlocal-dev      0.0.3   linked   linked  test-outdated-output\nonce           1.3.2    1.3.3    1.3.3  test-outdated-output\n```\n\nWith these `dependencies`:\n```json\n{\n  \"glob\": \"^5.0.15\",\n  \"nothingness\": \"github:othiym23/nothingness#master\",\n  \"npm\": \"^3.5.1\",\n  \"once\": \"^1.3.1\"\n}\n```\n\nA few things to note:\n\n* `glob` requires `^5`, which prevents npm from installing `glob@6`, which is\n  outside the semver range.\n* Git dependencies will always be reinstalled, because of how they're specified.\n  The installed committish might satisfy the dependency specifier (if it's\n  something immutable, like a commit SHA), or it might not, so `npm outdated` and\n  `npm update` have to fetch Git repos to check. This is why currently doing a\n  reinstall of a Git dependency always forces a new clone and install.\n* `npm@3.5.2` is marked as \"wanted\", but \"latest\" is `npm@3.5.1` because npm\n  uses dist-tags to manage its `latest` and `next` release channels. `npm update`\n  will install the _newest_ version, but `npm install npm` (with no semver range)\n  will install whatever's tagged as `latest`.\n* `once` is just plain out of date. Reinstalling `node_modules` from scratch or\n  running `npm update` will bring it up to spec.\n\n### Configuration\n\n#### json\n\n* Default: false\n* Type: Boolean\n\nShow information in JSON format.\n\n#### long\n\n* Default: false\n* Type: Boolean\n\nShow extended information.\n\n#### parseable\n\n* Default: false\n* Type: Boolean\n\nShow parseable output instead of tree view.\n\n#### global\n\n* Default: false\n* Type: Boolean\n\nCheck packages in the global install prefix instead of in the current\nproject.\n\n#### depth\n\n* Default: 0\n* Type: Int\n\nMax depth for checking dependency tree.\n\n### See Also\n\n* [npm update](/cli/v6/commands/npm-update)\n* [npm dist-tag](/cli/v6/commands/npm-dist-tag)\n* [npm registry](/cli/v6/using-npm/registry)\n* [npm folders](/cli/v6/configuring-npm/folders)\n"},{"id":"0294d076-5dce-5e94-a194-f4b968bc74a3","frontmatter":{"title":"npm-owner"},"rawBody":"---\ntitle: npm-owner\nsection: 1\ndescription: Manage package owners\nredirect_from:\n  - /cli/owner\n  - /cli/owner.html\n  - /cli/commands/owner\n  - /cli-commands/owner\n  - /cli-commands/owner.html\n  - /cli-commands/npm-owner\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-owner.md\n---\n\n### Synopsis\n\n```bash\nnpm owner add <user> [<@scope>/]<pkg>\nnpm owner rm <user> [<@scope>/]<pkg>\nnpm owner ls [<@scope>/]<pkg>\n\naliases: author\n```\n\n### Description\n\nManage ownership of published packages.\n\n* ls:\n  List all the users who have access to modify a package and push new versions.\n  Handy when you need to know who to bug for help.\n* add:\n  Add a new user as a maintainer of a package.  This user is enabled to modify\n  metadata, publish new versions, and add other owners.\n* rm:\n  Remove a user from the package owner list.  This immediately revokes their\n  privileges.\n\nNote that there is only one level of access.  Either you can modify a package,\nor you can't.  Future versions may contain more fine-grained access levels, but\nthat is not implemented at this time.\n\nIf you have two-factor authentication enabled with `auth-and-writes` then\nyou'll need to include an otp on the command line when changing ownership\nwith `--otp`.\n\n### See Also\n\n* [npm publish](/cli/v6/commands/npm-publish)\n* [npm registry](/cli/v6/using-npm/registry)\n* [npm adduser](/cli/v6/commands/npm-adduser)\n* [npm disputes](/cli/v6/using-npm/disputes)\n"},{"id":"17bb6002-5dfc-5b11-959f-e7d2130888c4","frontmatter":{"title":"npm-pack"},"rawBody":"---\ntitle: npm-pack\nsection: 1\ndescription: Create a tarball from a package\nredirect_from:\n  - /cli/pack\n  - /cli/pack.html\n  - /cli/commands/pack\n  - /cli-commands/pack\n  - /cli-commands/pack.html\n  - /cli-commands/npm-pack\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-pack.md\n---\n\n### Synopsis\n\n```bash\nnpm pack [[<@scope>/]<pkg>...] [--dry-run]\n```\n\n### Description\n\nFor anything that's installable (that is, a package folder, tarball,\ntarball url, name@tag, name@version, name, or scoped name), this\ncommand will fetch it to the cache, and then copy the tarball to the\ncurrent working directory as `<name>-<version>.tgz`, and then write\nthe filenames out to stdout.\n\nIf the same package is specified multiple times, then the file will be\noverwritten the second time.\n\nIf no arguments are supplied, then npm packs the current package folder.\n\nThe `--dry-run` argument will do everything that pack usually does without\nactually packing anything. Reports on what would have gone into the tarball.\n\n### See Also\n\n* [npm cache](/cli/v6/commands/npm-cache)\n* [npm publish](/cli/v6/commands/npm-publish)\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n"},{"id":"7e64f0c2-7987-50a4-b5c9-c06836b448de","frontmatter":{"title":"npm-ping"},"rawBody":"---\ntitle: npm-ping\nsection: 1\ndescription: Ping npm registry\nredirect_from:\n  - /cli/ping\n  - /cli/ping.html\n  - /cli/commands/ping\n  - /cli-commands/ping\n  - /cli-commands/ping.html\n  - /cli-commands/npm-ping\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-ping.md\n---\n\n### Synopsis\n\n```bash\nnpm ping [--registry <registry>]\n```\n\n### Description\n\nPing the configured or given npm registry and verify authentication.\nIf it works it will output something like:\n\n```bash\nPing success: {*Details about registry*}\n```\notherwise you will get:\n```bash\nPing error: {*Detail about error}\n```\n\n### See Also\n\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n"},{"id":"9cd88fad-47fb-5196-8690-2c60865a65e0","frontmatter":{"title":"npm-prefix"},"rawBody":"---\ntitle: npm-prefix\nsection: 1\ndescription: Display prefix\nredirect_from:\n  - /cli/prefix\n  - /cli/prefix.html\n  - /cli/commands/prefix\n  - /cli-commands/prefix\n  - /cli-commands/prefix.html\n  - /cli-commands/npm-prefix\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-prefix.md\n---\n\n### Synopsis\n\n```bash\nnpm prefix [-g]\n```\n\n### Description\n\nPrint the local prefix to standard out. This is the closest parent directory\nto contain a `package.json` file or `node_modules` directory, unless `-g` is\nalso specified.\n\nIf `-g` is specified, this will be the value of the global prefix. See\n[`npm config`](/cli/v6/commands/npm-config) for more detail.\n\n### See Also\n\n* [npm root](/cli/v6/commands/npm-root)\n* [npm bin](/cli/v6/commands/npm-bin)\n* [npm folders](/cli/v6/configuring-npm/folders)\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n"},{"id":"24128289-0ed1-5e42-b9dc-01e90fe59769","frontmatter":{"title":"npm-profile"},"rawBody":"---\ntitle: npm-profile\nsection: 1\ndescription: Change settings on your registry profile\nredirect_from:\n  - /cli/profile\n  - /cli/profile.html\n  - /cli/commands/profile\n  - /cli-commands/profile\n  - /cli-commands/profile.html\n  - /cli-commands/npm-profile\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-profile.md\n---\n\n### Synopsis\n\n```bash\nnpm profile get [--json|--parseable] [<property>]\nnpm profile set [--json|--parseable] <property> <value>\nnpm profile set password\nnpm profile enable-2fa [auth-and-writes|auth-only]\nnpm profile disable-2fa\n```\n\n### Description\n\nChange your profile information on the registry.  This not be available if\nyou're using a non-npmjs registry.\n\n* `npm profile get [<property>]`:\n  Display all of the properties of your profile, or one or more specific\n  properties.  It looks like:\n\n```bash\n+-----------------+---------------------------+\n| name            | example                   |\n+-----------------+---------------------------+\n| email           | me@example.com (verified) |\n+-----------------+---------------------------+\n| two factor auth | auth-and-writes           |\n+-----------------+---------------------------+\n| fullname        | Example User              |\n+-----------------+---------------------------+\n| homepage        |                           |\n+-----------------+---------------------------+\n| freenode        |                           |\n+-----------------+---------------------------+\n| twitter         |                           |\n+-----------------+---------------------------+\n| github          |                           |\n+-----------------+---------------------------+\n| created         | 2015-02-26T01:38:35.892Z  |\n+-----------------+---------------------------+\n| updated         | 2017-10-02T21:29:45.922Z  |\n+-----------------+---------------------------+\n```\n  \n* `npm profile set <property> <value>`:\n  Set the value of a profile property. You can set the following properties this way:\n    email, fullname, homepage, freenode, twitter, github\n\n* `npm profile set password`:\n  Change your password.  This is interactive, you'll be prompted for your\n  current password and a new password.  You'll also be prompted for an OTP\n  if you have two-factor authentication enabled.\n\n* `npm profile enable-2fa [auth-and-writes|auth-only]`:\n  Enables two-factor authentication. Defaults to `auth-and-writes` mode. Modes are:\n  * `auth-only`: Require an OTP when logging in or making changes to your\n    account's authentication.  The OTP will be required on both the website\n    and the command line.\n  * `auth-and-writes`: Requires an OTP at all the times `auth-only` does, and also requires one when\n    publishing a module, setting the `latest` dist-tag, or changing access\n    via `npm access` and `npm owner`.\n\n* `npm profile disable-2fa`:\n  Disables two-factor authentication.\n\n### Details\n\nAll of the `npm profile` subcommands accept `--json` and `--parseable` and\nwill tailor their output based on those.  Some of these commands may not be\navailable on non npmjs.com registries.\n\n### See Also\n\n* [npm config](/cli/v6/commands/npm-config)\n"},{"id":"9a2f0496-4fae-53c5-8420-831106edf963","frontmatter":{"title":"npm-prune"},"rawBody":"---\ntitle: npm-prune\nsection: 1\ndescription: Remove extraneous packages\nredirect_from:\n  - /cli/prune\n  - /cli/prune.html\n  - /cli/commands/prune\n  - /cli-commands/prune\n  - /cli-commands/prune.html\n  - /cli-commands/npm-prune\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-prune.md\n---\n\n### Synopsis\n\n```bash\nnpm prune [[<@scope>/]<pkg>...] [--production] [--dry-run] [--json]\n```\n\n### Description\n\nThis command removes \"extraneous\" packages.  If a package name is\nprovided, then only packages matching one of the supplied names are\nremoved.\n\nExtraneous packages are packages that are not listed on the parent\npackage's dependencies list.\n\nIf the `--production` flag is specified or the `NODE_ENV` environment\nvariable is set to `production`, this command will remove the packages\nspecified in your `devDependencies`. Setting `--no-production` will\nnegate `NODE_ENV` being set to `production`.\n\nIf the `--dry-run` flag is used then no changes will actually be made.\n\nIf the `--json` flag is used then the changes `npm prune` made (or would\nhave made with `--dry-run`) are printed as a JSON object.\n\nIn normal operation with package-locks enabled, extraneous modules are\npruned automatically when modules are installed and you'll only need\nthis command with the `--production` flag.\n\nIf you've disabled package-locks then extraneous modules will not be removed\nand it's up to you to run `npm prune` from time-to-time to remove them.\n\n### See Also\n\n* [npm uninstall](/cli/v6/commands/npm-uninstall)\n* [npm folders](/cli/v6/configuring-npm/folders)\n* [npm ls](/cli/v6/commands/npm-ls)\n"},{"id":"8afb49dc-0d92-5acb-b8c6-4310c9726c7d","frontmatter":{"title":"npm-publish"},"rawBody":"---\ntitle: npm-publish\nsection: 1\ndescription: Publish a package\nredirect_from:\n  - /cli/publish\n  - /cli/publish.html\n  - /cli/commands/publish\n  - /cli-commands/publish\n  - /cli-commands/publish.html\n  - /cli-commands/npm-publish\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-publish.md\n---\n\n### Synopsis\n\n```bash\nnpm publish [<tarball>|<folder>] [--tag <tag>] [--access <public|restricted>] [--otp otpcode] [--dry-run]\n\nPublishes '.' if no argument supplied\nSets tag 'latest' if no --tag specified\n```\n\n### Description\n\nPublishes a package to the registry so that it can be installed by name. All\nfiles in the package directory are included if no local `.gitignore` or\n`.npmignore` file exists. If both files exist and a file is ignored by\n`.gitignore` but not by `.npmignore` then it will be included.  See\n[`developers`](/cli/v6/using-npm/developers) for full details on what's included in the published package, as well as details on how the package is built.\n\nBy default npm will publish to the public registry. This can be overridden by\nspecifying a different default registry or using a [`scope`](/cli/v6/using-npm/scope) in the name (see [`package.json`](/cli/v6/configuring-npm/package-json)).\n\n* `<folder>`:\n  A folder containing a package.json file\n\n* `<tarball>`:\n  A url or file path to a gzipped tar archive containing a single folder\n  with a package.json file inside.\n\n* `[--tag <tag>]`\n  Registers the published package with the given tag, such that\n  `npm install <name>@<tag>` will install this version.  By default,\n  `npm publish` updates and `npm install` installs the `latest` tag. See\n  [`npm-dist-tag`](npm-dist-tag) for details about tags.\n\n* `[--access <public|restricted>]`\n  Tells the registry whether this package should be published as public or\n  restricted. Only applies to scoped packages, which default to `restricted`.\n  If you don't have a paid account, you must publish with `--access public`\n  to publish scoped packages.\n\n* `[--otp <otpcode>]`\n  If you have two-factor authentication enabled in `auth-and-writes` mode\n  then you can provide a code from your authenticator with this. If you\n  don't include this and you're running from a TTY then you'll be prompted.\n\n* `[--dry-run]`\n  As of `npm@6`, does everything publish would do except actually publishing\n  to the registry. Reports the details of what would have been published.\n\nFails if the package name and version combination already exists in\nthe specified registry.\n\nOnce a package is published with a given name and version, that\nspecific name and version combination can never be used again, even if\nit is removed with [`npm unpublish`](/cli/v6/commands/npm-unpublish).\n\nAs of `npm@5`, both a sha1sum and an integrity field with a sha512sum of the\ntarball will be submitted to the registry during publication. Subsequent\ninstalls will use the strongest supported algorithm to verify downloads.\n\nSimilar to `--dry-run` see [`npm pack`](/cli/v6/commands/npm-pack), which figures out the files to be\nincluded and packs them into a tarball to be uploaded to the registry.\n\n### See Also\n\n* [npm registry](/cli/v6/using-npm/registry)\n* [npm scope](/cli/v6/using-npm/scope)\n* [npm adduser](/cli/v6/commands/npm-adduser)\n* [npm owner](/cli/v6/commands/npm-owner)\n* [npm deprecate](/cli/v6/commands/npm-deprecate)\n* [npm dist-tag](/cli/v6/commands/npm-dist-tag)\n* [npm pack](/cli/v6/commands/npm-pack)\n* [npm profile](/cli/v6/commands/npm-profile)\n"},{"id":"4a8c15d0-dccb-5730-90f3-a5cb22dba3e1","frontmatter":{"title":"npm-rebuild"},"rawBody":"---\ntitle: npm-rebuild\nsection: 1\ndescription: Rebuild a package\nredirect_from:\n  - /cli/rebuild\n  - /cli/rebuild.html\n  - /cli/commands/rebuild\n  - /cli-commands/rebuild\n  - /cli-commands/rebuild.html\n  - /cli-commands/npm-rebuild\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-rebuild.md\n---\n\n### Synopsis\n\n```bash\nnpm rebuild [[<@scope>/<name>]...]\n\nalias: npm rb\n```\n\n### Description\n\nThis command runs the `npm build` command on the matched folders.  This is useful when you install a new version of node, and must recompile all your C++ addons with the new binary.\n\n### See Also\n\n* [npm build](/cli/v6/commands/npm-build)\n* [npm install](/cli/v6/commands/npm-install)\n"},{"id":"840db68c-c9c6-5e32-8954-7344d64fe0b8","frontmatter":{"title":"npm-repo"},"rawBody":"---\ntitle: npm-repo\nsection: 1\ndescription: Open package repository page in the browser\nredirect_from:\n  - /cli/repo\n  - /cli/repo.html\n  - /cli/commands/repo\n  - /cli-commands/repo\n  - /cli-commands/repo.html\n  - /cli-commands/npm-repo\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-repo.md\n---\n\n### Synopsis\n\n```bash\nnpm repo [<pkg>]\n```\n\n### Description\n\nThis command tries to guess at the likely location of a package's\nrepository URL, and then tries to open it using the `--browser`\nconfig param. If no package name is provided, it will search for\na `package.json` in the current folder and use the `name` property.\n\n### Configuration\n\n#### browser\n\n* Default: OS X: `\"open\"`, Windows: `\"start\"`, Others: `\"xdg-open\"`\n* Type: String\n\nThe browser that is called by the `npm repo` command to open websites.\n\n### See Also\n\n* [npm docs](/cli/v6/commands/npm-docs)\n* [npm config](/cli/v6/commands/npm-config)\n"},{"id":"0daa3321-8d5d-5da2-8780-7ad105aef4fe","frontmatter":{"title":"npm-restart"},"rawBody":"---\ntitle: npm-restart\nsection: 1\ndescription: Restart a package\nredirect_from:\n  - /cli/restart\n  - /cli/restart.html\n  - /cli/commands/restart\n  - /cli-commands/restart\n  - /cli-commands/restart.html\n  - /cli-commands/npm-restart\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-restart.md\n---\n\n### Synopsis\n\n```bash\nnpm restart [-- <args>]\n```\n\n### Description\n\nThis restarts a package.\n\nThis runs a package's \"stop\", \"restart\", and \"start\" scripts, and associated\npre- and post- scripts, in the order given below:\n\n1. prerestart\n2. prestop\n3. stop\n4. poststop\n5. restart\n6. prestart\n7. start\n8. poststart\n9. postrestart\n\n### Note\n\nNote that the \"restart\" script is run **in addition to** the \"stop\"\nand \"start\" scripts, not instead of them.\n\nThis is the behavior as of `npm` major version 2.  A change in this\nbehavior will be accompanied by an increase in major version number\n\n### See Also\n\n* [npm run-script](/cli/v6/commands/npm-run-script)\n* [npm scripts](/cli/v6/using-npm/scripts)\n* [npm test](/cli/v6/commands/npm-test)\n* [npm start](/cli/v6/commands/npm-start)\n* [npm stop](/cli/v6/commands/npm-stop)\n* [npm restart](/cli/v6/commands/npm-restart)\n"},{"id":"b968b4f2-5fcb-572a-8c77-5bc352403476","frontmatter":{"title":"npm-root"},"rawBody":"---\ntitle: npm-root\nsection: 1\ndescription: Display npm root\nredirect_from:\n  - /cli/root\n  - /cli/root.html\n  - /cli/commands/root\n  - /cli-commands/root\n  - /cli-commands/root.html\n  - /cli-commands/npm-root\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-root.md\n---\n\n### Synopsis\n```bash\nnpm root [-g]\n```\n\n### Description\n\nPrint the effective `node_modules` folder to standard out.\n\n### See Also\n\n* [npm prefix](/cli/v6/commands/npm-prefix)\n* [npm bin](/cli/v6/commands/npm-bin)\n* [npm folders](/cli/v6/configuring-npm/folders)\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n"},{"id":"b063697b-6a4b-5d72-90b7-4d18eff43f77","frontmatter":{"title":"npm-run-script"},"rawBody":"---\ntitle: npm-run-script\nsection: 1\ndescription: Run arbitrary package scripts\nredirect_from:\n  - /cli/run-script\n  - /cli/run-script.html\n  - /cli/commands/run-script\n  - /cli-commands/run-script\n  - /cli-commands/run-script.html\n  - /cli-commands/npm-run-script\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-run-script.md\n---\n\n### Synopsis\n\n```bash\nnpm run-script <command> [--silent] [-- <args>...]\n\nalias: npm run\n```\n\n### Description\n\nThis runs an arbitrary command from a package's `\"scripts\"` object.  If no\n`\"command\"` is provided, it will list the available scripts.  `run[-script]` is\nused by the test, start, restart, and stop commands, but can be called\ndirectly, as well. When the scripts in the package are printed out, they're\nseparated into lifecycle (test, start, restart) and directly-run scripts.\n\nAs of [`npm@2.0.0`](https://blog.npmjs.org/post/98131109725/npm-2-0-0), you can\nuse custom arguments when executing scripts. The special option `--` is used by\n[getopt](https://goo.gl/KxMmtG) to delimit the end of the options. npm will pass\nall the arguments after the `--` directly to your script:\n\n```bash\nnpm run test -- --grep=\"pattern\"\n```\n\nThe arguments will only be passed to the script specified after ```npm run```\nand not to any pre or post script.\n\nThe `env` script is a special built-in command that can be used to list\nenvironment variables that will be available to the script at runtime. If an\n\"env\" command is defined in your package, it will take precedence over the\nbuilt-in.\n\nIn addition to the shell's pre-existing `PATH`, `npm run` adds\n`node_modules/.bin` to the `PATH` provided to scripts. Any binaries provided by\nlocally-installed dependencies can be used without the `node_modules/.bin`\nprefix. For example, if there is a `devDependency` on `tap` in your package,\nyou should write:\n\n```bash\n\"scripts\": {\"test\": \"tap test/\\*.js\"}\n```\n\ninstead of\n\n```bash\n\"scripts\": {\"test\": \"node_modules/.bin/tap test/\\*.js\"}\n```\n\nto run your tests.\n\nThe actual shell your script is run within is platform dependent. By default,\non Unix-like systems it is the `/bin/sh` command, on Windows it is the `cmd.exe`.\nThe actual shell referred to by `/bin/sh` also depends on the system.\nAs of [`npm@5.1.0`](https://github.com/npm/npm/releases/tag/v5.1.0) you can\ncustomize the shell with the `script-shell` configuration.\n\nScripts are run from the root of the module, regardless of what your current\nworking directory is when you call `npm run`. If you want your script to\nuse different behavior based on what subdirectory you're in, you can use the\n`INIT_CWD` environment variable, which holds the full path you were in when\nyou ran `npm run`.\n\n`npm run` sets the `NODE` environment variable to the `node` executable with\nwhich `npm` is executed. Also, if the `--scripts-prepend-node-path` is passed,\nthe directory within which `node` resides is added to the\n`PATH`. If `--scripts-prepend-node-path=auto` is passed (which has been the\ndefault in `npm` v3), this is only performed when that `node` executable is\nnot found in the `PATH`.\n\nIf you try to run a script without having a `node_modules` directory and it fails,\nyou will be given a warning to run `npm install`, just in case you've forgotten.\n\nYou can use the `--silent` flag to prevent showing `npm ERR!` output on error.\n\nYou can use the `--if-present` flag to avoid exiting with a non-zero exit code\nwhen the script is undefined. This lets you run potentially undefined scripts\nwithout breaking the execution chain.\n\n### See Also\n\n* [npm scripts](/cli/v6/using-npm/scripts)\n* [npm test](/cli/v6/commands/npm-test)\n* [npm start](/cli/v6/commands/npm-start)\n* [npm restart](/cli/v6/commands/npm-restart)\n* [npm stop](/cli/v6/commands/npm-stop)\n* [npm config](/cli/v6/commands/npm-config)\n"},{"id":"e79bbd7e-191b-5c47-875b-5ca3af28cdc4","frontmatter":{"title":"npm-search"},"rawBody":"---\ntitle: npm-search\nsection: 1\ndescription: Search for packages\nredirect_from:\n  - /cli/search\n  - /cli/search.html\n  - /cli/commands/search\n  - /cli-commands/search\n  - /cli-commands/search.html\n  - /cli-commands/npm-search\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-search.md\n---\n\n### Synopsis\n\n```bash\nnpm search [-l|--long] [--json] [--parseable] [--no-description] [search terms ...]\n\naliases: s, se, find\n```\n\n### Description\n\nSearch the registry for packages matching the search terms. `npm search`\nperforms a linear, incremental, lexically-ordered search through package\nmetadata for all files in the registry. If color is enabled, it will further\nhighlight the matches in the results.\n\nAdditionally, using the `--searchopts` and `--searchexclude` options paired with\nmore search terms will respectively include and exclude further patterns. The\nmain difference between `--searchopts` and the standard search terms is that the\nformer does not highlight results in the output and can be used for more\nfine-grained filtering. Additionally, both of these can be added to `.npmrc` for\ndefault search filtering behavior.\n\nSearch also allows targeting of maintainers in search results, by prefixing\ntheir npm username with `=`.\n\nIf a term starts with `/`, then it's interpreted as a regular expression and\nsupports standard JavaScript RegExp syntax. A trailing `/` will be ignored in\nthis case. (Note that many regular expression characters must be escaped or\nquoted in most shells.)\n\n### A Note on caching\n\n### Configuration\n\n#### description\n\n* Default: true\n* Type: Boolean\n\nUsed as `--no-description`, disables search matching in package descriptions and\nsuppresses display of that field in results.\n\n#### json\n\n* Default: false\n* Type: Boolean\n\nOutput search results as a JSON array.\n\n#### parseable\n\n* Default: false\n* Type: Boolean\n\nOutput search results as lines with tab-separated columns.\n\n#### long\n\n* Default: false\n* Type: Boolean\n\nDisplay full package descriptions and other long text across multiple\nlines. When disabled (default) search results are truncated to fit\nneatly on a single line. Modules with extremely long names will\nfall on multiple lines.\n\n#### searchopts\n\n* Default: \"\"\n* Type: String\n\nSpace-separated options that are always passed to search.\n\n#### searchexclude\n\n* Default: \"\"\n* Type: String\n\nSpace-separated options that limit the results from search.\n\n#### searchstaleness\n\n* Default: 900 (15 minutes)\n* Type: Number\n\nThe age of the cache, in seconds, before another registry request is made.\n\n#### registry\n\n * Default: https://registry.npmjs.org/\n * Type: url\n\nSearch the specified registry for modules. If you have configured npm to point\nto a different default registry, such as your internal private module\nrepository, `npm search` will default to that registry when searching. Pass a\ndifferent registry url such as the default above in order to override this\nsetting.\n\n### See Also\n\n* [npm registry](/cli/v6/using-npm/registry)\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n* [npm view](/cli/v6/commands/npm-view)\n"},{"id":"633fd5e1-e70b-52ca-8375-efa184a06714","frontmatter":{"title":"npm-shrinkwrap"},"rawBody":"---\ntitle: npm-shrinkwrap\nsection: 1\ndescription: Lock down dependency versions for publication\nredirect_from:\n  - /cli/shrinkwrap\n  - /cli/shrinkwrap.html\n  - /cli/commands/shrinkwrap\n  - /cli-commands/shrinkwrap\n  - /cli-commands/shrinkwrap.html\n  - /cli-commands/npm-shrinkwrap\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-shrinkwrap.md\n---\n\n### Synopsis\n\n```bash\nnpm shrinkwrap\n```\n\n### Description\n\nThis command repurposes `package-lock.json` into a publishable\n`npm-shrinkwrap.json` or simply creates a new one. The file created and updated\nby this command will then take precedence over any other existing or future\n`package-lock.json` files. For a detailed explanation of the design and purpose\nof package locks in npm, see [package-locks](/cli/v6/configuring-npm/package-locks).\n\n### See Also\n\n* [npm install](/cli/v6/commands/npm-install)\n* [npm run-script](/cli/v6/commands/npm-run-script)\n* [npm scripts](/cli/v6/using-npm/scripts)\n* [package.js](/cli/v6/configuring-npm/package-json)\n* [package-locks](/cli/v6/configuring-npm/package-locks)\n* [package-lock.json](/cli/v6/configuring-npm/package-lock-json)\n* [shrinkwrap.json](/cli/v6/configuring-npm/shrinkwrap-json)\n* [npm ls](/cli/v6/commands/npm-ls)\n"},{"id":"3619520d-6774-5055-89fc-8e41110d643a","frontmatter":{"title":"npm-star"},"rawBody":"---\ntitle: npm-star\nsection: 1\ndescription: Mark your favorite packages\nredirect_from:\n  - /cli/star\n  - /cli/star.html\n  - /cli/commands/star\n  - /cli-commands/star\n  - /cli-commands/star.html\n  - /cli-commands/npm-star\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-star.md\n---\n\n### Synopsis\n\n```bash\nnpm star [<pkg>...]\nnpm unstar [<pkg>...]\n```\n\n### Description\n\n\"Starring\" a package means that you have some interest in it.  It's\na vaguely positive way to show that you care.\n\n\"Unstarring\" is the same thing, but in reverse.\n\nIt's a boolean thing.  Starring repeatedly has no additional effect.\n\n### See Also\n\n* [npm view](/cli/v6/commands/npm-view)\n* [npm whoami](/cli/v6/commands/npm-whoami)\n* [npm adduser](/cli/v6/commands/npm-adduser)\n"},{"id":"4098b30d-0d4a-55b9-9ba5-eb7e0aade040","frontmatter":{"title":"npm-stars"},"rawBody":"---\ntitle: npm-stars\nsection: 1\ndescription: View packages marked as favorites\nredirect_from:\n  - /cli/stars\n  - /cli/stars.html\n  - /cli/commands/stars\n  - /cli-commands/stars\n  - /cli-commands/stars.html\n  - /cli-commands/npm-stars\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-stars.md\n---\n\n### Synopsis\n```bash\nnpm stars [<user>]\n```\n\n### Description\n\nIf you have starred a lot of neat things and want to find them again\nquickly this command lets you do just that.\n\nYou may also want to see your friend's favorite packages, in this case\nyou will most certainly enjoy this command.\n\n### See Also\n\n* [npm star](/cli/v6/commands/npm-star)\n* [npm view](/cli/v6/commands/npm-view)\n* [npm whoami](/cli/v6/commands/npm-whoami)\n* [npm adduser](/cli/v6/commands/npm-adduser)\n"},{"id":"26cb4d18-2f3e-5d48-85b6-271fa5894a1c","frontmatter":{"title":"npm-start"},"rawBody":"---\ntitle: npm-start\nsection: 1\ndescription: Start a package\nredirect_from:\n  - /cli/start\n  - /cli/start.html\n  - /cli/commands/start\n  - /cli-commands/start\n  - /cli-commands/start.html\n  - /cli-commands/npm-start\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-start.md\n---\n\n### Synopsis\n\n```bash\nnpm start [-- <args>]\n```\n\n### Description\n\nThis runs an arbitrary command specified in the package's `\"start\"` property of\nits `\"scripts\"` object. If no `\"start\"` property is specified on the\n`\"scripts\"` object, it will run `node server.js`.\n\nAs of [`npm@2.0.0`](https://blog.npmjs.org/post/98131109725/npm-2-0-0), you can\nuse custom arguments when executing scripts. Refer to [`npm run-script`](/cli/v6/commands/npm-run-script) for more details.\n\n### See Also\n\n* [npm run-script](/cli/v6/commands/npm-run-script)\n* [npm scripts](/cli/v6/using-npm/scripts)\n* [npm test](/cli/v6/commands/npm-test)\n* [npm restart](/cli/v6/commands/npm-restart)\n* [npm stop](/cli/v6/commands/npm-stop)\n"},{"id":"3cf224b5-f524-5dac-aba3-bfecc11b6f0c","frontmatter":{"title":"npm-stop"},"rawBody":"---\ntitle: npm-stop\nsection: 1\ndescription: Stop a package\nredirect_from:\n  - /cli/stop\n  - /cli/stop.html\n  - /cli/commands/stop\n  - /cli-commands/stop\n  - /cli-commands/stop.html\n  - /cli-commands/npm-stop\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-stop.md\n---\n\n### Synopsis\n\n```bash\nnpm stop [-- <args>]\n```\n\n### Description\n\nThis runs a package's \"stop\" script, if one was provided.\n\n### See Also\n\n* [npm run-script](/cli/v6/commands/npm-run-script)\n* [npm scripts](/cli/v6/using-npm/scripts)\n* [npm test](/cli/v6/commands/npm-test)\n* [npm start](/cli/v6/commands/npm-start)\n* [npm restart](/cli/v6/commands/npm-restart)\n"},{"id":"0b327ca1-dada-5201-806e-64dd01ea9fdb","frontmatter":{"title":"npm-team"},"rawBody":"---\ntitle: npm-team\nsection: 1\ndescription: Manage organization teams and team memberships\nredirect_from:\n  - /cli/team\n  - /cli/team.html\n  - /cli/commands/team\n  - /cli-commands/team\n  - /cli-commands/team.html\n  - /cli-commands/npm-team\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-team.md\n---\n\n### Synopsis\n\n```bash\nnpm team create <scope:team>\nnpm team destroy <scope:team>\n\nnpm team add <scope:team> <user>\nnpm team rm <scope:team> <user>\n\nnpm team ls <scope>|<scope:team>\n\nnpm team edit <scope:team>\n```\n\n### Description\n\nUsed to manage teams in organizations, and change team memberships. Does not\nhandle permissions for packages.\n\nTeams must always be fully qualified with the organization/scope they belong to\nwhen operating on them, separated by a colon (`:`). That is, if you have a `wombats` team in a `wisdom` organization, you must always refer to that team as `wisdom:wombats` in these commands.\n\nIf you have two-factor authentication enabled in `auth-and-writes` mode, then you can provide a code from your authenticator with `[--otp <otpcode>]`. If you don't include this then you will be prompted.\n\n* create / destroy:\n  Create a new team, or destroy an existing one. Note: You cannot remove the `developers` team, <a href=\"https://docs.npmjs.com/about-developers-team\" target=\"_blank\">learn more.</a>\n* add / rm:\n  Add a user to an existing team, or remove a user from a team they belong to.\n\n* ls:\n  If performed on an organization name, will return a list of existing teams\n  under that organization. If performed on a team, it will instead return a list\n  of all users belonging to that particular team.\n\n* edit:\n  Edit a current team.\n\n### Details\n\n`npm team` always operates directly on the current registry, configurable from\nthe command line using `--registry=<registry url>`.\n\nIn order to create teams and manage team membership, you must be a *team admin*\nunder the given organization. Listing teams and team memberships may be done by\nany member of the organizations.\n\nOrganization creation and management of team admins and *organization* members\nis done through the website, not the npm CLI.\n\nTo use teams to manage permissions on packages belonging to your organization,\nuse the `npm access` command to grant or revoke the appropriate permissions.\n\n### See Also\n\n* [npm access](/cli/v6/commands/npm-access)\n* [npm registry](/cli/v6/using-npm/registry)\n"},{"id":"021e7073-2dd1-512c-a5a6-cc9571d5bee9","frontmatter":{"title":"npm-test"},"rawBody":"---\ntitle: npm-test\nsection: 1\ndescription: Test a package\nredirect_from:\n  - /cli/test\n  - /cli/test.html\n  - /cli/commands/test\n  - /cli-commands/test\n  - /cli-commands/test.html\n  - /cli-commands/npm-test\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-test.md\n---\n\n### Synopsis\n\n```bash\nnpm test [-- <args>]\n\naliases: t, tst\n```\n\n### Description\n\nThis runs a package's \"test\" script, if one was provided.\n\n### See Also\n\n* [npm run-script](/cli/v6/commands/npm-run-script)\n* [npm scripts](/cli/v6/using-npm/scripts)\n* [npm start](/cli/v6/commands/npm-start)\n* [npm restart](/cli/v6/commands/npm-restart)\n* [npm stop](/cli/v6/commands/npm-stop)\n"},{"id":"e44e5acb-ee4f-5c38-a922-31f086d35008","frontmatter":{"title":"npm-token"},"rawBody":"---\ntitle: npm-token\nsection: 1\ndescription: Manage your authentication tokens\nredirect_from:\n  - /cli/token\n  - /cli/token.html\n  - /cli/commands/token\n  - /cli-commands/token\n  - /cli-commands/token.html\n  - /cli-commands/npm-token\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-token.md\n---\n\n### Synopsis\n```bash\n  npm token list [--json|--parseable]\n  npm token create [--read-only] [--cidr=1.1.1.1/24,2.2.2.2/16]\n  npm token revoke <id|token>\n  ```\n\n### Description\n\nThis lets you list, create and revoke authentication tokens.\n\n* `npm token list`:\n  Shows a table of all active authentication tokens. You can request this as\n  JSON with `--json` or tab-separated values with `--parseable`.\n\n```bash\n+--------+---------+------------+----------+----------------+\n| id     | token   | created    | read-only | CIDR whitelist |\n+--------+---------+------------+----------+----------------+\n| 7f3134 | 1fa9ba… | 2017-10-02 | yes      |                |\n+--------+---------+------------+----------+----------------+\n| c03241 | af7aef… | 2017-10-02 | no       | 192.168.0.1/24 |\n+--------+---------+------------+----------+----------------+\n| e0cf92 | 3a436a… | 2017-10-02 | no       |                |\n+--------+---------+------------+----------+----------------+\n| 63eb9d | 74ef35… | 2017-09-28 | no       |                |\n+--------+---------+------------+----------+----------------+\n| 2daaa8 | cbad5f… | 2017-09-26 | no       |                |\n+--------+---------+------------+----------+----------------+\n| 68c2fe | 127e51… | 2017-09-23 | no       |                |\n+--------+---------+------------+----------+----------------+\n| 6334e1 | 1dadd1… | 2017-09-23 | no       |                |\n+--------+---------+------------+----------+----------------+\n```\n\n* `npm token create [--read-only] [--cidr=<cidr-ranges>]`:\n  Create a new authentication token. It can be `--read-only` or accept a list of\n  [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) ranges to\n  limit use of this token to. This will prompt you for your password, and, if you have\n  two-factor authentication enabled, an otp.\n\n```bash\n+----------------+--------------------------------------+\n| token          | a73c9572-f1b9-8983-983d-ba3ac3cc913d |\n+----------------+--------------------------------------+\n| cidr_whitelist |                                      |\n+----------------+--------------------------------------+\n| readonly       | false                                |\n+----------------+--------------------------------------+\n| created        | 2017-10-02T07:52:24.838Z             |\n+----------------+--------------------------------------+\n```\n\n* `npm token revoke <token|id>`:\n  This removes an authentication token, making it immediately unusable. This can accept\n  both complete tokens (as you get back from `npm token create` and will\n  find in your `.npmrc`) and ids as seen in the `npm token list` output. \n  This will NOT accept the truncated token found in `npm token list` output.\n"},{"id":"ba9e47c4-ad68-5b3a-b518-ff375548c7d4","frontmatter":{"title":"npm-uninstall"},"rawBody":"---\ntitle: npm-uninstall\nsection: 1\ndescription: Remove a package\nredirect_from:\n  - /cli/uninstall\n  - /cli/uninstall.html\n  - /cli/commands/uninstall\n  - /cli-commands/uninstall\n  - /cli-commands/uninstall.html\n  - /cli-commands/npm-uninstall\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-uninstall.md\n---\n\n### Synopsis\n\n```bash\nnpm uninstall [<@scope>/]<pkg>[@<version>]... [-S|--save|-D|--save-dev|-O|--save-optional|--no-save]\n\naliases: remove, rm, r, un, unlink\n```\n\n### Description\n\nThis uninstalls a package, completely removing everything npm installed\non its behalf.\n\nExample:\n\n```bash\nnpm uninstall sax\n```\n\nIn global mode (ie, with `-g` or `--global` appended to the command),\nit uninstalls the current package context as a global package.\n\n`npm uninstall` takes 3 exclusive, optional flags which save or update\nthe package version in your main package.json:\n\n* `-S, --save`: Package will be removed from your `dependencies`.\n\n* `-D, --save-dev`: Package will be removed from your `devDependencies`.\n\n* `-O, --save-optional`: Package will be removed from your `optionalDependencies`.\n\n* `--no-save`: Package will not be removed from your `package.json` file.\n\nFurther, if you have an `npm-shrinkwrap.json` then it will be updated as\nwell.\n\nScope is optional and follows the usual rules for [`scope`](/cli/v6/using-npm/scope).\n\nExamples:\n```bash\nnpm uninstall sax --save\nnpm uninstall @myorg/privatepackage --save\nnpm uninstall node-tap --save-dev\nnpm uninstall dtrace-provider --save-optional\nnpm uninstall lodash --no-save\n```\n\n### See Also\n\n* [npm prune](/cli/v6/commands/npm-prune)\n* [npm install](/cli/v6/commands/npm-install)\n* [npm folders](/cli/v6/configuring-npm/folders)\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n"},{"id":"5b2f6aef-4e61-5491-96cb-3e9a54f4e0b5","frontmatter":{"title":"npm-unpublish"},"rawBody":"---\ntitle: npm-unpublish\nsection: 1\ndescription: Remove a package from the registry\nredirect_from:\n  - /cli/unpublish\n  - /cli/unpublish.html\n  - /cli/commands/unpublish\n  - /cli-commands/unpublish\n  - /cli-commands/unpublish.html\n  - /cli-commands/npm-unpublish\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-unpublish.md\n---\n\n### Synopsis\n\n#### Unpublishing a single version of a package\n\n```bash\nnpm unpublish [<@scope>/]<pkg>@<version>\n```\n\n#### Unpublishing an entire package\n\n```bash\nnpm unpublish [<@scope>/]<pkg> --force\n```\n\n### Warning\n\nConsider using the `deprecate` command instead, if your intent is to encourage users to upgrade, or if you no longer want to maintain a package.\n\n### Description\n\nThis removes a package version from the registry, deleting its\nentry and removing the tarball.\n\nIf no version is specified, or if all versions are removed then\nthe root package entry is removed from the registry entirely.\n\nEven if a package version is unpublished, that specific name and\nversion combination can never be reused. In order to publish the\npackage again, a new version number must be used. If you unpublish the entire package, you may not publish any new versions of that package until 24 hours have passed.\n\nTo learn more about how unpublish is treated on the npm registry, see our <a href=\"https://www.npmjs.com/policies/unpublish\" target=\"_blank\" rel=\"noopener noreferrer\"> unpublish policies</a>. \n\n\n### See Also\n\n* [npm deprecate](/cli/v6/commands/npm-deprecate)\n* [npm publish](/cli/v6/commands/npm-publish)\n* [npm registry](/cli/v6/using-npm/registry)\n* [npm adduser](/cli/v6/commands/npm-adduser)\n* [npm owner](/cli/v6/commands/npm-owner)\n"},{"id":"a9c99e3c-9a93-52ea-9525-8a54fbebd786","frontmatter":{"title":"npm-update"},"rawBody":"---\ntitle: npm-update\nsection: 1\ndescription: Update a package\nredirect_from:\n  - /cli/update\n  - /cli/update.html\n  - /cli/commands/update\n  - /cli-commands/update\n  - /cli-commands/update.html\n  - /cli-commands/npm-update\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-update.md\n---\n\n### Synopsis\n\n```bash\nnpm update [-g] [<pkg>...]\n\naliases: up, upgrade\n```\n\n### Description\n\nThis command will update all the packages listed to the latest version\n(specified by the `tag` config), respecting semver.\n\nIt will also install missing packages. As with all commands that install\npackages, the `--dev` flag will cause `devDependencies` to be processed\nas well.\n\nIf the `-g` flag is specified, this command will update globally installed\npackages.\n\nIf no package name is specified, all packages in the specified location (global\nor local) will be updated.\n\nAs of `npm@2.6.1`, the `npm update` will only inspect top-level packages.\nPrior versions of `npm` would also recursively inspect all dependencies.\nTo get the old behavior, use `npm --depth 9999 update`.\n\nAs of `npm@5.0.0`, the `npm update` will change `package.json` to save the \nnew version as the minimum required dependency. To get the old behavior, \nuse `npm update --no-save`.\n\n### Example\n\nIMPORTANT VERSION NOTE: these examples assume `npm@2.6.1` or later.  For\nolder versions of `npm`, you must specify `--depth 0` to get the behavior\ndescribed below.\n\nFor the examples below, assume that the current package is `app` and it depends\non dependencies, `dep1` (`dep2`, .. etc.).  The published versions of `dep1` are:\n\n```json\n{\n  \"dist-tags\": { \"latest\": \"1.2.2\" },\n  \"versions\": [\n    \"1.2.2\",\n    \"1.2.1\",\n    \"1.2.0\",\n    \"1.1.2\",\n    \"1.1.1\",\n    \"1.0.0\",\n    \"0.4.1\",\n    \"0.4.0\",\n    \"0.2.0\"\n  ]\n}\n```\n\n#### Caret Dependencies\n\nIf `app`'s `package.json` contains:\n\n```json\n\"dependencies\": {\n  \"dep1\": \"^1.1.1\"\n}\n```\n\nThen `npm update` will install `dep1@1.2.2`, because `1.2.2` is `latest` and\n`1.2.2` satisfies `^1.1.1`.\n\n#### Tilde Dependencies\n\nHowever, if `app`'s `package.json` contains:\n\n```json\n\"dependencies\": {\n  \"dep1\": \"~1.1.1\"\n}\n```\n\nIn this case, running `npm update` will install `dep1@1.1.2`.  Even though the `latest`\ntag points to `1.2.2`, this version does not satisfy `~1.1.1`, which is equivalent\nto `>=1.1.1 <1.2.0`.  So the highest-sorting version that satisfies `~1.1.1` is used,\nwhich is `1.1.2`.\n\n#### Caret Dependencies below 1.0.0\n\nSuppose `app` has a caret dependency on a version below `1.0.0`, for example:\n\n```json\n\"dependencies\": {\n  \"dep1\": \"^0.2.0\"\n}\n```\n\n`npm update` will install `dep1@0.2.0`, because there are no other\nversions which satisfy `^0.2.0`.\n\nIf the dependence were on `^0.4.0`:\n\n```json\n\"dependencies\": {\n  \"dep1\": \"^0.4.0\"\n}\n```\n\nThen `npm update` will install `dep1@0.4.1`, because that is the highest-sorting\nversion that satisfies `^0.4.0` (`>= 0.4.0 <0.5.0`)\n\n\n#### Updating Globally-Installed Packages\n\n`npm update -g` will apply the `update` action to each globally installed\npackage that is `outdated` -- that is, has a version that is different from\n`wanted`.\n\nNote: Globally installed packages are treated as if they are installed with a caret semver range specified. So if you require to update to `latest` you may need to run `npm install -g [<pkg>...]`\n\nNOTE: If a package has been upgraded to a version newer than `latest`, it will\nbe _downgraded_.\n\n\n### See Also\n\n* [npm install](/cli/v6/commands/npm-install)\n* [npm outdated](/cli/v6/commands/npm-outdated)\n* [npm shrinkwrap](/cli/v6/commands/npm-shrinkwrap)\n* [npm registry](/cli/v6/using-npm/registry)\n* [npm folders](/cli/v6/configuring-npm/folders)\n* [npm ls](/cli/v6/commands/npm-ls)\n"},{"id":"13138266-9a85-55ce-ae81-b3b00eff4d85","frontmatter":{"title":"npm-version"},"rawBody":"---\ntitle: npm-version\nsection: 1\ndescription: Bump a package version\nredirect_from:\n  - /cli/version\n  - /cli/version.html\n  - /cli/commands/version\n  - /cli-commands/version\n  - /cli-commands/version.html\n  - /cli-commands/npm-version\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-version.md\n---\n\n### Synopsis\n\n```bash\nnpm version [<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease [--preid=<prerelease-id>] | from-git]\n\n'npm [-v | --version]' to print npm version\n'npm view <pkg> version' to view a package's published version\n'npm ls' to inspect current package/dependency versions\n```\n\n### Description\n\nRun this in a package directory to bump the version and write the new\ndata back to `package.json`, `package-lock.json`, and, if present, `npm-shrinkwrap.json`.\n\nThe `newversion` argument should be a valid semver string, a\nvalid second argument to [semver.inc](https://github.com/npm/node-semver#functions) (one of `patch`, `minor`, `major`,\n`prepatch`, `preminor`, `premajor`, `prerelease`), or `from-git`. In the second case,\nthe existing version will be incremented by 1 in the specified field.\n`from-git` will try to read the latest git tag, and use that as the new npm version.\n\nIf run in a git repo, it will also create a version commit and tag.\nThis behavior is controlled by `git-tag-version` (see below), and can\nbe disabled on the command line by running `npm --no-git-tag-version version`.\nIt will fail if the working directory is not clean, unless the `-f` or\n`--force` flag is set.\n\nIf supplied with `-m` or `--message` config option, npm will\nuse it as a commit message when creating a version commit.  If the\n`message` config contains `%s` then that will be replaced with the\nresulting version number.  For example:\n\n```bash\nnpm version patch -m \"Upgrade to %s for reasons\"\n```\n\nIf the `sign-git-tag` config is set, then the tag will be signed using\nthe `-s` flag to git.  Note that you must have a default GPG key set up\nin your git config for this to work properly.  For example:\n\n```bash\n$ npm config set sign-git-tag true\n$ npm version patch\n\nYou need a passphrase to unlock the secret key for\nuser: \"isaacs (http://blog.izs.me/) <i@izs.me>\"\n2048-bit RSA key, ID 6C481CF6, created 2010-08-31\n\nEnter passphrase:\n```\n\nIf `preversion`, `version`, or `postversion` are in the `scripts` property of\nthe package.json, they will be executed as part of running `npm version`.\n\nThe exact order of execution is as follows:\n  1. Check to make sure the git working directory is clean before we get started.\n     Your scripts may add files to the commit in future steps.\n     This step is skipped if the `--force` flag is set.\n  2. Run the `preversion` script. These scripts have access to the old `version` in package.json.\n     A typical use would be running your full test suite before deploying.\n     Any files you want added to the commit should be explicitly added using `git add`.\n  3. Bump `version` in `package.json` as requested (`patch`, `minor`, `major`, etc).\n  4. Run the `version` script. These scripts have access to the new `version` in package.json\n     (so they can incorporate it into file headers in generated files for example).\n     Again, scripts should explicitly add generated files to the commit using `git add`.\n  5. Commit and tag.\n  6. Run the `postversion` script. Use it to clean up the file system or automatically push\n     the commit and/or tag.\n\nTake the following example:\n\n```json\n    \"scripts\": {\n      \"preversion\": \"npm test\",\n      \"version\": \"npm run build && git add -A dist\",\n      \"postversion\": \"git push && git push --tags && rm -rf build/temp\"\n    }\n```\n\nThis runs all your tests, and proceeds only if they pass. Then runs your `build` script, and\nadds everything in the `dist` directory to the commit. After the commit, it pushes the new commit\nand tag up to the server, and deletes the `build/temp` directory.\n\n### Configuration\n\n#### allow-same-version\n\n* Default: false\n* Type: Boolean\n\nPrevents throwing an error when `npm version` is used to set the new version \nto the same value as the current version.\n\n#### git-tag-version\n\n* Default: true\n* Type: Boolean\n\nCommit and tag the version change.\n\n#### commit-hooks\n\n* Default: true\n* Type: Boolean\n\nRun git commit hooks when committing the version change.\n\n#### sign-git-tag\n\n* Default: false\n* Type: Boolean\n\nPass the `-s` flag to git to sign the tag.\n\nNote that you must have a default GPG key set up in your git config for this to work properly.\n\n### See Also\n\n* [npm init](/cli/v6/commands/npm-init)\n* [npm run-script](/cli/v6/commands/npm-run-script)\n* [npm scripts](/cli/v6/using-npm/scripts)\n* [package.json](/cli/v6/configuring-npm/package-json)\n* [semver](/cli/v6/using-npm/semver)\n* [config](/cli/v6/using-npm/config)\n"},{"id":"acd08402-c0e8-5aea-8655-ffd66d670b8c","frontmatter":{"title":"npm-view"},"rawBody":"---\ntitle: npm-view\nsection: 1\ndescription: View registry info\nredirect_from:\n  - /cli/view\n  - /cli/view.html\n  - /cli/commands/view\n  - /cli-commands/view\n  - /cli-commands/view.html\n  - /cli-commands/npm-view\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-view.md\n---\n\n### Synopsis\n\n```bash\nnpm view [<@scope>/]<name>[@<version>] [<field>[.<subfield>]...]\n\naliases: info, show, v\n```\n\n### Description\n\nThis command shows data about a package and prints it to the stream\nreferenced by the `outfd` config, which defaults to stdout.\n\nTo show the package registry entry for the `connect` package, you can do\nthis:\n\n```bash\nnpm view connect\n```\n\nThe default version is \"latest\" if unspecified.\n\nField names can be specified after the package descriptor.\nFor example, to show the dependencies of the `ronn` package at version\n0.3.5, you could do the following:\n\n```bash\nnpm view ronn@0.3.5 dependencies\n```\n\nYou can view child fields by separating them with a period.\nTo view the git repository URL for the latest version of npm, you could\ndo this:\n\n```bash\nnpm view npm repository.url\n```\n\nThis makes it easy to view information about a dependency with a bit of\nshell scripting.  For example, to view all the data about the version of\nopts that ronn depends on, you can do this:\n\n```bash\nnpm view opts@$(npm view ronn dependencies.opts)\n```\n\nFor fields that are arrays, requesting a non-numeric field will return\nall of the values from the objects in the list.  For example, to get all\nthe contributor names for the \"express\" project, you can do this:\n\n```bash\nnpm view express contributors.email\n```\n\nYou may also use numeric indices in square braces to specifically select\nan item in an array field.  To just get the email address of the first\ncontributor in the list, you can do this:\n\n```bash\nnpm view express contributors[0].email\n```\n\nMultiple fields may be specified, and will be printed one after another.\nFor example, to get all the contributor names and email addresses, you\ncan do this:\n\n```bash\nnpm view express contributors.name contributors.email\n```\n\n\"Person\" fields are shown as a string if they would be shown as an\nobject.  So, for example, this will show the list of npm contributors in\nthe shortened string format.  (See [`package.json`](/cli/v6/configuring-npm/package-json) for more on this.)\n\n```bash\nnpm view npm contributors\n```\n\nIf a version range is provided, then data will be printed for every\nmatching version of the package.  This will show which version of jsdom\nwas required by each matching version of yui3:\n\n```bash\nnpm view yui3@'>0.5.4' dependencies.jsdom\n```    \n\nTo show the `connect` package version history, you can do\nthis:\n\n```bash\nnpm view connect versions\n```\n\n### Output\n\nIf only a single string field for a single version is output, then it\nwill not be colorized or quoted, so as to enable piping the output to\nanother command. If the field is an object, it will be output as a JavaScript object literal.\n\nIf the --json flag is given, the outputted fields will be JSON.\n\nIf the version range matches multiple versions, than each printed value\nwill be prefixed with the version it applies to.\n\nIf multiple fields are requested, than each of them are prefixed with\nthe field name.\n\n### See Also\n\n* [npm search](/cli/v6/commands/npm-search)\n* [npm registry](/cli/v6/using-npm/registry)\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n* [npm docs](/cli/v6/commands/npm-docs)\n"},{"id":"fbf976e5-8765-596a-9b9a-28f2efd4acd3","frontmatter":{"title":"npm-whoami"},"rawBody":"---\ntitle: npm-whoami\nsection: 1\ndescription: Display npm username\nredirect_from:\n  - /cli/whoami\n  - /cli/whoami.html\n  - /cli/commands/whoami\n  - /cli-commands/whoami\n  - /cli-commands/whoami.html\n  - /cli-commands/npm-whoami\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm-whoami.md\n---\n\n### Synopsis\n\n```bash\nnpm whoami [--registry <registry>]\n```\n\n### Description\n\nPrint the `username` config to standard output.\n\n### See Also\n\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n* [npm adduser](/cli/v6/commands/npm-adduser)\n"},{"id":"cd1669d9-2598-5763-861f-0fce7ba1b4c1","frontmatter":{"title":"npm"},"rawBody":"---\ntitle: npm\nsection: 1\ndescription: javascript package manager\nredirect_from:\n  - /cli/npm\n  - /cli/npm.html\n  - /cli/commands/npm\n  - /cli-commands/npm\n  - /cli-commands/npm.html\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/commands/npm.md\n---\n\n### Synopsis\n\n```bash\nnpm <command> [args]\n```\n\n### Version\n\n6.0.0\n\n### Description\n\nnpm is the package manager for the Node JavaScript platform.  It puts\nmodules in place so that node can find them, and manages dependency\nconflicts intelligently.\n\nIt is extremely configurable to support a wide variety of use cases.\nMost commonly, it is used to publish, discover, install, and develop node\nprograms.\n\nRun `npm help` to get a list of available commands.\n\n### Important\n\nnpm is configured to use npm, Inc.'s public registry at\nhttps://registry.npmjs.org by default. Use of the npm public registry is\nsubject to terms of use available at https://www.npmjs.com/policies/terms.\n\nYou can configure npm to use any compatible registry you like, and even run\nyour own registry. Use of someone else's registry may be governed by their\nterms of use.\n\n### Introduction\n\nYou probably got npm because you want to install stuff.\n\nUse `npm install blerg` to install the latest version of \"blerg\".  Check out\n[`npm install`](/cli/v6/commands/npm-install) for more info.  It can do a lot of stuff.\n\nUse the `npm search` command to show everything that's available.\nUse `npm ls` to show everything you've installed.\n\n### Dependencies\n\nIf a package references to another package with a git URL, npm depends\non a preinstalled git.\n\nIf one of the packages npm tries to install is a native node module and\nrequires compiling of C++ Code, npm will use\n[node-gyp](https://github.com/nodejs/node-gyp) for that task.\nFor a Unix system, [node-gyp](https://github.com/nodejs/node-gyp)\nneeds Python, make and a buildchain like GCC. On Windows,\nPython and Microsoft Visual Studio C++ are needed.\nFor more information visit\n[the node-gyp repository](https://github.com/nodejs/node-gyp) and\nthe [node-gyp Wiki](https://github.com/nodejs/node-gyp/wiki).\n\n### Directories\n\nSee [`folders`](/cli/v6/configuring-npm/folders) to learn about where npm puts stuff.\n\nIn particular, npm has two modes of operation:\n\n* global mode:\n  npm installs packages into the install prefix at\n  `prefix/lib/node_modules` and bins are installed in `prefix/bin`.\n* local mode:\n  npm installs packages into the current project directory, which\n  defaults to the current working directory.  Packages are installed to\n  `./node_modules`, and bins are installed to `./node_modules/.bin`.\n\nLocal mode is the default.  Use `-g` or `--global` on any command to\noperate in global mode instead.\n\n### Developer Usage\n\nIf you're using npm to develop and publish your code, check out the\nfollowing help topics:\n\n* json:\n  Make a package.json file.  See [`package.json`](/cli/v6/configuring-npm/package-json).\n* link:\n  For linking your current working code into Node's path, so that you\n  don't have to reinstall every time you make a change.  Use\n  `npm link` to do this.\n* install:\n  It's a good idea to install things if you don't need the symbolic link.\n  Especially, installing other peoples code from the registry is done via\n  `npm install`\n* adduser:\n  Create an account or log in.  Credentials are stored in the\n  user config file.\n* publish:\n  Use the `npm publish` command to upload your code to the registry.\n\n#### Configuration\n\nnpm is extremely configurable.  It reads its configuration options from\n5 places.\n\n* Command line switches:\n  Set a config with `--key val`.  All keys take a value, even if they\n  are booleans (the config parser doesn't know what the options are at\n  the time of parsing).  If no value is provided, then the option is set\n  to boolean `true`.\n* Environment Variables:\n  Set any config by prefixing the name in an environment variable with\n  `npm_config_`.  For example, `export npm_config_key=val`.\n* User Configs:\n  The file at $HOME/.npmrc is an ini-formatted list of configs.  If\n  present, it is parsed.  If the `userconfig` option is set in the cli\n  or env, then that will be used instead.\n* Global Configs:\n  The file found at ../etc/npmrc (from the node executable, by default\n  this resolves to /usr/local/etc/npmrc) will be parsed if it is found.\n  If the `globalconfig` option is set in the cli, env, or user config,\n  then that file is parsed instead.\n* Defaults:\n  npm's default configuration options are defined in\n  lib/utils/config-defs.js.  These must not be changed.\n\nSee [`config`](/cli/v6/using-npm/config) for much much more information.\n\n### Contributions\n\nPatches welcome!\n\nIf you would like to contribute, but don't know what to work on, read\nthe contributing guidelines and check the issues list.\n\n* [CONTRIBUTING.md](https://github.com/npm/cli/blob/latest/CONTRIBUTING.md)\n* [Bug tracker](https://github.com/npm/cli/issues)\n\n### Bugs\n\nWhen you find issues, please report them:\n\n* web:\n  <https://npm.community/c/bugs>\n\nBe sure to follow the template and bug reporting guidelines. You can also ask\nfor help in the [support forum](https://npm.community/c/support) if you're\nunsure if it's actually a bug or are having trouble coming up with a detailed\nreproduction to report.\n\n### Author\n\n[Isaac Z. Schlueter](http://blog.izs.me/) ::\n[isaacs](https://github.com/isaacs/) ::\n[@izs](https://twitter.com/izs) ::\n<i@izs.me>\n\n### See Also\n* [npm help](/cli/v6/commands/npm-help)\n* [package.json](/cli/v6/configuring-npm/package-json)\n* [npm install](/cli/v6/commands/npm-install)\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n"},{"id":"1202a20e-a5d9-5d80-96e6-070e2c716bc3","frontmatter":{"title":"folders"},"rawBody":"---\ntitle: folders\nsection: 5\ndescription: Folder Structures Used by npm\nredirect_from:\n  - /configuring-npm/folders\n  - /configuring-npm/folders.html\n  - /files/folders\n  - /files/folders.html\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/configuring-npm/folders.md\n---\n\n### Description\n\nnpm puts various things on your computer.  That's its job.\n\nThis document will tell you what it puts where.\n\n#### tl;dr\n\n* Local install (default): puts stuff in `./node_modules` of the current\n  package root.\n* Global install (with `-g`): puts stuff in /usr/local or wherever node\n  is installed.\n* Install it **locally** if you're going to `require()` it.\n* Install it **globally** if you're going to run it on the command line.\n* If you need both, then install it in both places, or use `npm link`.\n\n#### prefix Configuration\n\nThe `prefix` config defaults to the location where node is installed.\nOn most systems, this is `/usr/local`. On Windows, it's `%AppData%\\npm`.\nOn Unix systems, it's one level up, since node is typically installed at\n`{prefix}/bin/node` rather than `{prefix}/node.exe`.\n\nWhen the `global` flag is set, npm installs things into this prefix.\nWhen it is not set, it uses the root of the current package, or the\ncurrent working directory if not in a package already.\n\n#### Node Modules\n\nPackages are dropped into the `node_modules` folder under the `prefix`.\nWhen installing locally, this means that you can\n`require(\"packagename\")` to load its main module, or\n`require(\"packagename/lib/path/to/sub/module\")` to load other modules.\n\nGlobal installs on Unix systems go to `{prefix}/lib/node_modules`.\nGlobal installs on Windows go to `{prefix}/node_modules` (that is, no\n`lib` folder.)\n\nScoped packages are installed the same way, except they are grouped together\nin a sub-folder of the relevant `node_modules` folder with the name of that\nscope prefix by the @ symbol, e.g. `npm install @myorg/package` would place\nthe package in `{prefix}/node_modules/@myorg/package`. See [`scope`](/cli/v6/using-npm/scope) for more details.\n\nIf you wish to `require()` a package, then install it locally.\n\n#### Executables\n\nWhen in global mode, executables are linked into `{prefix}/bin` on Unix,\nor directly into `{prefix}` on Windows.\n\nWhen in local mode, executables are linked into\n`./node_modules/.bin` so that they can be made available to scripts run\nthrough npm.  (For example, so that a test runner will be in the path\nwhen you run `npm test`.)\n\n#### Man Pages\n\nWhen in global mode, man pages are linked into `{prefix}/share/man`.\n\nWhen in local mode, man pages are not installed.\n\nMan pages are not installed on Windows systems.\n\n#### Cache\n\nSee [`npm cache`](/cli/v6/commands/npm-cache).  Cache files are stored in `~/.npm` on Posix, or\n`%AppData%/npm-cache` on Windows.\n\nThis is controlled by the `cache` configuration param.\n\n#### Temp Files\n\nTemporary files are stored by default in the folder specified by the\n`tmp` config, which defaults to the TMPDIR, TMP, or TEMP environment\nvariables, or `/tmp` on Unix and `c:\\windows\\temp` on Windows.\n\nTemp files are given a unique folder under this root for each run of the\nprogram, and are deleted upon successful exit.\n\n### More Information\n\nWhen installing locally, npm first tries to find an appropriate\n`prefix` folder.  This is so that `npm install foo@1.2.3` will install\nto the sensible root of your package, even if you happen to have `cd`ed\ninto some other folder.\n\nStarting at the $PWD, npm will walk up the folder tree checking for a\nfolder that contains either a `package.json` file, or a `node_modules`\nfolder.  If such a thing is found, then that is treated as the effective\n\"current directory\" for the purpose of running npm commands.  (This\nbehavior is inspired by and similar to git's .git-folder seeking\nlogic when running git commands in a working dir.)\n\nIf no package root is found, then the current folder is used.\n\nWhen you run `npm install foo@1.2.3`, then the package is loaded into\nthe cache, and then unpacked into `./node_modules/foo`.  Then, any of\nfoo's dependencies are similarly unpacked into\n`./node_modules/foo/node_modules/...`.\n\nAny bin files are symlinked to `./node_modules/.bin/`, so that they may\nbe found by npm scripts when necessary.\n\n#### Global Installation\n\nIf the `global` configuration is set to true, then npm will\ninstall packages \"globally\".\n\nFor global installation, packages are installed roughly the same way,\nbut using the folders described above.\n\n#### Cycles, Conflicts, and Folder Parsimony\n\nCycles are handled using the property of node's module system that it\nwalks up the directories looking for `node_modules` folders.  So, at every\nstage, if a package is already installed in an ancestor `node_modules`\nfolder, then it is not installed at the current location.\n\nConsider the case above, where `foo -> bar -> baz`.  Imagine if, in\naddition to that, baz depended on bar, so you'd have:\n`foo -> bar -> baz -> bar -> baz ...`.  However, since the folder\nstructure is: `foo/node_modules/bar/node_modules/baz`, there's no need to\nput another copy of bar into `.../baz/node_modules`, since when it calls\nrequire(\"bar\"), it will get the copy that is installed in\n`foo/node_modules/bar`.\n\nThis shortcut is only used if the exact same\nversion would be installed in multiple nested `node_modules` folders.  It\nis still possible to have `a/node_modules/b/node_modules/a` if the two\n\"a\" packages are different versions.  However, without repeating the\nexact same package multiple times, an infinite regress will always be\nprevented.\n\nAnother optimization can be made by installing dependencies at the\nhighest level possible, below the localized \"target\" folder.\n\n#### Example\n\nConsider this dependency graph:\n\n```bash\nfoo\n+-- blerg@1.2.5\n+-- bar@1.2.3\n|   +-- blerg@1.x (latest=1.3.7)\n|   +-- baz@2.x\n|   |   `-- quux@3.x\n|   |       `-- bar@1.2.3 (cycle)\n|   `-- asdf@*\n`-- baz@1.2.3\n    `-- quux@3.x\n        `-- bar\n```\n\nIn this case, we might expect a folder structure like this:\n\n```bash\nfoo\n+-- node_modules\n    +-- blerg (1.2.5) <---[A]\n    +-- bar (1.2.3) <---[B]\n    |   `-- node_modules\n    |       +-- baz (2.0.2) <---[C]\n    |       |   `-- node_modules\n    |       |       `-- quux (3.2.0)\n    |       `-- asdf (2.3.4)\n    `-- baz (1.2.3) <---[D]\n        `-- node_modules\n            `-- quux (3.2.0) <---[E]\n```\n\nSince foo depends directly on `bar@1.2.3` and `baz@1.2.3`, those are\ninstalled in foo's `node_modules` folder.\n\nEven though the latest copy of blerg is 1.3.7, foo has a specific\ndependency on version 1.2.5.  So, that gets installed at [A].  Since the\nparent installation of blerg satisfies bar's dependency on `blerg@1.x`,\nit does not install another copy under [B].\n\nBar [B] also has dependencies on baz and asdf, so those are installed in\nbar's `node_modules` folder.  Because it depends on `baz@2.x`, it cannot\nre-use the `baz@1.2.3` installed in the parent `node_modules` folder [D],\nand must install its own copy [C].\n\nUnderneath bar, the `baz -> quux -> bar` dependency creates a cycle.\nHowever, because bar is already in quux's ancestry [B], it does not\nunpack another copy of bar into that folder.\n\nUnderneath `foo -> baz` [D], quux's [E] folder tree is empty, because its\ndependency on bar is satisfied by the parent folder copy installed at [B].\n\nFor a graphical breakdown of what is installed where, use `npm ls`.\n\n#### Publishing\n\nUpon publishing, npm will look in the `node_modules` folder.  If any of\nthe items there are not in the `bundledDependencies` array, then they will\nnot be included in the package tarball.\n\nThis allows a package maintainer to install all of their dependencies\n(and dev dependencies) locally, but only re-publish those items that\ncannot be found elsewhere.  See [`package.json`](/cli/v6/configuring-npm/package-json) for more information.\n\n### See also\n\n* [package.json](/cli/v6/configuring-npm/package-json)\n* [npm install](/cli/v6/commands/npm-install)\n* [npm pack](/cli/v6/commands/npm-pack)\n* [npm cache](/cli/v6/commands/npm-cache)\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n* [config](/cli/v6/using-npm/config)\n* [npm publish](/cli/v6/commands/npm-publish)\n"},{"id":"ac1449fc-d310-57b6-aff7-0e249eeea809","frontmatter":{"title":"Configuring npm"},"rawBody":"---\ntitle: Configuring npm\nredirect_from:\n  - configuring-npm\n  - /cli/configuring-npm\n  - /cli-documentation/configuring-npm\n  - /cli-documentation/files\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/configuring-npm/index.mdx\n---\n\n<Index depth=\"1\" />\n"},{"id":"00b0c6ef-dcfc-5f0a-8586-7cf872054577","frontmatter":{"title":"install"},"rawBody":"---\ntitle: install\nsection: 5\ndescription: Download and install node and npm\nredirect_from:\n  - /configuring-npm/install\n  - /configuring-npm/install.html\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/configuring-npm/install.md\n---\n\n### Description\n\nTo publish and install packages to and from the public npm registry, you must install Node.js and the npm command line interface using either a Node version manager or a Node installer. **We strongly recommend using a Node version manager to install Node.js and npm.** We do not recommend using a Node installer, since the Node installation process installs npm in a directory with local permissions and can cause permissions errors when you run npm packages globally.\n\n### Overview\n\n- [Checking your version of npm and Node.js](#checking-your-version-of-npm-and-node-js)\n- [Using a Node version manager to install Node.js and npm](#using-a-node-version-manager-to-install-node-js-and-npm)\n- [Using a Node installer to install Node.js and npm](#using-a-node-installer-to-install-node-js-and-npm)\n\n### Checking your version of npm and Node.js\n\nTo see if you already have Node.js and npm installed and check the installed version, run the following commands:\n\n```\nnode -v\nnpm -v\n```\n\n### Using a Node version manager to install Node.js and npm\n\nNode version managers allow you to install and switch between multiple versions of Node.js and npm on your system so you can test your applications on multiple versions of npm to ensure they work for users on different versions.\n\n#### OSX or Linux Node version managers\n\n* [nvm](https://github.com/creationix/nvm)\n* [n](https://github.com/tj/n)\n\n#### Windows Node version managers\n\n* [nodist](https://github.com/marcelklehr/nodist)\n* [nvm-windows](https://github.com/coreybutler/nvm-windows)\n\n### Using a Node installer to install Node.js and npm\n\nIf you are unable to use a Node version manager, you can use a Node installer to install both Node.js and npm on your system.\n\n* [Node.js installer](https://nodejs.org/en/download/)\n* [NodeSource installer](https://github.com/nodesource/distributions). If you use Linux, we recommend that you use a NodeSource installer.\n\n#### OS X or Windows Node installers\n\nIf you're using OS X or Windows, use one of the installers from the [Node.js download page](https://nodejs.org/en/download/). Be sure to install the version labeled **LTS**. Other versions have not yet been tested with npm.\n\n#### Linux or other operating systems Node installers\n\nIf you're using Linux or another operating system, use one of the following installers:\n\n- [NodeSource installer](https://github.com/nodesource/distributions) (recommended)\n- One of the installers on the [Node.js download page](https://nodejs.org/en/download/)\n\nOr see [this page](https://nodejs.org/en/download/package-manager/) to install npm for Linux in the way many Linux developers prefer.\n\n\n#### Less-common operating systems\n\nFor more information on installing Node.js on a variety of operating systems, see [this page][pkg-mgr].\n\n\n[pkg-mgr]: https://nodejs.org/en/download/package-manager/\n"},{"id":"a22ab565-3e28-5a40-b4df-e12a9dcd1df9","frontmatter":{"title":"npmrc"},"rawBody":"---\ntitle: npmrc\nsection: 5\ndescription: The npm config files\nredirect_from:\n  - /configuring-npm/npmrc\n  - /configuring-npm/npmrc.html\n  - /cli-documentation/files/npmrc\n  - /files/npmrc\n  - /files/npmrc.html\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/configuring-npm/npmrc.md\n---\n\n### Description\n\nnpm gets its config settings from the command line, environment\nvariables, and `npmrc` files.\n\nThe `npm config` command can be used to update and edit the contents\nof the user and global npmrc files.\n\nFor a list of available configuration options, see [config](/cli/v6/using-npm/config).\n\n### Files\n\nThe four relevant files are:\n\n* per-project config file (/path/to/my/project/.npmrc)\n* per-user config file (~/.npmrc)\n* global config file ($PREFIX/etc/npmrc)\n* npm builtin config file (/path/to/npm/npmrc)\n\nAll npm config files are an ini-formatted list of `key = value`\nparameters.  Environment variables can be replaced using\n`${VARIABLE_NAME}`. For example:\n\n```bash\nprefix = ${HOME}/.npm-packages\n```\n\nEach of these files is loaded, and config options are resolved in\npriority order.  For example, a setting in the userconfig file would\noverride the setting in the globalconfig file.\n\nArray values are specified by adding \"[]\" after the key name. For\nexample:\n\n```bash\nkey[] = \"first value\"\nkey[] = \"second value\"\n```\n\n#### Comments\n\nLines in `.npmrc` files are interpreted as comments when they begin with a `;` or `#` character. `.npmrc` files are parsed by [npm/ini](https://github.com/npm/ini), which specifies this comment syntax.\n\nFor example:\n\n```bash\n# last modified: 01 Jan 2016\n; Set a new registry for a scoped package\n@myscope:registry=https://mycustomregistry.example.org\n```\n\n#### Per-project config file\n\nWhen working locally in a project, a `.npmrc` file in the root of the\nproject (ie, a sibling of `node_modules` and `package.json`) will set\nconfig values specific to this project.\n\nNote that this only applies to the root of the project that you're\nrunning npm in.  It has no effect when your module is published.  For\nexample, you can't publish a module that forces itself to install\nglobally, or in a different location.\n\nAdditionally, this file is not read in global mode, such as when running\n`npm install -g`.\n\n#### Per-user config file\n\n`$HOME/.npmrc` (or the `userconfig` param, if set in the environment\nor on the command line)\n\n#### Global config file\n\n`$PREFIX/etc/npmrc` (or the `globalconfig` param, if set above):\nThis file is an ini-file formatted list of `key = value` parameters.\nEnvironment variables can be replaced as above.\n\n#### Built-in config file\n\n`path/to/npm/itself/npmrc`\n\nThis is an unchangeable \"builtin\" configuration file that npm keeps\nconsistent across updates.  Set fields in here using the `./configure`\nscript that comes with npm.  This is primarily for distribution\nmaintainers to override default configs in a standard and consistent\nmanner.\n\n### See also\n\n* [npm folders](/cli/v6/configuring-npm/folders)\n* [npm config](/cli/v6/commands/npm-config)\n* [config](/cli/v6/using-npm/config)\n* [package.json](/cli/v6/configuring-npm/package-json)\n* [npm](/cli/v6/commands/npm)\n"},{"id":"568a6fc8-febd-5105-8934-904fabeee747","frontmatter":{"title":"package.json"},"rawBody":"---\ntitle: package.json\nsection: 5\ndescription: Specifics of npm's package.json handling\nredirect_from:\n  - /configuring-npm/package-json\n  - /configuring-npm/package-json.html\n  - /configuring-npm/package.json\n  - /creating-a-packge-json-file\n  - /files/package.json\n  - /files/package.json.html\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/configuring-npm/package-json.md\n---\n\n### Description\n\nThis document is all you need to know about what's required in your package.json\nfile.  It must be actual JSON, not just a JavaScript object literal.\n\nA lot of the behavior described in this document is affected by the config\nsettings described in [`config`](/cli/v6/using-npm/config).\n\n### name\n\nIf you plan to publish your package, the *most* important things in your\npackage.json are the name and version fields as they will be required. The name\nand version together form an identifier that is assumed to be completely unique.\nChanges to the package should come along with changes to the version. If you don't\nplan to publish your package, the name and version fields are optional.\n\nThe name is what your thing is called.\n\nSome rules:\n\n* The name must be less than or equal to 214 characters. This includes the scope for\n  scoped packages.\n* The names of scoped packages can begin with a dot or an underscore. This is not permitted without a scope.\n* New packages must not have uppercase letters in the name.\n* The name ends up being part of a URL, an argument on the command line, and a\n  folder name. Therefore, the name can't contain any non-URL-safe characters.\n\nSome tips:\n\n* Don't use the same name as a core Node module.\n* Don't put \"js\" or \"node\" in the name.  It's assumed that it's js, since you're\n  writing a package.json file, and you can specify the engine using the \"engines\"\n  field.  (See below.)\n* The name will probably be passed as an argument to require(), so it should\n  be something short, but also reasonably descriptive.\n* You may want to check the npm registry to see if there's something by that name\n  already, before you get too attached to it. <https://www.npmjs.com/>\n\nA name can be optionally prefixed by a scope, e.g. `@myorg/mypackage`. See\n[`scope`](/cli/v6/using-npm/scope) for more detail.\n\n### version\n\nIf you plan to publish your package, the *most* important things in your\npackage.json are the name and version fields as they will be required. The name\nand version together form an identifier that is assumed to be completely unique.\nChanges to the package should come along with changes to the version. If you don't\nplan to publish your package, the name and version fields are optional.\n\nVersion must be parseable by\n[node-semver](https://github.com/isaacs/node-semver), which is bundled\nwith npm as a dependency.  (`npm install semver` to use it yourself.)\n\nMore on version numbers and ranges at [semver](/cli/v6/using-npm/semver).\n\n### description\n\nPut a description in it.  It's a string.  This helps people discover your\npackage, as it's listed in `npm search`.\n\n### keywords\n\nPut keywords in it.  It's an array of strings.  This helps people\ndiscover your package as it's listed in `npm search`.\n\n### homepage\n\nThe url to the project homepage.\n\nExample:\n\n```json\n\"homepage\": \"https://github.com/owner/project#readme\"\n```\n\n### bugs\n\nThe url to your project's issue tracker and / or the email address to which\nissues should be reported. These are helpful for people who encounter issues\nwith your package.\n\nIt should look like this:\n\n```json\n{ \"url\" : \"https://github.com/owner/project/issues\"\n, \"email\" : \"project@hostname.com\"\n}\n```\n\nYou can specify either one or both values. If you want to provide only a url,\nyou can specify the value for \"bugs\" as a simple string instead of an object.\n\nIf a url is provided, it will be used by the `npm bugs` command.\n\n### license\n\nYou should specify a license for your package so that people know how they are\npermitted to use it, and any restrictions you're placing on it.\n\nIf you're using a common license such as BSD-2-Clause or MIT, add a\ncurrent SPDX license identifier for the license you're using, like this:\n\n```json\n{ \"license\" : \"BSD-3-Clause\" }\n```\n\nYou can check [the full list of SPDX license IDs](https://spdx.org/licenses/).\nIdeally you should pick one that is\n[OSI](https://opensource.org/licenses/alphabetical) approved.\n\nIf your package is licensed under multiple common licenses, use an [SPDX license\nexpression syntax version 2.0 string](https://www.npmjs.com/package/spdx), like this:\n\n```json\n{ \"license\" : \"(ISC OR GPL-3.0)\" }\n```\nIf you are using a license that hasn't been assigned an SPDX identifier, or if\nyou are using a custom license, use a string value like this one:\n\n```json\n{ \"license\" : \"SEE LICENSE IN <filename>\" }\n```\nThen include a file named `<filename>` at the top level of the package.\n\nSome old packages used license objects or a \"licenses\" property containing an\narray of license objects:\n\n```json\n// Not valid metadata\n{ \"license\" :\n  { \"type\" : \"ISC\"\n  , \"url\" : \"https://opensource.org/licenses/ISC\"\n  }\n}\n\n// Not valid metadata\n{ \"licenses\" :\n  [\n    { \"type\": \"MIT\"\n    , \"url\": \"https://www.opensource.org/licenses/mit-license.php\"\n    }\n  , { \"type\": \"Apache-2.0\"\n    , \"url\": \"https://opensource.org/licenses/apache2.0.php\"\n    }\n  ]\n}\n```\n\nThose styles are now deprecated. Instead, use SPDX expressions, like this:\n\n```json\n{ \"license\": \"ISC\" }\n\n{ \"license\": \"(MIT OR Apache-2.0)\" }\n```\n\nFinally, if you do not wish to grant others the right to use a private or\nunpublished package under any terms:\n\n```json\n{ \"license\": \"UNLICENSED\" }\n```\nConsider also setting `\"private\": true` to prevent accidental publication.\n\n### people fields: author, contributors\n\nThe \"author\" is one person.  \"contributors\" is an array of people.  A \"person\"\nis an object with a \"name\" field and optionally \"url\" and \"email\", like this:\n\n```json\n{ \"name\" : \"Barney Rubble\"\n, \"email\" : \"b@rubble.com\"\n, \"url\" : \"http://barnyrubble.tumblr.com/\"\n}\n```\n\nOr you can shorten that all into a single string, and npm will parse it for you:\n\n```json\n\"Barney Rubble <b@rubble.com> (http://barnyrubble.tumblr.com/)\"\n```\n\nBoth email and url are optional either way.\n\nnpm also sets a top-level \"maintainers\" field with your npm user info.\n\n### funding\n\nYou can specify an object containing an URL that provides up-to-date\ninformation about ways to help fund development of your package, or\na string URL, or an array of these:\n\n    \"funding\": {\n      \"type\" : \"individual\",\n      \"url\" : \"http://example.com/donate\"\n    }\n\n    \"funding\": {\n      \"type\" : \"patreon\",\n      \"url\" : \"https://www.patreon.com/my-account\"\n    }\n\n    \"funding\": \"http://example.com/donate\"\n\n    \"funding\": [\n      {\n        \"type\" : \"individual\",\n        \"url\" : \"http://example.com/donate\"\n      },\n      \"http://example.com/donateAlso\",\n      {\n        \"type\" : \"patreon\",\n        \"url\" : \"https://www.patreon.com/my-account\"\n      }\n    ]\n\n\nUsers can use the `npm fund` subcommand to list the `funding` URLs of all\ndependencies of their project, direct and indirect. A shortcut to visit each\nfunding url is also available when providing the project name such as:\n`npm fund <projectname>` (when there are multiple URLs, the first one will be\nvisited)\n\n### files\n\nThe optional `files` field is an array of file patterns that describes\nthe entries to be included when your package is installed as a\ndependency. File patterns follow a similar syntax to `.gitignore`, but\nreversed: including a file, directory, or glob pattern (`*`, `**/*`, and such)\nwill make it so that file is included in the tarball when it's packed. Omitting\nthe field will make it default to `[\"*\"]`, which means it will include all files.\n\nSome special files and directories are also included or excluded regardless of\nwhether they exist in the `files` array (see below).\n\nYou can also provide a `.npmignore` file in the root of your package or\nin subdirectories, which will keep files from being included. At the\nroot of your package it will not override the \"files\" field, but in\nsubdirectories it will. The `.npmignore` file works just like a\n`.gitignore`. If there is a `.gitignore` file, and `.npmignore` is\nmissing, `.gitignore`'s contents will be used instead.\n\nFiles included with the \"package.json#files\" field _cannot_ be excluded\nthrough `.npmignore` or `.gitignore`.\n\nCertain files are always included, regardless of settings:\n\n* `package.json`\n* `README`\n* `CHANGES` / `CHANGELOG` / `HISTORY`\n* `LICENSE` / `LICENCE`\n* `NOTICE`\n* The file in the \"main\" field\n\n`README`, `CHANGES`, `LICENSE` & `NOTICE` can have any case and extension.\n\nConversely, some files are always ignored:\n\n* `.git`\n* `CVS`\n* `.svn`\n* `.hg`\n* `.lock-wscript`\n* `.wafpickle-N`\n* `.DS_Store`\n* `npm-debug.log`\n* `.npmrc`\n* `node_modules`\n* `config.gypi`\n* `package-lock.json` (use shrinkwrap instead)\n* All files containing a `*` character (incompatible with Windows) \n\n### main\n\nThe main field is a module ID that is the primary entry point to your program.\nThat is, if your package is named `foo`, and a user installs it, and then does\n`require(\"foo\")`, then your main module's exports object will be returned.\n\nThis should be a module ID relative to the root of your package folder.\n\nFor most modules, it makes the most sense to have a main script and often not\nmuch else.\n\n### browser\n\nIf your module is meant to be used client-side the browser field should be\nused instead of the main field. This is helpful to hint users that it might\nrely on primitives that aren't available in Node.js modules. (e.g. `window`)\n\n### bin\n\nA lot of packages have one or more executable files that they'd like to\ninstall into the PATH. npm makes this pretty easy (in fact, it uses this\nfeature to install the \"npm\" executable.)\n\nTo use this, supply a `bin` field in your package.json which is a map of\ncommand name to local file name. On install, npm will symlink that file into\n`prefix/bin` for global installs, or `./node_modules/.bin/` for local\ninstalls.\n\n\nFor example, myapp could have this:\n\n```json\n{ \"bin\" : { \"myapp\" : \"./cli.js\" } }\n```\n\nSo, when you install myapp, it'll create a symlink from the `cli.js` script to\n`/usr/local/bin/myapp`.\n\nIf you have a single executable, and its name should be the name\nof the package, then you can just supply it as a string.  For example:\n\n```json\n{ \"name\": \"my-program\"\n, \"version\": \"1.2.5\"\n, \"bin\": \"./path/to/program\" }\n```\n\nwould be the same as this:\n\n```json\n{ \"name\": \"my-program\"\n, \"version\": \"1.2.5\"\n, \"bin\" : { \"my-program\" : \"./path/to/program\" } }\n```\n\nPlease make sure that your file(s) referenced in `bin` starts with\n`#!/usr/bin/env node`, otherwise the scripts are started without the node\nexecutable!\n\n### man\n\nSpecify either a single file or an array of filenames to put in place for the\n`man` program to find.\n\nIf only a single file is provided, then it's installed such that it is the\nresult from `man <pkgname>`, regardless of its actual filename.  For example:\n\n```json\n{ \"name\" : \"foo\"\n, \"version\" : \"1.2.3\"\n, \"description\" : \"A packaged foo fooer for fooing foos\"\n, \"main\" : \"foo.js\"\n, \"man\" : \"./man/doc.1\"\n}\n```\n\nwould link the `./man/doc.1` file in such that it is the target for `man foo`\n\nIf the filename doesn't start with the package name, then it's prefixed.\nSo, this:\n\n```json\n{ \"name\" : \"foo\"\n, \"version\" : \"1.2.3\"\n, \"description\" : \"A packaged foo fooer for fooing foos\"\n, \"main\" : \"foo.js\"\n, \"man\" : [ \"./man/foo.1\", \"./man/bar.1\" ]\n}\n```\n\nwill create files to do `man foo` and `man foo-bar`.\n\nMan files must end with a number, and optionally a `.gz` suffix if they are\ncompressed.  The number dictates which man section the file is installed into.\n\n```json\n{ \"name\" : \"foo\"\n, \"version\" : \"1.2.3\"\n, \"description\" : \"A packaged foo fooer for fooing foos\"\n, \"main\" : \"foo.js\"\n, \"man\" : [ \"./man/foo.1\", \"./man/foo.2\" ]\n}\n```\nwill create entries for `man foo` and `man 2 foo`\n\n### directories\n\nThe CommonJS [Packages](http://wiki.commonjs.org/wiki/Packages/1.0) spec details a\nfew ways that you can indicate the structure of your package using a `directories`\nobject. If you look at [npm's package.json](https://registry.npmjs.org/npm/latest),\nyou'll see that it has directories for doc, lib, and man.\n\nIn the future, this information may be used in other creative ways.\n\n#### directories.lib\n\nTell people where the bulk of your library is.  Nothing special is done\nwith the lib folder in any way, but it's useful meta info.\n\n#### directories.bin\n\nIf you specify a `bin` directory in `directories.bin`, all the files in\nthat folder will be added.\n\nBecause of the way the `bin` directive works, specifying both a\n`bin` path and setting `directories.bin` is an error. If you want to\nspecify individual files, use `bin`, and for all the files in an\nexisting `bin` directory, use `directories.bin`.\n\n#### directories.man\n\nA folder that is full of man pages.  Sugar to generate a \"man\" array by\nwalking the folder.\n\n#### directories.doc\n\nPut markdown files in here.  Eventually, these will be displayed nicely,\nmaybe, someday.\n\n#### directories.example\n\nPut example scripts in here.  Someday, it might be exposed in some clever way.\n\n#### directories.test\n\nPut your tests in here. It is currently not exposed, but it might be in the\nfuture.\n\n### repository\n\nSpecify the place where your code lives. This is helpful for people who\nwant to contribute.  If the git repo is on GitHub, then the `npm docs`\ncommand will be able to find you.\n\nDo it like this:\n\n```json\n\"repository\": {\n  \"type\" : \"git\",\n  \"url\" : \"https://github.com/npm/cli.git\"\n}\n\n\"repository\": {\n  \"type\" : \"svn\",\n  \"url\" : \"https://v8.googlecode.com/svn/trunk/\"\n}\n```\n\nThe URL should be a publicly available (perhaps read-only) url that can be handed\ndirectly to a VCS program without any modification.  It should not be a url to an\nhtml project page that you put in your browser.  It's for computers.\n\nFor GitHub, GitHub gist, Bitbucket, or GitLab repositories you can use the same\nshortcut syntax you use for `npm install`:\n\n```json\n\"repository\": \"npm/npm\"\n\n\"repository\": \"github:user/repo\"\n\n\"repository\": \"gist:11081aaa281\"\n\n\"repository\": \"bitbucket:user/repo\"\n\n\"repository\": \"gitlab:user/repo\"\n```\n\nIf the `package.json` for your package is not in the root directory (for example\nif it is part of a monorepo), you can specify the directory in which it lives:\n\n```json\n\"repository\": {\n  \"type\" : \"git\",\n  \"url\" : \"https://github.com/facebook/react.git\",\n  \"directory\": \"packages/react-dom\"\n}\n```\n\n### scripts\n\nThe \"scripts\" property is a dictionary containing script commands that are run\nat various times in the lifecycle of your package.  The key is the lifecycle\nevent, and the value is the command to run at that point.\n\nSee [`scripts`](/cli/v6/using-npm/scripts) to find out more about writing package scripts.\n\n### config\n\nA \"config\" object can be used to set configuration parameters used in package\nscripts that persist across upgrades.  For instance, if a package had the\nfollowing:\n\n```json\n{ \"name\" : \"foo\"\n, \"config\" : { \"port\" : \"8080\" } }\n```\n\nand then had a \"start\" command that then referenced the\n`npm_package_config_port` environment variable, then the user could\noverride that by doing `npm config set foo:port 8001`.\n\nSee [`config`](/cli/v6/using-npm/config) and [`scripts`](/cli/v6/using-npm/scripts) for more on package\nconfigs.\n\n### dependencies\n\nDependencies are specified in a simple object that maps a package name to a\nversion range. The version range is a string which has one or more\nspace-separated descriptors.  Dependencies can also be identified with a\ntarball or git URL.\n\n**Please do not put test harnesses or transpilers in your\n`dependencies` object.**  See `devDependencies`, below.\n\nSee [semver](/cli/v6/using-npm/semver) for more details about specifying version ranges.\n\n* `version` Must match `version` exactly\n* `>version` Must be greater than `version`\n* `>=version` etc\n* `<version`\n* `<=version`\n* `~version` \"Approximately equivalent to version\"  See [semver](/cli/v6/using-npm/semver)\n* `^version` \"Compatible with version\"  See [semver](/cli/v6/using-npm/semver)\n* `1.2.x` 1.2.0, 1.2.1, etc., but not 1.3.0\n* `http://...` See 'URLs as Dependencies' below\n* `*` Matches any version\n* `\"\"` (just an empty string) Same as `*`\n* `version1 - version2` Same as `>=version1 <=version2`.\n* `range1 || range2` Passes if either range1 or range2 are satisfied.\n* `git...` See 'Git URLs as Dependencies' below\n* `user/repo` See 'GitHub URLs' below\n* `tag` A specific version tagged and published as `tag`  See [`npm dist-tag`](/cli/v6/commands/npm-dist-tag)\n* `path/path/path` See [Local Paths](#local-paths) below\n\nFor example, these are all valid:\n\n```json\n{ \"dependencies\" :\n  { \"foo\" : \"1.0.0 - 2.9999.9999\"\n  , \"bar\" : \">=1.0.2 <2.1.2\"\n  , \"baz\" : \">1.0.2 <=2.3.4\"\n  , \"boo\" : \"2.0.1\"\n  , \"qux\" : \"<1.0.0 || >=2.3.1 <2.4.5 || >=2.5.2 <3.0.0\"\n  , \"asd\" : \"http://asdf.com/asdf.tar.gz\"\n  , \"til\" : \"~1.2\"\n  , \"elf\" : \"~1.2.3\"\n  , \"two\" : \"2.x\"\n  , \"thr\" : \"3.3.x\"\n  , \"lat\" : \"latest\"\n  , \"dyl\" : \"file:../dyl\"\n  }\n}\n```\n\n#### URLs as Dependencies\n\nYou may specify a tarball URL in place of a version range.\n\nThis tarball will be downloaded and installed locally to your package at\ninstall time.\n\n#### Git URLs as Dependencies\n\nGit urls are of the form:\n\n```bash\n<protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish> | #semver:<semver>]\n```\n\n`<protocol>` is one of `git`, `git+ssh`, `git+http`, `git+https`, or\n`git+file`.\n\nIf `#<commit-ish>` is provided, it will be used to clone exactly that\ncommit. If the commit-ish has the format `#semver:<semver>`, `<semver>` can\nbe any valid semver range or exact version, and npm will look for any tags\nor refs matching that range in the remote repository, much as it would for a\nregistry dependency. If neither `#<commit-ish>` or `#semver:<semver>` is\nspecified, then `master` is used.\n\nExamples:\n\n```bash\ngit+ssh://git@github.com:npm/cli.git#v1.0.27\ngit+ssh://git@github.com:npm/cli#semver:^5.0\ngit+https://isaacs@github.com/npm/cli.git\ngit://github.com/npm/cli.git#v1.0.27\n```\n\n#### GitHub URLs\n\nAs of version 1.1.65, you can refer to GitHub urls as just \"foo\":\n\"user/foo-project\".  Just as with git URLs, a `commit-ish` suffix can be\nincluded.  For example:\n\n```json\n{\n  \"name\": \"foo\",\n  \"version\": \"0.0.0\",\n  \"dependencies\": {\n    \"express\": \"expressjs/express\",\n    \"mocha\": \"mochajs/mocha#4727d357ea\",\n    \"module\": \"user/repo#feature\\/branch\"\n  }\n}\n```\n\n#### Local Paths\n\nAs of version 2.0.0 you can provide a path to a local directory that contains a\npackage. Local paths can be saved using `npm install -S` or\n`npm install --save`, using any of these forms:\n\n```bash\n../foo/bar\n~/foo/bar\n./foo/bar\n/foo/bar\n```\n\nin which case they will be normalized to a relative path and added to your\n`package.json`. For example:\n\n```json\n{\n  \"name\": \"baz\",\n  \"dependencies\": {\n    \"bar\": \"file:../foo/bar\"\n  }\n}\n```\n\nThis feature is helpful for local offline development and creating\ntests that require npm installing where you don't want to hit an\nexternal server, but should not be used when publishing packages\nto the public registry.\n\n### devDependencies\n\nIf someone is planning on downloading and using your module in their\nprogram, then they probably don't want or need to download and build\nthe external test or documentation framework that you use.\n\nIn this case, it's best to map these additional items in a `devDependencies`\nobject.\n\nThese things will be installed when doing `npm link` or `npm install`\nfrom the root of a package, and can be managed like any other npm\nconfiguration param.  See [`config`](/cli/v6/using-npm/config) for more on the topic.\n\nFor build steps that are not platform-specific, such as compiling\nCoffeeScript or other languages to JavaScript, use the `prepare`\nscript to do this, and make the required package a devDependency.\n\nFor example:\n\n```json\n{ \"name\": \"ethopia-waza\",\n  \"description\": \"a delightfully fruity coffee varietal\",\n  \"version\": \"1.2.3\",\n  \"devDependencies\": {\n    \"coffee-script\": \"~1.6.3\"\n  },\n  \"scripts\": {\n    \"prepare\": \"coffee -o lib/ -c src/waza.coffee\"\n  },\n  \"main\": \"lib/waza.js\"\n}\n```\n\nThe `prepare` script will be run before publishing, so that users\ncan consume the functionality without requiring them to compile it\nthemselves.  In dev mode (ie, locally running `npm install`), it'll\nrun this script as well, so that you can test it easily.\n\n### peerDependencies\n\nIn some cases, you want to express the compatibility of your package with a\nhost tool or library, while not necessarily doing a `require` of this host.\nThis is usually referred to as a *plugin*. Notably, your module may be exposing\na specific interface, expected and specified by the host documentation.\n\nFor example:\n\n```json\n{\n  \"name\": \"tea-latte\",\n  \"version\": \"1.3.5\",\n  \"peerDependencies\": {\n    \"tea\": \"2.x\"\n  }\n}\n```\n\nThis ensures your package `tea-latte` can be installed *along* with the second\nmajor version of the host package `tea` only. `npm install tea-latte` could\npossibly yield the following dependency graph:\n\n```bash\n├── tea-latte@1.3.5\n└── tea@2.2.0\n```\n\n**NOTE: npm versions 1 and 2 will automatically install `peerDependencies` if\nthey are not explicitly depended upon higher in the dependency tree. In the\nnext major version of npm (npm@3), this will no longer be the case. You will\nreceive a warning that the peerDependency is not installed instead.** The\nbehavior in npms 1 & 2 was frequently confusing and could easily put you into\ndependency hell, a situation that npm is designed to avoid as much as possible.\n\nTrying to install another plugin with a conflicting requirement will cause an\nerror. For this reason, make sure your plugin requirement is as broad as\npossible, and not to lock it down to specific patch versions.\n\nAssuming the host complies with [semver](https://semver.org/), only changes in\nthe host package's major version will break your plugin. Thus, if you've worked\nwith every 1.x version of the host package, use `\"^1.0\"` or `\"1.x\"` to express\nthis. If you depend on features introduced in 1.5.2, use `\">= 1.5.2 < 2\"`.\n\n### bundledDependencies\n\nThis defines an array of package names that will be bundled when publishing\nthe package.\n\nIn cases where you need to preserve npm packages locally or have them\navailable through a single file download, you can bundle the packages in a\ntarball file by specifying the package names in the `bundledDependencies`\narray and executing `npm pack`.\n\nFor example:\n\nIf we define a package.json like this:\n\n```json\n{\n  \"name\": \"awesome-web-framework\",\n  \"version\": \"1.0.0\",\n  \"bundledDependencies\": [\n    \"renderized\", \"super-streams\"\n  ]\n}\n```\nwe can obtain `awesome-web-framework-1.0.0.tgz` file by running `npm pack`.\nThis file contains the dependencies `renderized` and `super-streams` which\ncan be installed in a new project by executing `npm install\nawesome-web-framework-1.0.0.tgz`.  Note that the package names do not include\nany versions, as that information is specified in `dependencies`.\n\nIf this is spelled `\"bundleDependencies\"`, then that is also honored.\n\n### optionalDependencies\n\nIf a dependency can be used, but you would like npm to proceed if it cannot be\nfound or fails to install, then you may put it in the `optionalDependencies`\nobject.  This is a map of package name to version or url, just like the\n`dependencies` object.  The difference is that build failures do not cause\ninstallation to fail.  Running `npm install --no-optional` will prevent these\ndependencies from being installed.\n\nIt is still your program's responsibility to handle the lack of the\ndependency.  For example, something like this:\n\n```js\ntry {\n  var foo = require('foo')\n  var fooVersion = require('foo/package.json').version\n} catch (er) {\n  foo = null\n}\nif ( notGoodFooVersion(fooVersion) ) {\n  foo = null\n}\n\n// .. then later in your program ..\n\nif (foo) {\n  foo.doFooThings()\n}\n```\n\nEntries in `optionalDependencies` will override entries of the same name in\n`dependencies`, so it's usually best to only put in one place.\n\n### engines\n\nYou can specify the version of node that your stuff works on:\n\n```json\n{ \"engines\" : { \"node\" : \">=0.10.3 <0.12\" } }\n```\n\nAnd, like with dependencies, if you don't specify the version (or if you\nspecify \"\\*\" as the version), then any version of node will do.\n\nIf you specify an \"engines\" field, then npm will require that \"node\" be\nsomewhere on that list. If \"engines\" is omitted, then npm will just assume\nthat it works on node.\n\nYou can also use the \"engines\" field to specify which versions of npm\nare capable of properly installing your program.  For example:\n\n```json\n{ \"engines\" : { \"npm\" : \"~1.0.20\" } }\n```\n\nUnless the user has set the `engine-strict` config flag, this\nfield is advisory only and will only produce warnings when your package is installed as a dependency.\n\n### engineStrict\n\n**This feature was removed in npm 3.0.0**\n\nPrior to npm 3.0.0, this feature was used to treat this package as if the\nuser had set `engine-strict`. It is no longer used.\n\n### os\n\nYou can specify which operating systems your\nmodule will run on:\n\n```json\n\"os\" : [ \"darwin\", \"linux\" ]\n```\n\nYou can also blacklist instead of whitelist operating systems,\njust prepend the blacklisted os with a '!':\n\n```json\n\"os\" : [ \"!win32\" ]\n```\n\nThe host operating system is determined by `process.platform`\n\nIt is allowed to both blacklist, and whitelist, although there isn't any\ngood reason to do this.\n\n### cpu\n\nIf your code only runs on certain cpu architectures,\nyou can specify which ones.\n\n```json\n\"cpu\" : [ \"x64\", \"ia32\" ]\n```\n\nLike the `os` option, you can also blacklist architectures:\n\n```json\n\"cpu\" : [ \"!arm\", \"!mips\" ]\n```\n\nThe host architecture is determined by `process.arch`\n\n### preferGlobal\n\n**DEPRECATED**\n\nThis option used to trigger an npm warning, but it will no longer warn. It is\npurely there for informational purposes. It is now recommended that you install\nany binaries as local devDependencies wherever possible.\n\n### private\n\nIf you set `\"private\": true` in your package.json, then npm will refuse\nto publish it.\n\nThis is a way to prevent accidental publication of private repositories.  If\nyou would like to ensure that a given package is only ever published to a\nspecific registry (for example, an internal registry), then use the\n`publishConfig` dictionary described below to override the `registry` config\nparam at publish-time.\n\n### publishConfig\n\nThis is a set of config values that will be used at publish-time. It's\nespecially handy if you want to set the tag, registry or access, so that\nyou can ensure that a given package is not tagged with \"latest\", published\nto the global public registry or that a scoped module is private by default.\n\nAny config values can be overridden, but only \"tag\", \"registry\" and \"access\"\nprobably matter for the purposes of publishing.\n\nSee [`config`](/cli/v6/using-npm/config) to see the list of config options that can be\noverridden.\n\n### DEFAULT VALUES\n\nnpm will default some values based on package contents.\n\n* `\"scripts\": {\"start\": \"node server.js\"}`\n\n  If there is a `server.js` file in the root of your package, then npm\n  will default the `start` command to `node server.js`.\n\n* `\"scripts\":{\"install\": \"node-gyp rebuild\"}`\n\n  If there is a `binding.gyp` file in the root of your package and you have not defined an `install` or `preinstall` script, npm will\n  default the `install` command to compile using node-gyp.\n\n* `\"contributors\": [...]`\n\n  If there is an `AUTHORS` file in the root of your package, npm will\n  treat each line as a `Name <email> (url)` format, where email and url\n  are optional.  Lines which start with a `#` or are blank, will be\n  ignored.\n\n### SEE ALSO\n\n* [semver](/cli/v6/using-npm/semver)\n* [npm init](/cli/v6/commands/npm-init)\n* [npm version](/cli/v6/commands/npm-version)\n* [npm config](/cli/v6/commands/npm-config)\n* [npm help](/cli/v6/commands/npm-help)\n* [npm install](/cli/v6/commands/npm-install)\n* [npm publish](/cli/v6/commands/npm-publish)\n* [npm uninstall](/cli/v6/commands/npm-uninstall)\n"},{"id":"16d9c3d5-46db-5161-b5d9-0ab0e248c348","frontmatter":{"title":"package-lock.json"},"rawBody":"---\ntitle: package-lock.json\nsection: 5\ndescription: A manifestation of the manifest\nredirect_from:\n  - /configuring-npm/package-lock-json\n  - /configuring-npm/package-lock-json.html\n  - /files/package-lock.json\n  - /files/package-lock.json.html\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/configuring-npm/package-lock-json.md\n---\n\n### Description\n\n`package-lock.json` is automatically generated for any operations where npm\nmodifies either the `node_modules` tree, or `package.json`. It describes the\nexact tree that was generated, such that subsequent installs are able to\ngenerate identical trees, regardless of intermediate dependency updates.\n\nThis file is intended to be committed into source repositories, and serves\nvarious purposes:\n\n* Describe a single representation of a dependency tree such that teammates, deployments, and continuous integration are guaranteed to install exactly the same dependencies.\n\n* Provide a facility for users to \"time-travel\" to previous states of `node_modules` without having to commit the directory itself.\n\n* To facilitate greater visibility of tree changes through readable source control diffs.\n\n* And optimize the installation process by allowing npm to skip repeated metadata resolutions for previously-installed packages.\n\nOne key detail about `package-lock.json` is that it cannot be published, and it\nwill be ignored if found in any place other than the toplevel package. It shares\na format with [npm-shrinkwrap.json](/cli/v6/configuring-npm/shrinkwrap-json), which is essentially the same file, but\nallows publication. This is not recommended unless deploying a CLI tool or\notherwise using the publication process for producing production packages.\n\nIf both `package-lock.json` and `npm-shrinkwrap.json` are present in the root of\na package, `package-lock.json` will be completely ignored.\n\n\n### File Format\n\n#### name\n\nThe name of the package this is a package-lock for. This must match what's in\n`package.json`.\n\n#### version\n\nThe version of the package this is a package-lock for. This must match what's in\n`package.json`.\n\n#### lockfileVersion\n\nAn integer version, starting at `1` with the version number of this document\nwhose semantics were used when generating this `package-lock.json`.\n\n#### packageIntegrity\n\nThis is a [subresource\nintegrity](https://w3c.github.io/webappsec/specs/subresourceintegrity/) value\ncreated from the `package.json`. No preprocessing of the `package.json` should\nbe done. Subresource integrity strings can be produced by modules like\n[`ssri`](https://www.npmjs.com/package/ssri).\n\n#### preserveSymlinks\n\nIndicates that the install was done with the environment variable\n`NODE_PRESERVE_SYMLINKS` enabled. The installer should insist that the value of\nthis property match that environment variable.\n\n#### dependencies\n\nA mapping of package name to dependency object.  Dependency objects have the\nfollowing properties:\n\n##### version\n\nThis is a specifier that uniquely identifies this package and should be\nusable in fetching a new copy of it.\n\n* bundled dependencies: Regardless of source, this is a version number that is purely for informational purposes.\n* registry sources: This is a version number. (eg, `1.2.3`)\n* git sources: This is a git specifier with resolved committish. (eg, `git+https://example.com/foo/bar#115311855adb0789a0466714ed48a1499ffea97e`)\n* http tarball sources: This is the URL of the tarball. (eg, `https://example.com/example-1.3.0.tgz`)\n* local tarball sources: This is the file URL of the tarball. (eg `file:///opt/storage/example-1.3.0.tgz`)\n* local link sources: This is the file URL of the link. (eg `file:libs/our-module`)\n\n##### integrity\n\nThis is a [Standard Subresource\nIntegrity](https://w3c.github.io/webappsec/specs/subresourceintegrity/) for this\nresource.\n\n* For bundled dependencies this is not included, regardless of source.\n* For registry sources, this is the `integrity` that the registry provided, or if one wasn't provided the SHA1 in `shasum`.\n* For git sources this is the specific commit hash we cloned from.\n* For remote tarball sources this is an integrity based on a SHA512 of\n  the file.\n* For local tarball sources: This is an integrity field based on the SHA512 of the file.\n\n##### resolved\n\n* For bundled dependencies this is not included, regardless of source.\n* For registry sources this is path of the tarball relative to the registry\n  URL.  If the tarball URL isn't on the same server as the registry URL then\n  this is a complete URL.\n\n##### bundled\n\nIf true, this is the bundled dependency and will be installed by the parent\nmodule.  When installing, this module will be extracted from the parent\nmodule during the extract phase, not installed as a separate dependency.\n\n##### dev\n\nIf true then this dependency is either a development dependency ONLY of the\ntop level module or a transitive dependency of one.  This is false for\ndependencies that are both a development dependency of the top level and a\ntransitive dependency of a non-development dependency of the top level.\n\n##### optional\n\nIf true then this dependency is either an optional dependency ONLY of the\ntop level module or a transitive dependency of one.  This is false for\ndependencies that are both an optional dependency of the top level and a\ntransitive dependency of a non-optional dependency of the top level.\n\nAll optional dependencies should be included even if they're uninstallable\non the current platform.\n\n\n##### requires\n\nThis is a mapping of module name to version.  This is a list of everything\nthis module requires, regardless of where it will be installed.  The version\nshould match via normal matching rules a dependency either in our\n`dependencies` or in a level higher than us.\n\n\n##### dependencies\n\nThe dependencies of this dependency, exactly as at the top level.\n\n### See also\n\n* [npm shrinkwrap](/cli/v6/commands/npm-shrinkwrap)\n* [shrinkwrap.json](/cli/v6/configuring-npm/shrinkwrap-json)\n* [package-locks](/cli/v6/configuring-npm/package-locks)\n* [package.json](/cli/v6/configuring-npm/package-json)\n* [npm install](/cli/v6/commands/npm-install)\n"},{"id":"1e23fd8f-c55b-587b-b99d-adf5980cfcd9","frontmatter":{"title":"package-locks"},"rawBody":"---\ntitle: package-locks\nsection: 5\ndescription: An explanation of npm lockfiles\nredirect_from:\n  - /configuring-npm/package-locks\n  - /configuring-npm/package-locks.html\n  - /files/package-locks\n  - /files/package-locks.html\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/configuring-npm/package-locks.md\n---\n\n### Description\n\nConceptually, the \"input\" to [`npm install`](/cli/v6/commands/npm-install) is a [package.json](/cli/v6/configuring-npm/package-json), while its\n\"output\" is a fully-formed `node_modules` tree: a representation of the\ndependencies you declared. In an ideal world, npm would work like a pure\nfunction: the same `package.json` should produce the exact same `node_modules`\ntree, any time. In some cases, this is indeed true. But in many others, npm is\nunable to do this. There are multiple reasons for this:\n\n* different versions of npm (or other package managers) may have been used to install a package, each using slightly different installation algorithms.\n\n* a new version of a direct semver-range package may have been published since the last time your packages were installed, and thus a newer version will be used.\n\n* A dependency of one of your dependencies may have published a new version, which will update even if you used pinned dependency specifiers (`1.2.3` instead of `^1.2.3`)\n\n* The registry you installed from is no longer available, or allows mutation of versions (unlike the primary npm registry), and a different version of a package exists under the same version number now.\n\nAs an example, consider package A:\n\n```json\n{\n  \"name\": \"A\",\n  \"version\": \"0.1.0\",\n  \"dependencies\": {\n    \"B\": \"<0.1.0\"\n  }\n}\n```\n\npackage B:\n\n```json\n{\n  \"name\": \"B\",\n  \"version\": \"0.0.1\",\n  \"dependencies\": {\n    \"C\": \"<0.1.0\"\n  }\n}\n```\n\nand package C:\n```json\n{\n  \"name\": \"C\",\n  \"version\": \"0.0.1\"\n}\n```\n\nIf these are the only versions of A, B, and C available in the\nregistry, then a normal `npm install A` will install:\n\n```json\nA@0.1.0\n`-- B@0.0.1\n    `-- C@0.0.1\n```\n\nHowever, if B@0.0.2 is published, then a fresh `npm install A` will\ninstall:\n\n```bash\nA@0.1.0\n`-- B@0.0.2\n    `-- C@0.0.1\n```\n\nassuming the new version did not modify B's dependencies. Of course,\nthe new version of B could include a new version of C and any number\nof new dependencies. If such changes are undesirable, the author of A\ncould specify a dependency on B@0.0.1. However, if A's author and B's\nauthor are not the same person, there's no way for A's author to say\nthat he or she does not want to pull in newly published versions of C\nwhen B hasn't changed at all.\n\nTo prevent this potential issue, npm uses [package-lock.json](/cli/v6/configuring-npm/package-lock-json) or, if present, [npm-shrinkwrap.json](/cli/v6/configuring-npm/shrinkwrap-json). These files are called package locks, or lockfiles.\n\nWhenever you run `npm install`, npm generates or updates your package lock,\nwhich will look something like this:\n\n```json\n{\n  \"name\": \"A\",\n  \"version\": \"0.1.0\",\n  ...metadata fields...\n  \"dependencies\": {\n    \"B\": {\n      \"version\": \"0.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/B/-/B-0.0.1.tgz\",\n      \"integrity\": \"sha512-DeAdb33F+\"\n      \"dependencies\": {\n        \"C\": {\n          \"version\": \"git://github.com/org/C.git#5c380ae319fc4efe9e7f2d9c78b0faa588fd99b4\"\n        }\n      }\n    }\n  }\n}\n```\n\nThis file describes an *exact*, and more importantly *reproducible*\n`node_modules` tree. Once it's present, any future installation will base its\nwork off this file, instead of recalculating dependency versions off\n[package.json](/cli/v6/configuring-npm/package-json).\n\nThe presence of a package lock changes the installation behavior such that:\n\n1. The module tree described by the package lock is reproduced. This means\nreproducing the structure described in the file, using the specific files\nreferenced in \"resolved\" if available, falling back to normal package resolution\nusing \"version\" if one isn't.\n\n2. The tree is walked and any missing dependencies are installed in the usual\nfashion.\n\nIf `preshrinkwrap`, `shrinkwrap` or `postshrinkwrap` are in the `scripts`\nproperty of the `package.json`, they will be executed in order. `preshrinkwrap`\nand `shrinkwrap` are executed before the shrinkwrap, `postshrinkwrap` is\nexecuted afterwards. These scripts run for both `package-lock.json` and\n`npm-shrinkwrap.json`. For example to run some postprocessing on the generated\nfile:\n\n```json\n  \"scripts\": {\n    \"postshrinkwrap\": \"json -I -e \\\"this.myMetadata = $MY_APP_METADATA\\\"\"\n  }\n```\n\n#### Using locked packages\n\nUsing a locked package is no different than using any package without a package\nlock: any commands that update `node_modules` and/or `package.json`'s\ndependencies will automatically sync the existing lockfile. This includes `npm\ninstall`, `npm rm`, `npm update`, etc. To prevent this update from happening,\nyou can use the `--no-save` option to prevent saving altogether, or\n`--no-shrinkwrap` to allow `package.json` to be updated while leaving\n`package-lock.json` or `npm-shrinkwrap.json` intact.\n\nIt is highly recommended you commit the generated package lock to source\ncontrol: this will allow anyone else on your team, your deployments, your\nCI/continuous integration, and anyone else who runs `npm install` in your\npackage source to get the exact same dependency tree that you were developing\non. Additionally, the diffs from these changes are human-readable and will\ninform you of any changes npm has made to your `node_modules`, so you can notice\nif any transitive dependencies were updated, hoisted, etc.\n\n#### Resolving lockfile conflicts\n\nOccasionally, two separate npm install will create package locks that cause\nmerge conflicts in source control systems. As of `npm@5.7.0`, these conflicts\ncan be resolved by manually fixing any `package.json` conflicts, and then\nrunning `npm install [--package-lock-only]` again. npm will automatically\nresolve any conflicts for you and write a merged package lock that includes all\nthe dependencies from both branches in a reasonable tree. If\n`--package-lock-only` is provided, it will do this without also modifying your\nlocal `node_modules/`.\n\nTo make this process seamless on git, consider installing\n[`npm-merge-driver`](https://npm.im/npm-merge-driver), which will teach git how\nto do this itself without any user interaction. In short: `$ npx\nnpm-merge-driver install -g` will let you do this, and even works with\npre-`npm@5.7.0` versions of npm 5, albeit a bit more noisily. Note that if\n`package.json` itself conflicts, you will have to resolve that by hand and run\n`npm install` manually, even with the merge driver.\n\n### See Also\n\n* https://medium.com/@sdboyer/so-you-want-to-write-a-package-manager-4ae9c17d9527\n* [package.json](/cli/v6/configuring-npm/package-json)\n* [package-lock.json](/cli/v6/configuring-npm/package-lock-json)\n* [shrinkwrap.json](/cli/v6/configuring-npm/shrinkwrap-json)\n* [npm shrinkwrap](/cli/v6/commands/npm-shrinkwrap)\n"},{"id":"ee207d02-c9f4-5e99-af8a-744309bf59c7","frontmatter":{"title":"shrinkwrap.json"},"rawBody":"---\ntitle: shrinkwrap.json\nsection: 5\ndescription: A publishable lockfile\nredirect_from:\n  - /configuring-npm/shrinkwrap-json\n  - /configuring-npm/shrinkwrap-json.html\n  - /files/shrinkwrap.json\n  - /files/shrinkwrap.json.html\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/configuring-npm/shrinkwrap-json.md\n---\n\n### Description\n\n`npm-shrinkwrap.json` is a file created by [`npm shrinkwrap`](/cli/v6/commands/npm-shrinkwrap). It is identical to\n`package-lock.json`, with one major caveat: Unlike `package-lock.json`,\n`npm-shrinkwrap.json` may be included when publishing a package.\n\nThe recommended use-case for `npm-shrinkwrap.json` is applications deployed\nthrough the publishing process on the registry: for example, daemons and\ncommand-line tools intended as global installs or `devDependencies`. It's\nstrongly discouraged for library authors to publish this file, since that would\nprevent end users from having control over transitive dependency updates.\n\nAdditionally, if both `package-lock.json` and `npm-shrinkwrap.json` are present\nin a package root, `package-lock.json` will be ignored in favor of this file.\n\nFor full details and description of the `npm-shrinkwrap.json` file format, refer\nto the manual page for [package-lock.json](/cli/v6/configuring-npm/package-lock-json).\n\n### See also\n\n* [npm shrinkwrap](/cli/v6/commands/npm-shrinkwrap)\n* [package-lock.json](/cli/v6/configuring-npm/package-lock-json)\n* [package.json](/cli/v6/configuring-npm/package-json)\n* [npm install](/cli/v6/commands/npm-install)\n"},{"id":"b0af0d0d-c719-5cbf-a739-401713a5712b","frontmatter":{"title":"config"},"rawBody":"---\ntitle: config\nsection: 7\ndescription: More than you probably want to know about npm configuration\nredirect_from:\n  - /using-npm/config\n  - /using-npm/config.html\n  - /misc/config\n  - /misc/config.html\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/using-npm/config.md\n---\n\n### Description\n\nnpm gets its configuration values from the following sources, sorted by priority:\n\n#### Command Line Flags\n\nPutting `--foo bar` on the command line sets the `foo` configuration\nparameter to `\"bar\"`.  A `--` argument tells the cli parser to stop\nreading flags.  Using `--flag` without specifying any value will set\nthe value to `true`.\n\nExample: `--flag1 --flag2` will set both configuration parameters\nto `true`, while `--flag1 --flag2 bar` will set `flag1` to `true`,\nand `flag2` to `bar`.  Finally, `--flag1 --flag2 -- bar` will set\nboth configuration parameters to `true`, and the `bar` is taken\nas a command argument.\n\n#### Environment Variables\n\nAny environment variables that start with `npm_config_` will be\ninterpreted as a configuration parameter.  For example, putting\n`npm_config_foo=bar` in your environment will set the `foo`\nconfiguration parameter to `bar`.  Any environment configurations that\nare not given a value will be given the value of `true`.  Config\nvalues are case-insensitive, so `NPM_CONFIG_FOO=bar` will work the\nsame. However, please note that inside [`scripts`](/cli/v6/using-npm/scripts)\nnpm will set its own environment variables and Node will prefer\nthose lowercase versions over any uppercase ones that you might set.\nFor details see [this issue](https://github.com/npm/npm/issues/14528).\n\nNotice that you need to use underscores instead of dashes, so `--allow-same-version`\nwould become `npm_config_allow_same_version=true`.\n\n#### npmrc Files\n\nThe four relevant files are:\n\n* per-project configuration file (`/path/to/my/project/.npmrc`)\n* per-user configuration file (defaults to `$HOME/.npmrc`; configurable via CLI\n  option `--userconfig` or environment variable `$NPM_CONFIG_USERCONFIG`)\n* global configuration file (defaults to `$PREFIX/etc/npmrc`; configurable via\n  CLI option `--globalconfig` or environment variable `$NPM_CONFIG_GLOBALCONFIG`)\n* npm's built-in configuration file (`/path/to/npm/npmrc`)\n\nSee [npmrc](/cli/v6/configuring-npm/npmrc) for more details.\n\n#### Default Configs\n\nRun `npm config ls -l` to see a set of configuration parameters that are\ninternal to npm, and are defaults if nothing else is specified.\n\n### Shorthands and Other CLI Niceties\n\nThe following shorthands are parsed on the command-line:\n\n* `-v`: `--version`\n* `-h`, `-?`, `--help`, `-H`: `--usage`\n* `-s`, `--silent`: `--loglevel silent`\n* `-q`, `--quiet`: `--loglevel warn`\n* `-d`: `--loglevel info`\n* `-dd`, `--verbose`: `--loglevel verbose`\n* `-ddd`: `--loglevel silly`\n* `-g`: `--global`\n* `-C`: `--prefix`\n* `-l`: `--long`\n* `-m`: `--message`\n* `-p`, `--porcelain`: `--parseable`\n* `-reg`: `--registry`\n* `-f`: `--force`\n* `-desc`: `--description`\n* `-S`: `--save`\n* `-P`: `--save-prod`\n* `-D`: `--save-dev`\n* `-O`: `--save-optional`\n* `-B`: `--save-bundle`\n* `-E`: `--save-exact`\n* `-y`: `--yes`\n* `-n`: `--yes false`\n* `ll` and `la` commands: `ls --long`\n\nIf the specified configuration param resolves unambiguously to a known\nconfiguration parameter, then it is expanded to that configuration\nparameter.  For example:\n\n```bash\nnpm ls --par\n# same as:\nnpm ls --parseable\n```\n\nIf multiple single-character shorthands are strung together, and the\nresulting combination is unambiguously not some other configuration\nparam, then it is expanded to its various component pieces.  For\nexample:\n\n```bash\nnpm ls -gpld\n# same as:\nnpm ls --global --parseable --long --loglevel info\n```\n\n### Per-Package Config Settings\n\nWhen running scripts (see [`scripts`](/cli/v6/using-npm/scripts)) the package.json \"config\"\nkeys are overwritten in the environment if there is a config param of\n`<name>[@<version>]:<key>`.  For example, if the package.json has\nthis:\n\n```json\n{ \"name\" : \"foo\"\n, \"config\" : { \"port\" : \"8080\" }\n, \"scripts\" : { \"start\" : \"node server.js\" } }\n```\n\nand the server.js is this:\n\n```javascript\nhttp.createServer(...).listen(process.env.npm_package_config_port)\n```\n\nthen the user could change the behavior by doing:\n\n```bash\nnpm config set foo:port 80\n```\n\nSee [package.json](/cli/v6/configuring-npm/package-json) for more information.\n\n### Config Settings\n\n#### access\n\n* Default: `restricted`\n* Type: Access\n\nWhen publishing scoped packages, the access level defaults to `restricted`.  If\nyou want your scoped package to be publicly viewable (and installable) set\n`--access=public`. The only valid values for `access` are `public` and\n`restricted`. Unscoped packages _always_ have an access level of `public`.\n\n#### allow-same-version\n\n* Default: false\n* Type: Boolean\n\nPrevents throwing an error when `npm version` is used to set the new version\nto the same value as the current version.\n\n#### always-auth\n\n* Default: false\n* Type: Boolean\n\nForce npm to always require authentication when accessing the registry,\neven for `GET` requests.\n\n#### also\n\n* Default: null\n* Type: String\n\nWhen \"dev\" or \"development\" and running local `npm shrinkwrap`,\n`npm outdated`, or `npm update`, is an alias for `--dev`.\n\n#### audit\n\n* Default: true\n* Type: Boolean\n\nWhen \"true\" submit audit reports alongside `npm install` runs to the default\nregistry and all registries configured for scopes.  See the documentation\nfor [`npm audit`](/cli/v6/commands/npm-audit) for details on what is submitted.\n\n#### audit-level\n\n* Default: `\"low\"`\n* Type: `'low'`, `'moderate'`, `'high'`, `'critical'`\n\nThe minimum level of vulnerability for `npm audit` to exit with\na non-zero exit code.\n\n#### auth-type\n\n* Default: `'legacy'`\n* Type: `'legacy'`, `'sso'`, `'saml'`, `'oauth'`\n\nWhat authentication strategy to use with `adduser`/`login`.\n\n#### before\n\n* Alias: enjoy-by\n* Default: null\n* Type: Date\n\nIf passed to `npm install`, will rebuild the npm tree such that only versions\nthat were available **on or before** the `--before` time get installed.\nIf there's no versions available for the current set of direct dependencies, the\ncommand will error.\n\nIf the requested version is a `dist-tag` and the given tag does not pass the\n`--before` filter, the most recent version less than or equal to that tag will\nbe used. For example, `foo@latest` might install `foo@1.2` even though `latest`\nis `2.0`.\n\n#### bin-links\n\n* Default: `true`\n* Type: Boolean\n\nTells npm to create symlinks (or `.cmd` shims on Windows) for package\nexecutables.\n\nSet to false to have it not do this.  This can be used to work around\nthe fact that some file systems don't support symlinks, even on\nostensibly Unix systems.\n\n#### browser\n\n* Default: OS X: `\"open\"`, Windows: `\"start\"`, Others: `\"xdg-open\"`\n* Type: String\n\nThe browser that is called by the `npm docs` command to open websites.\n\n#### ca\n\n* Default: The npm CA certificate\n* Type: String, Array or null\n\nThe Certificate Authority signing certificate that is trusted for SSL\nconnections to the registry. Values should be in PEM format (Windows calls it \"Base-64 encoded X.509 (.CER)\") with newlines\nreplaced by the string \"\\n\". For example:\n\n```bash\nca=\"-----BEGIN CERTIFICATE-----\\nXXXX\\nXXXX\\n-----END CERTIFICATE-----\"\n```\n\nSet to `null` to only allow \"known\" registrars, or to a specific CA cert\nto trust only that specific signing authority.\n\nMultiple CAs can be trusted by specifying an array of certificates:\n\n```bash\nca[]=\"...\"\nca[]=\"...\"\n```\n\nSee also the `strict-ssl` config.\n\n#### cafile\n\n* Default: `null`\n* Type: path\n\nA path to a file containing one or multiple Certificate Authority signing\ncertificates. Similar to the `ca` setting, but allows for multiple CA's, as\nwell as for the CA information to be stored in a file on disk.\n\n#### cache\n\n* Default: Windows: `%AppData%\\npm-cache`, Posix: `~/.npm`\n* Type: path\n\nThe location of npm's cache directory.  See [`npm cache`](/cli/v6/commands/npm-cache)\n\n#### cache-lock-stale\n\n* Default: 60000 (1 minute)\n* Type: Number\n\nThe number of ms before cache folder lockfiles are considered stale.\n\n#### cache-lock-retries\n\n* Default: 10\n* Type: Number\n\nNumber of times to retry to acquire a lock on cache folder lockfiles.\n\n#### cache-lock-wait\n\n* Default: 10000 (10 seconds)\n* Type: Number\n\nNumber of ms to wait for cache lock files to expire.\n\n#### cache-max\n\n* Default: Infinity\n* Type: Number\n\n**DEPRECATED**: This option has been deprecated in favor of `--prefer-online`.\n\n`--cache-max=0` is an alias for `--prefer-online`.\n\n#### cache-min\n\n* Default: 10\n* Type: Number\n\n**DEPRECATED**: This option has been deprecated in favor of `--prefer-offline`.\n\n`--cache-min=9999 (or bigger)` is an alias for `--prefer-offline`.\n\n#### cert\n\n* Default: `null`\n* Type: String\n\nA client certificate to pass when accessing the registry.  Values should be in\nPEM format (Windows calls it \"Base-64 encoded X.509 (.CER)\") with newlines replaced by the string \"\\n\". For example:\n\n```bash\ncert=\"-----BEGIN CERTIFICATE-----\\nXXXX\\nXXXX\\n-----END CERTIFICATE-----\"\n```\n\nIt is _not_ the path to a certificate file (and there is no \"certfile\" option).\n\n#### cidr\n\n* Default: `null`\n* Type: String, Array, null\n\nThis is a list of CIDR address to be used when configuring limited access tokens with the `npm token create` command.\n\n#### color\n\n* Default: true\n* Type: Boolean or `\"always\"`\n\nIf false, never shows colors.  If `\"always\"` then always shows colors.\nIf true, then only prints color codes for tty file descriptors.\n\nThis option can also be changed using the environment: colors are\ndisabled when the environment variable `NO_COLOR` is set to any value.\n\n#### depth\n\n* Default: Infinity\n* Type: Number\n\nThe depth to go when recursing directories for `npm ls`,\n`npm cache ls`, and `npm outdated`.\n\nFor `npm outdated`, a setting of `Infinity` will be treated as `0`\nsince that gives more useful information.  To show the outdated status\nof all packages and dependents, use a large integer value,\ne.g., `npm outdated --depth 9999`\n\n#### description\n\n* Default: true\n* Type: Boolean\n\nShow the description in `npm search`\n\n#### dev\n\n* Default: false\n* Type: Boolean\n\nInstall `dev-dependencies` along with packages.\n\n#### dry-run\n\n* Default: false\n* Type: Boolean\n\nIndicates that you don't want npm to make any changes and that it should\nonly report what it would have done.  This can be passed into any of the\ncommands that modify your local installation, eg, `install`, `update`,\n`dedupe`, `uninstall`.  This is NOT currently honored by some network related\ncommands, eg `dist-tags`, `owner`, etc.\n\n#### editor\n\n* Default: `EDITOR` environment variable if set, or `\"vi\"` on Posix,\n  or `\"notepad\"` on Windows.\n* Type: path\n\nThe command to run for `npm edit` or `npm config edit`.\n\n#### engine-strict\n\n* Default: false\n* Type: Boolean\n\nIf set to true, then npm will stubbornly refuse to install (or even\nconsider installing) any package that claims to not be compatible with\nthe current Node.js version.\n\n#### force\n\n* Default: false\n* Type: Boolean\n\nMakes various commands more forceful.\n\n* lifecycle script failure does not block progress.\n* publishing clobbers previously published versions.\n* skips cache when requesting from the registry.\n* prevents checks against clobbering non-npm files.\n\n#### format-package-lock\n\n* Default: true\n* Type: Boolean\n\nFormat `package-lock.json` or `npm-shrinkwrap.json` as a human readable file.\n\n#### fetch-retries\n\n* Default: 2\n* Type: Number\n\nThe \"retries\" config for the `retry` module to use when fetching\npackages from the registry.\n\n#### fetch-retry-factor\n\n* Default: 10\n* Type: Number\n\nThe \"factor\" config for the `retry` module to use when fetching\npackages.\n\n#### fetch-retry-mintimeout\n\n* Default: 10000 (10 seconds)\n* Type: Number\n\nThe \"minTimeout\" config for the `retry` module to use when fetching\npackages.\n\n#### fetch-retry-maxtimeout\n\n* Default: 60000 (1 minute)\n* Type: Number\n\nThe \"maxTimeout\" config for the `retry` module to use when fetching\npackages.\n\n#### fund\n\n* Default: true\n* Type: Boolean\n\nWhen \"true\" displays the message at the end of each `npm install`\nacknowledging the number of dependencies looking for funding.\nSee [`npm fund`](/cli/v6/commands/npm-fund) for details.\n\n#### git\n\n* Default: `\"git\"`\n* Type: String\n\nThe command to use for git commands.  If git is installed on the\ncomputer, but is not in the `PATH`, then set this to the full path to\nthe git binary.\n\n#### git-tag-version\n\n* Default: `true`\n* Type: Boolean\n\nTag the commit when using the `npm version` command.\n\n#### commit-hooks\n\n* Default: `true`\n* Type: Boolean\n\nRun git commit hooks when using the `npm version` command.\n\n#### global\n\n* Default: false\n* Type: Boolean\n\nOperates in \"global\" mode, so that packages are installed into the\n`prefix` folder instead of the current working directory.  See\n[folders](/cli/v6/configuring-npm/folders) for more on the differences in behavior.\n\n* packages are installed into the `{prefix}/lib/node_modules` folder, instead of the\n  current working directory.\n* bin files are linked to `{prefix}/bin`\n* man pages are linked to `{prefix}/share/man`\n\n#### globalconfig\n\n* Default: {prefix}/etc/npmrc\n* Type: path\n\nThe config file to read for global config options.\n\n#### global-style\n\n* Default: false\n* Type: Boolean\n\nCauses npm to install the package into your local `node_modules` folder with\nthe same layout it uses with the global `node_modules` folder.  Only your\ndirect dependencies will show in `node_modules` and everything they depend\non will be flattened in their `node_modules` folders.  This obviously will\neliminate some deduping. If used with `legacy-bundling`, `legacy-bundling` will be\npreferred.\n\n#### group\n\n* Default: GID of the current process\n* Type: String or Number\n\nThe group to use when running package scripts in global mode as the root\nuser.\n\n#### heading\n\n* Default: `\"npm\"`\n* Type: String\n\nThe string that starts all the debugging log output.\n\n#### https-proxy\n\n* Default: null\n* Type: url\n\nA proxy to use for outgoing https requests. If the `HTTPS_PROXY` or\n`https_proxy` or `HTTP_PROXY` or `http_proxy` environment variables are set,\nproxy settings will be honored by the underlying `request` library.\n\n#### if-present\n\n* Default: false\n* Type: Boolean\n\nIf true, npm will not exit with an error code when `run-script` is invoked for\na script that isn't defined in the `scripts` section of `package.json`. This\noption can be used when it's desirable to optionally run a script when it's\npresent and fail if the script fails. This is useful, for example, when running\nscripts that may only apply for some builds in an otherwise generic CI setup.\n\n#### ignore-prepublish\n\n* Default: false\n* Type: Boolean\n\nIf true, npm will not run `prepublish` scripts.\n\n#### ignore-scripts\n\n* Default: false\n* Type: Boolean\n\nIf true, npm does not run scripts specified in package.json files.\n\n#### init-module\n\n* Default: ~/.npm-init.js\n* Type: path\n\nA module that will be loaded by the `npm init` command.  See the\ndocumentation for the\n[init-package-json](https://github.com/isaacs/init-package-json) module\nfor more information, or [npm init](/cli/v6/commands/npm-init).\n\n#### init-author-name\n\n* Default: \"\"\n* Type: String\n\nThe value `npm init` should use by default for the package author's name.\n\n#### init-author-email\n\n* Default: \"\"\n* Type: String\n\nThe value `npm init` should use by default for the package author's email.\n\n#### init-author-url\n\n* Default: \"\"\n* Type: String\n\nThe value `npm init` should use by default for the package author's homepage.\n\n#### init-license\n\n* Default: \"ISC\"\n* Type: String\n\nThe value `npm init` should use by default for the package license.\n\n#### init-version\n\n* Default: \"1.0.0\"\n* Type: semver\n\nThe value that `npm init` should use by default for the package\nversion number, if not already set in package.json.\n\n#### json\n\n* Default: false\n* Type: Boolean\n\nWhether or not to output JSON data, rather than the normal output.\n\nThis feature is currently experimental, and the output data structures for many\ncommands is either not implemented in JSON yet, or subject to change.  Only the\noutput from `npm ls --json` and `npm search --json` are currently valid.\n\n#### key\n\n* Default: `null`\n* Type: String\n\nA client key to pass when accessing the registry.  Values should be in PEM\nformat with newlines replaced by the string \"\\n\". For example:\n\n```json\nkey=\"-----BEGIN PRIVATE KEY-----\\nXXXX\\nXXXX\\n-----END PRIVATE KEY-----\"\n```\n\nIt is _not_ the path to a key file (and there is no \"keyfile\" option).\n\n#### legacy-bundling\n\n* Default: false\n* Type: Boolean\n\nCauses npm to install the package such that versions of npm prior to 1.4,\nsuch as the one included with node 0.8, can install the package.  This\neliminates all automatic deduping. If used with `global-style` this option\nwill be preferred.\n\n#### link\n\n* Default: false\n* Type: Boolean\n\nIf true, then local installs will link if there is a suitable globally\ninstalled package.\n\nNote that this means that local installs can cause things to be\ninstalled into the global space at the same time.  The link is only done\nif one of the two conditions are met:\n\n* The package is not already installed globally, or\n* the globally installed version is identical to the version that is\n  being installed locally.\n\n#### local-address\n\n* Default: undefined\n* Type: IP Address\n\nThe IP address of the local interface to use when making connections\nto the npm registry.  Must be IPv4 in versions of Node prior to 0.12.\n\n#### loglevel\n\n* Default: \"notice\"\n* Type: String\n* Values: \"silent\", \"error\", \"warn\", \"notice\", \"http\", \"timing\", \"info\",\n  \"verbose\", \"silly\"\n\nWhat level of logs to report.  On failure, *all* logs are written to\n`npm-debug.log` in the current working directory.\n\nAny logs of a higher level than the setting are shown. The default is \"notice\".\n\n#### logstream\n\n* Default: process.stderr\n* Type: Stream\n\nThis is the stream that is passed to the\n[npmlog](https://github.com/npm/npmlog) module at run time.\n\nIt cannot be set from the command line, but if you are using npm\nprogrammatically, you may wish to send logs to somewhere other than\nstderr.\n\nIf the `color` config is set to true, then this stream will receive\ncolored output if it is a TTY.\n\n#### logs-max\n\n* Default: 10\n* Type: Number\n\nThe maximum number of log files to store.\n\n#### long\n\n* Default: false\n* Type: Boolean\n\nShow extended information in `npm ls` and `npm search`.\n\n#### maxsockets\n\n* Default: 50\n* Type: Number\n\nThe maximum number of connections to use per origin (protocol/host/port\ncombination). Passed to the `http` `Agent` used to make the request.\n\n#### message\n\n* Default: \"%s\"\n* Type: String\n\nCommit message which is used by `npm version` when creating version commit.\n\nAny \"%s\" in the message will be replaced with the version number.\n\n#### metrics-registry\n\n* Default: The value of  `registry` (which defaults to \"https://registry.npmjs.org/\")\n* Type: String\n\nThe registry you want to send cli metrics to if `send-metrics` is true.\n\n#### node-options\n\n* Default: null\n* Type: String\n\nOptions to pass through to Node.js via the `NODE_OPTIONS` environment\nvariable.  This does not impact how npm itself is executed but it does\nimpact how lifecycle scripts are called.\n\n#### node-version\n\n* Default: process.version\n* Type: semver or false\n\nThe node version to use when checking a package's `engines` map.\n\n#### noproxy\n\n* Default: null\n* Type: String or Array\n\nA comma-separated string or an array of domain extensions that a proxy should not be used for.\n\n#### offline\n\n* Default: false\n* Type: Boolean\n\nForce offline mode: no network requests will be done during install. To allow\nthe CLI to fill in missing cache data, see `--prefer-offline`.\n\n#### onload-script\n\n* Default: false\n* Type: path\n\nA node module to `require()` when npm loads.  Useful for programmatic\nusage.\n\n#### only\n\n* Default: null\n* Type: String\n\nWhen \"dev\" or \"development\" and running local `npm install` without any\narguments, only devDependencies (and their dependencies) are installed.\n\nWhen \"dev\" or \"development\" and running local `npm ls`, `npm outdated`, or\n`npm update`, is an alias for `--dev`.\n\nWhen \"prod\" or \"production\" and running local `npm install` without any\narguments, only non-devDependencies (and their dependencies) are\ninstalled.\n\nWhen \"prod\" or \"production\" and running local `npm ls`, `npm outdated`, or\n`npm update`, is an alias for `--production`.\n\n#### optional\n\n* Default: true\n* Type: Boolean\n\nAttempt to install packages in the `optionalDependencies` object.  Note\nthat if these packages fail to install, the overall installation\nprocess is not aborted.\n\n#### otp\n\n* Default: null\n* Type: Number\n\nThis is a one-time password from a two-factor authenticator.  It's needed\nwhen publishing or changing package permissions with `npm access`.\n\n#### package-lock\n\n* Default: true\n* Type: Boolean\n\nIf set to false, then ignore `package-lock.json` files when installing. This\nwill also prevent _writing_ `package-lock.json` if `save` is true.\n\nWhen package package-locks are disabled, automatic pruning of extraneous\nmodules will also be disabled.  To remove extraneous modules with\npackage-locks disabled use `npm prune`.\n\nThis option is an alias for `--shrinkwrap`.\n\n#### package-lock-only\n\n* Default: false\n* Type: Boolean\n\nIf set to true, it will update only the `package-lock.json`,\ninstead of checking `node_modules` and downloading dependencies.\n\n#### parseable\n\n* Default: false\n* Type: Boolean\n\nOutput parseable results from commands that write to\nstandard output. For `npm search`, this will be tab-separated table format.\n\n#### prefer-offline\n\n* Default: false\n* Type: Boolean\n\nIf true, staleness checks for cached data will be bypassed, but missing data\nwill be requested from the server. To force full offline mode, use `--offline`.\n\nThis option is effectively equivalent to `--cache-min=9999999`.\n\n#### prefer-online\n\n* Default: false\n* Type: Boolean\n\nIf true, staleness checks for cached data will be forced, making the CLI look\nfor updates immediately even for fresh package data.\n\n#### prefix\n\n* Default: see [folders](/cli/v6/configuring-npm/folders)\n* Type: path\n\nThe location to install global items.  If set on the command line, then\nit forces non-global commands to run in the specified folder.\n\n#### preid\n\n* Default: \"\"\n* Type: String\n\nThe \"prerelease identifier\" to use as a prefix for the \"prerelease\" part of a\nsemver. Like the `rc` in `1.2.0-rc.8`.\n\n#### production\n\n* Default: false\n* Type: Boolean\n\nSet to true to run in \"production\" mode.\n\n1. devDependencies are not installed at the topmost level when running\n   local `npm install` without any arguments.\n2. Set the NODE_ENV=\"production\" for lifecycle scripts.\n\n#### progress\n\n* Default: true, unless TRAVIS or CI env vars set.\n* Type: Boolean\n\nWhen set to `true`, npm will display a progress bar during time intensive\noperations, if `process.stderr` is a TTY.\n\nSet to `false` to suppress the progress bar.\n\n#### proxy\n\n* Default: null\n* Type: url\n\nA proxy to use for outgoing http requests. If the `HTTP_PROXY` or\n`http_proxy` environment variables are set, proxy settings will be\nhonored by the underlying `request` library.\n\n#### read-only\n\n* Default: false\n* Type: Boolean\n\nThis is used to mark a token as unable to publish when configuring limited access tokens with the `npm token create` command.\n\n#### rebuild-bundle\n\n* Default: true\n* Type: Boolean\n\nRebuild bundled dependencies after installation.\n\n#### registry\n\n* Default: https://registry.npmjs.org/\n* Type: url\n\nThe base URL of the npm package registry.\n\n#### rollback\n\n* Default: true\n* Type: Boolean\n\nRemove failed installs.\n\n#### save\n\n* Default: true\n* Type: Boolean\n\nSave installed packages to a package.json file as dependencies.\n\nWhen used with the `npm rm` command, it removes it from the `dependencies`\nobject.\n\nOnly works if there is already a package.json file present.\n\n#### save-bundle\n\n* Default: false\n* Type: Boolean\n\nIf a package would be saved at install time by the use of `--save`,\n`--save-dev`, or `--save-optional`, then also put it in the\n`bundleDependencies` list.\n\nWhen used with the `npm rm` command, it removes it from the\nbundledDependencies list.\n\n#### save-prod\n\n* Default: false\n* Type: Boolean\n\nMakes sure that a package will be saved into `dependencies` specifically. This\nis useful if a package already exists in `devDependencies` or\n`optionalDependencies`, but you want to move it to be a production dep. This is\nalso the default behavior if `--save` is true, and neither `--save-dev` or\n`--save-optional` are true.\n\n#### save-dev\n\n* Default: false\n* Type: Boolean\n\nSave installed packages to a package.json file as `devDependencies`.\n\nWhen used with the `npm rm` command, it removes it from the\n`devDependencies` object.\n\nOnly works if there is already a package.json file present.\n\n#### save-exact\n\n* Default: false\n* Type: Boolean\n\nDependencies saved to package.json using `--save`, `--save-dev` or\n`--save-optional` will be configured with an exact version rather than\nusing npm's default semver range operator.\n\n#### save-optional\n\n* Default: false\n* Type: Boolean\n\nSave installed packages to a package.json file as\noptionalDependencies.\n\nWhen used with the `npm rm` command, it removes it from the\n`devDependencies` object.\n\nOnly works if there is already a package.json file present.\n\n#### save-prefix\n\n* Default: '^'\n* Type: String\n\nConfigure how versions of packages installed to a package.json file via\n`--save` or `--save-dev` get prefixed.\n\nFor example if a package has version `1.2.3`, by default its version is\nset to `^1.2.3` which allows minor upgrades for that package, but after\n`npm config set save-prefix='~'` it would be set to `~1.2.3` which only allows\npatch upgrades.\n\n#### scope\n\n* Default: the scope of the current project, if any, or \"\"\n* Type: String\n\nAssociate an operation with a scope for a scoped registry. Useful when logging\nin to a private registry for the first time:\n`npm login --scope=@organization --registry=registry.organization.com`, which\nwill cause `@organization` to be mapped to the registry for future installation\nof packages specified according to the pattern `@organization/package`.\n\n#### script-shell\n\n* Default: `null`\n* Type: path\n\nThe shell to use for scripts run with the `npm run` command.\n\n#### scripts-prepend-node-path\n\n* Default: \"warn-only\"\n* Type: Boolean, `\"auto\"` or `\"warn-only\"`\n\nIf set to `true`, add the directory in which the current `node` executable\nresides to the `PATH` environment variable when running scripts,\neven if that means that `npm` will invoke a different `node` executable than\nthe one which it is running.\n\nIf set to `false`, never modify `PATH` with that.\n\nIf set to `\"warn-only\"`, never modify `PATH` but print a warning if `npm` thinks\nthat you may want to run it with `true`, e.g. because the `node` executable\nin the `PATH` is not the one `npm` was invoked with.\n\nIf set to `auto`, only add that directory to the `PATH` environment variable\nif the `node` executable with which `npm` was invoked and the one that is found\nfirst on the `PATH` are different.\n\n#### searchexclude\n\n* Default: \"\"\n* Type: String\n\nSpace-separated options that limit the results from search.\n\n#### searchopts\n\n* Default: \"\"\n* Type: String\n\nSpace-separated options that are always passed to search.\n\n#### searchlimit\n\n* Default: 20\n* Type: Number\n\nNumber of items to limit search results to. Will not apply at all to legacy\nsearches.\n\n#### searchstaleness\n\n* Default: 900 (15 minutes)\n* Type: Number\n\nThe age of the cache, in seconds, before another registry request is made if\nusing legacy search endpoint.\n\n#### send-metrics\n\n* Default: false\n* Type: Boolean\n\nIf true, success/failure metrics will be reported to the registry stored in\n`metrics-registry`.  These requests contain the number of successful and\nfailing runs of the npm CLI and the time period overwhich those counts were\ngathered. No identifying information is included in these requests.\n\n#### shell\n\n* Default: SHELL environment variable, or \"bash\" on Posix, or \"cmd\" on\n  Windows\n* Type: path\n\nThe shell to run for the `npm explore` command.\n\n#### shrinkwrap\n\n* Default: true\n* Type: Boolean\n\nIf set to false, then ignore `npm-shrinkwrap.json` files when installing. This\nwill also prevent _writing_ `npm-shrinkwrap.json` if `save` is true.\n\nThis option is an alias for `--package-lock`.\n\n#### sign-git-commit\n\n* Default: false\n* Type: Boolean\n\nIf set to true, then the `npm version` command will commit the new package\nversion using `-S` to add a signature.\n\nNote that git requires you to have set up GPG keys in your git configs\nfor this to work properly.\n\n#### sign-git-tag\n\n* Default: false\n* Type: Boolean\n\nIf set to true, then the `npm version` command will tag the version\nusing `-s` to add a signature.\n\nNote that git requires you to have set up GPG keys in your git configs\nfor this to work properly.\n\n#### sso-poll-frequency\n\n* Default: 500\n* Type: Number\n\nWhen used with SSO-enabled `auth-type`s, configures how regularly the registry\nshould be polled while the user is completing authentication.\n\n#### sso-type\n\n* Default: 'oauth'\n* Type: 'oauth', 'saml', or null\n\nIf `--auth-type=sso`, the type of SSO type to use.\n\n#### strict-ssl\n\n* Default: true\n* Type: Boolean\n\nWhether or not to do SSL key validation when making requests to the\nregistry via https.\n\nSee also the `ca` config.\n\n#### tag\n\n* Default: latest\n* Type: String\n\nIf you ask npm to install a package and don't tell it a specific version, then\nit will install the specified tag.\n\nAlso the tag that is added to the package@version specified by the `npm\ntag` command, if no explicit tag is given.\n\n#### tag-version-prefix\n\n* Default: `\"v\"`\n* Type: String\n\nIf set, alters the prefix used when tagging a new version when performing a\nversion increment using  `npm-version`. To remove the prefix altogether, set it\nto the empty string: `\"\"`.\n\nBecause other tools may rely on the convention that npm version tags look like\n`v1.0.0`, _only use this property if it is absolutely necessary_. In\nparticular, use care when overriding this setting for public packages.\n\n#### timing\n\n* Default: `false`\n* Type: Boolean\n\nIf true, writes an `npm-debug` log to `_logs` and timing information to\n`_timing.json`, both in your cache.  `_timing.json` is a newline delimited\nlist of JSON objects.  You can quickly view it with this\n[json](https://www.npmjs.com/package/json) command line:\n`json -g < ~/.npm/_timing.json`.\n\n#### tmp\n\n* Default: TMPDIR environment variable, or \"/tmp\"\n* Type: path\n\nWhere to store temporary files and folders.  All temp files are deleted\non success, but left behind on failure for forensic purposes.\n\n#### unicode\n\n* Default: false on windows, true on mac/unix systems with a unicode locale\n* Type: Boolean\n\nWhen set to true, npm uses unicode characters in the tree output.  When\nfalse, it uses ascii characters to draw trees.\n\n#### unsafe-perm\n\n* Default: false if running as root, true otherwise\n* Type: Boolean\n\nSet to true to suppress the UID/GID switching when running package\nscripts.  If set explicitly to false, then installing as a non-root user\nwill fail.\n\n#### update-notifier\n\n* Default: true\n* Type: Boolean\n\nSet to false to suppress the update notification when using an older\nversion of npm than the latest.\n\n#### usage\n\n* Default: false\n* Type: Boolean\n\nSet to show short usage output (like the -H output)\ninstead of complete help when doing [`npm help`](/cli/v6/commands/npm-help).\n\n#### user\n\n* Default: \"nobody\"\n* Type: String or Number\n\nThe UID to set to when running package scripts as root.\n\n#### userconfig\n\n* Default: ~/.npmrc\n* Type: path\n\nThe location of user-level configuration settings.\n\n#### umask\n\n* Default: 022\n* Type: Octal numeric string in range 0000..0777 (0..511)\n\nThe \"umask\" value to use when setting the file creation mode on files\nand folders.\n\nFolders and executables are given a mode which is `0777` masked against\nthis value.  Other files are given a mode which is `0666` masked against\nthis value.  Thus, the defaults are `0755` and `0644` respectively.\n\n#### user-agent\n\n* Default: node/{process.version} {process.platform} {process.arch}\n* Type: String\n\nSets a User-Agent to the request header\n\n#### version\n\n* Default: false\n* Type: boolean\n\nIf true, output the npm version and exit successfully.\n\nOnly relevant when specified explicitly on the command line.\n\n#### versions\n\n* Default: false\n* Type: boolean\n\nIf true, output the npm version as well as node's `process.versions` map, and\nexit successfully.\n\nOnly relevant when specified explicitly on the command line.\n\n#### viewer\n\n* Default: \"man\" on Posix, \"browser\" on Windows\n* Type: path\n\nThe program to use to view help content.\n\nSet to `\"browser\"` to view html help content in the default web browser.\n\n### See also\n\n* [npm config](/cli/v6/commands/npm-config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n* [npm scripts](/cli/v6/using-npm/scripts)\n* [npm folders](/cli/v6/configuring-npm/folders)\n* [npm](/cli/v6/commands/npm)\n"},{"id":"16fb165c-4f16-5bd4-a775-1883e045389c","frontmatter":{"title":"developers"},"rawBody":"---\ntitle: developers\nsection: 7\ndescription: Developer Guide\nredirect_from:\n  - /using-npm/developers\n  - /using-npm/developers.html\n  - /misc/developers\n  - /misc/developers.html\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/using-npm/developers.md\n---\n\n### Description\n\nSo, you've decided to use npm to develop (and maybe publish/deploy)\nyour project.\n\nFantastic!\n\nThere are a few things that you need to do above the simple steps\nthat your users will do to install your program.\n\n### About These Documents\n\nThese are man pages.  If you install npm, you should be able to\nthen do `man npm-thing` to get the documentation on a particular\ntopic, or `npm help thing` to see the same information.\n\n### What is a package\n\nA package is:\n\n* a) a folder containing a program described by a package.json file\n* b) a gzipped tarball containing (a)\n* c) a url that resolves to (b)\n* d) a `<name>@<version>` that is published on the registry with (c)\n* e) a `<name>@<tag>` that points to (d)\n* f) a `<name>` that has a \"latest\" tag satisfying (e)\n* g) a `git` url that, when cloned, results in (a).\n\nEven if you never publish your package, you can still get a lot of\nbenefits of using npm if you just want to write a node program (a), and\nperhaps if you also want to be able to easily install it elsewhere\nafter packing it up into a tarball (b).\n\nGit urls can be of the form:\n\n```bash\ngit://github.com/user/project.git#commit-ish\ngit+ssh://user@hostname:project.git#commit-ish\ngit+http://user@hostname/project/blah.git#commit-ish\ngit+https://user@hostname/project/blah.git#commit-ish\n```\n\nThe `commit-ish` can be any tag, sha, or branch which can be supplied as\nan argument to `git checkout`.  The default is `master`.\n\n### The package.json File\n\nYou need to have a `package.json` file in the root of your project to do\nmuch of anything with npm.  That is basically the whole interface.\n\nSee [`package.json`](/cli/v6/configuring-npm/package-json) for details about what goes in that file.  At the very\nleast, you need:\n\n* name:\n  This should be a string that identifies your project.  Please do not\n  use the name to specify that it runs on node, or is in JavaScript.\n  You can use the \"engines\" field to explicitly state the versions of\n  node (or whatever else) that your program requires, and it's pretty\n  well assumed that it's JavaScript.\n\n  It does not necessarily need to match your github repository name.\n\n  So, `node-foo` and `bar-js` are bad names.  `foo` or `bar` are better.\n\n* version:\n  A semver-compatible version.\n\n* engines:\n  Specify the versions of node (or whatever else) that your program\n  runs on.  The node API changes a lot, and there may be bugs or new\n  functionality that you depend on.  Be explicit.\n\n* author:\n  Take some credit.\n\n* scripts:\n  If you have a special compilation or installation script, then you\n  should put it in the `scripts` object.  You should definitely have at\n  least a basic smoke-test command as the \"scripts.test\" field.\n  See [scripts](/cli/v6/using-npm/scripts).\n\n* main:\n  If you have a single module that serves as the entry point to your\n  program (like what the \"foo\" package gives you at require(\"foo\")),\n  then you need to specify that in the \"main\" field.\n\n* directories:\n  This is an object mapping names to folders.  The best ones to include are\n  \"lib\" and \"doc\", but if you use \"man\" to specify a folder full of man pages,\n  they'll get installed just like these ones.\n\nYou can use `npm init` in the root of your package in order to get you\nstarted with a pretty basic package.json file.  See [`npm init`](/cli/v6/commands/npm-init) for\nmore info.\n\n### Keeping files *out* of your package\n\nUse a `.npmignore` file to keep stuff out of your package.  If there's\nno `.npmignore` file, but there *is* a `.gitignore` file, then npm will\nignore the stuff matched by the `.gitignore` file.  If you *want* to\ninclude something that is excluded by your `.gitignore` file, you can\ncreate an empty `.npmignore` file to override it. Like `git`, `npm` looks\nfor `.npmignore` and `.gitignore` files in all subdirectories of your\npackage, not only the root directory.\n\n`.npmignore` files follow the [same pattern rules](https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository#Ignoring-Files)\nas `.gitignore` files:\n\n* Blank lines or lines starting with `#` are ignored.\n* Standard glob patterns work.\n* You can end patterns with a forward slash `/` to specify a directory.\n* You can negate a pattern by starting it with an exclamation point `!`.\n\nBy default, the following paths and files are ignored, so there's no\nneed to add them to `.npmignore` explicitly:\n\n* `.*.swp`\n* `._*`\n* `.DS_Store`\n* `.git`\n* `.hg`\n* `.npmrc`\n* `.lock-wscript`\n* `.svn`\n* `.wafpickle-*`\n* `config.gypi`\n* `CVS`\n* `npm-debug.log`\n\nAdditionally, everything in `node_modules` is ignored, except for\nbundled dependencies. npm automatically handles this for you, so don't\nbother adding `node_modules` to `.npmignore`.\n\nThe following paths and files are never ignored, so adding them to\n`.npmignore` is pointless:\n\n* `package.json`\n* `README` (and its variants)\n* `CHANGELOG` (and its variants)\n* `LICENSE` / `LICENCE`\n\nIf, given the structure of your project, you find `.npmignore` to be a\nmaintenance headache, you might instead try populating the `files`\nproperty of `package.json`, which is an array of file or directory names\nthat should be included in your package. Sometimes a whitelist is easier\nto manage than a blacklist.\n\n#### Testing whether your `.npmignore` or `files` config works\n\nIf you want to double check that your package will include only the files\nyou intend it to when published, you can run the `npm pack` command locally\nwhich will generate a tarball in the working directory, the same way it\ndoes for publishing.\n\n### Link Packages\n\n`npm link` is designed to install a development package and see the\nchanges in real time without having to keep re-installing it.  (You do\nneed to either re-link or `npm rebuild -g` to update compiled packages,\nof course.)\n\nMore info at [`npm link`](/cli/v6/commands/npm-link).\n\n### Before Publishing: Make Sure Your Package Installs and Works\n\n**This is important.**\n\nIf you can not install it locally, you'll have\nproblems trying to publish it.  Or, worse yet, you'll be able to\npublish it, but you'll be publishing a broken or pointless package.\nSo don't do that.\n\nIn the root of your package, do this:\n\n```bash\nnpm install . -g\n```\n\nThat'll show you that it's working.  If you'd rather just create a symlink\npackage that points to your working directory, then do this:\n\n```bash\nnpm link\n```\n\nUse `npm ls -g` to see if it's there.\n\nTo test a local install, go into some other folder, and then do:\n\n```bash\ncd ../some-other-folder\nnpm install ../my-package\n```\n\nto install it locally into the node_modules folder in that other place.\n\nThen go into the node-repl, and try using require(\"my-thing\") to\nbring in your module's main module.\n\n### Create a User Account\n\nCreate a user with the adduser command.  It works like this:\n\n```bash\nnpm adduser\n```\n\nand then follow the prompts.\n\nThis is documented better in [npm adduser](/cli/v6/commands/npm-adduser).\n\n### Publish your package\n\nThis part's easy.  In the root of your folder, do this:\n\n```bash\nnpm publish\n```\n\nYou can give publish a url to a tarball, or a filename of a tarball,\nor a path to a folder.\n\nNote that pretty much **everything in that folder will be exposed**\nby default.  So, if you have secret stuff in there, use a\n`.npmignore` file to list out the globs to ignore, or publish\nfrom a fresh checkout.\n\n### Brag about it\n\nSend emails, write blogs, blab in IRC.\n\nTell the world how easy it is to install your program!\n\n### See also\n\n* [npm](/cli/v6/commands/npm)\n* [npm init](/cli/v6/commands/npm-init)\n* [package.json](/cli/v6/configuring-npm/package-json)\n* [npm scripts](/cli/v6/using-npm/scripts)\n* [npm publish](/cli/v6/commands/npm-publish)\n* [npm adduser](/cli/v6/commands/npm-adduser)\n* [npm registry](/cli/v6/using-npm/registry)\n"},{"id":"1a023bbf-5bd4-5683-9fdd-543e2441b8cc","frontmatter":{"title":"disputes"},"rawBody":"---\ntitle: disputes\nsection: 7\ndescription: Handling Module Name Disputes\nredirect_from:\n  - /using-npm/disputes\n  - /using-npm/disputes.html\n  - /misc/disputes\n  - /misc/disputes.html\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/using-npm/disputes.md\n---\n\nThis document describes the steps that you should take to resolve module name\ndisputes with other npm publishers. It also describes special steps you should\ntake about names you think infringe your trademarks.\n\nThis document is a clarification of the acceptable behavior outlined in the\n[npm Code of Conduct](https://www.npmjs.com/policies/conduct), and nothing in\nthis document should be interpreted to contradict any aspect of the npm Code of\nConduct.\n\n### TL;DR\n\n1. Get the author email with `npm owner ls <pkgname>`\n2. Email the author, CC <support@npmjs.com>\n3. After a few weeks, if there's no resolution, we'll sort it out.\n\nDon't squat on package names.  Publish code or move out of the way.\n\n### Description\n\nThere sometimes arise cases where a user publishes a module, and then later,\nsome other user wants to use that name. Here are some common ways that happens\n(each of these is based on actual events.)\n\n1. Alice writes a JavaScript module `foo`, which is not node-specific. Alice\n   doesn't use node at all. Yusuf wants to use `foo` in node, so he wraps it in\n   an npm module. Some time later, Alice starts using node, and wants to take\n   over management of her program.\n2. Yusuf writes an npm module `foo`, and publishes it. Perhaps much later, Alice\n   finds a bug in `foo`, and fixes it. She sends a pull request to Yusuf, but\n   Yusuf doesn't have the time to deal with it, because he has a new job and a\n   new baby and is focused on his new Erlang project, and kind of not involved\n   with node any more. Alice would like to publish a new `foo`, but can't,\n   because the name is taken.\n3. Yusuf writes a 10-line flow-control library, and calls it `foo`, and\n   publishes it to the npm registry. Being a simple little thing, it never\n   really has to be updated. Alice works for Foo Inc, the makers of the\n   critically acclaimed and widely-marketed `foo` JavaScript toolkit framework.\n   They publish it to npm as `foojs`, but people are routinely confused when\n   `npm install foo` is some different thing.\n4. Yusuf writes a parser for the widely-known `foo` file format, because he\n   needs it for work. Then, he gets a new job, and never updates the prototype.\n   Later on, Alice writes a much more complete `foo` parser, but can't publish,\n   because Yusuf's `foo` is in the way.\n\n1. `npm owner ls foo`. This will tell Alice the email address of the owner\n   (Yusuf).\n2. Alice emails Yusuf, explaining the situation **as respectfully as possible**,\n   and what she would like to do with the module name. She adds the npm support\n   staff <support@npmjs.com> to the CC list of the email. Mention in the email\n   that Yusuf can run npm owner `add alice foo` to add Alice as an owner of the\n   foo package.\n3. After a reasonable amount of time, if Yusuf has not responded, or if Yusuf\n   and Alice can't come to any sort of resolution, email support\n   <support@npmjs.com> and we'll sort it out. (\"Reasonable\" is usually at least\n   4 weeks.)\n\n### Reasoning\n\nIn almost every case so far, the parties involved have been able to reach an\namicable resolution without any major intervention. Most people really do want\nto be reasonable, and are probably not even aware that they're in your way.\n\nModule ecosystems are most vibrant and powerful when they are as self-directed\nas possible. If an admin one day deletes something you had worked on, then that\nis going to make most people quite upset, regardless of the justification. When\nhumans solve their problems by talking to other humans with respect, everyone\nhas the chance to end up feeling good about the interaction.\n\n### Exceptions\n\nSome things are not allowed, and will be removed without discussion if they are\nbrought to the attention of the npm registry admins, including but not limited\nto:\n\n1. Malware (that is, a package designed to exploit or harm the machine on which\n   it is installed).\n2. Violations of copyright or licenses (for example, cloning an MIT-licensed\n   program, and then removing or changing the copyright and license statement).\n3. Illegal content.\n4. \"Squatting\" on a package name that you plan to use, but aren't actually\n   using. Sorry, I don't care how great the name is, or how perfect a fit it is\n   for the thing that someday might happen. If someone wants to use it today,\n   and you're just taking up space with an empty tarball, you're going to be\n   evicted.\n5. Putting empty packages in the registry. Packages must have SOME\n   functionality. It can be silly, but it can't be nothing. (See also:\n   squatting.)\n6. Doing weird things with the registry, like using it as your own personal\n   application database or otherwise putting non-packagey things into it.\n7. Other things forbidden by the npm\n   [Code of Conduct](https://www.npmjs.com/policies/conduct) such as hateful\n   language, pornographic content, or harassment.\n\nIf you see bad behavior like this, please report it to <abuse@npmjs.com> right\naway. **You are never expected to resolve abusive behavior on your own. We are\nhere to help.**\n\n### Trademarks\n\nIf you think another npm publisher is infringing your trademark, such as by\nusing a confusingly similar package name, email <abuse@npmjs.com> with a link to\nthe package or user account on [https://www.npmjs.com/](https://www.npmjs.com/).\nAttach a copy of your trademark registration certificate.\n\nIf we see that the package's publisher is intentionally misleading others by\nmisusing your registered mark without permission, we will transfer the package\nname to you. Otherwise, we will contact the package publisher and ask them to\nclear up any confusion with changes to their package's `README` file or\nmetadata.\n\n### Changes\n\nThis is a living document and may be updated from time to time. Please refer to\nthe [git history for this document](https://github.com/npm/cli/commits/latest/doc/misc/npm-disputes.md)\nto view the changes.\n\n### License\n\nCopyright (C) npm, Inc., All rights reserved\n\nThis document may be reused under a Creative Commons Attribution-ShareAlike\nLicense.\n\n### See also\n\n* [npm registry](/cli/v6/using-npm/registry)\n* [npm owner](/cli/v6/commands/npm-owner)\n"},{"id":"85305637-95c5-5056-9737-0fe8421cb564","frontmatter":{"title":"Using npm"},"rawBody":"---\ntitle: Using npm\nredirect_from:\n  - using-npm\n  - /cli/using-npm\n  - cli-documentation/misc\n  - cli-documentation/using-npm\n  - /misc/index.html\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/using-npm/index.mdx\n---\n\n<Index depth=\"1\" />\n"},{"id":"5a5e55a6-af1b-51d5-bd52-89f1fe3f0181","frontmatter":{"title":"orgs"},"rawBody":"---\ntitle: orgs\nsection: 7\ndescription: Working with Teams & Orgs\nredirect_from:\n  - /using-npm/orgs\n  - /using-npm/orgs.html\n  - /misc/orgs\n  - /misc/orgs.html\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/using-npm/orgs.md\n---\n\n### Description\n\nThere are three levels of org users:\n\n1. Super admin, controls billing & adding people to the org.\n2. Team admin, manages team membership & package access.\n3. Developer, works on packages they are given access to.  \n\nThe super admin is the only person who can add users to the org because it impacts the monthly bill. The super admin will use the website to manage membership. Every org has a `developers` team that all users are automatically added to.\n\nThe team admin is the person who manages team creation, team membership, and package access for teams. The team admin grants package access to teams, not individuals.\n\nThe developer will be able to access packages based on the teams they are on. Access is either read-write or read-only.\n\nThere are two main commands:\n\n1. `npm team` see [npm team](/cli/v6/commands/npm-team) for more details\n2. `npm access` see [npm access](/cli/v6/commands/npm-access) for more details\n\n### Team Admins create teams\n\n* Check who you’ve added to your org:\n\n```bash\nnpm team ls <org>:developers\n```\n\n* Each org is automatically given a `developers` team, so you can see the whole list of team members in your org. This team automatically gets read-write access to all packages, but you can change that with the `access` command.\n\n* Create a new team:\n\n```bash\nnpm team create <org:team>\n```\n\n* Add members to that team:\n\n```bash\nnpm team add <org:team> <user>\n```\n\n### Publish a package and adjust package access\n\n* In package directory, run\n\n```bash\nnpm init --scope=<org>\n```\nto scope it for your org & publish as usual\n\n* Grant access:  \n\n```bash\nnpm access grant <read-only|read-write> <org:team> [<package>]\n```\n\n* Revoke access:\n\n```bash\nnpm access revoke <org:team> [<package>]\n```\n\n### Monitor your package access\n\n* See what org packages a team member can access:\n\n```bash\nnpm access ls-packages <org> <user>\n```\n\n* See packages available to a specific team:\n\n```bash\nnpm access ls-packages <org:team>\n```\n\n* Check which teams are collaborating on a package:\n\n```bash\nnpm access ls-collaborators <pkg>\n```\n\n### See also\n\n* [npm team](/cli/v6/commands/npm-team)\n* [npm access](/cli/v6/commands/npm-access)\n* [npm scope](/cli/v6/using-npm/scope)\n"},{"id":"460bacc9-db51-579e-9c7e-878cb76764b1","frontmatter":{"title":"registry"},"rawBody":"---\ntitle: registry\nsection: 7\ndescription: The JavaScript Package Registry\nredirect_from:\n  - /using-npm/registry\n  - /using-npm/registry.html\n  - /misc/registry\n  - /misc/registry.html\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/using-npm/registry.md\n---\n\n### Description\n\nTo resolve packages by name and version, npm talks to a registry website\nthat implements the CommonJS Package Registry specification for reading\npackage info.\n\nnpm is configured to use npm, Inc.'s public registry at\n<https://registry.npmjs.org> by default. Use of the npm public registry is\nsubject to terms of use available at <https://www.npmjs.com/policies/terms>.\n\nYou can configure npm to use any compatible registry you like, and even run\nyour own registry. Use of someone else's registry may be governed by their\nterms of use.\n\nnpm's package registry implementation supports several\nwrite APIs as well, to allow for publishing packages and managing user\naccount information.\n\nThe npm public registry is powered by a CouchDB database,\nof which there is a public mirror at\n<https://skimdb.npmjs.com/registry>.  The code for the couchapp is\navailable at <https://github.com/npm/npm-registry-couchapp>.\n\nThe registry URL used is determined by the scope of the package (see\n[`scope`](/cli/v6/using-npm/scope). If no scope is specified, the default registry is used, which is\nsupplied by the `registry` config parameter.  See [`npm config`](/cli/v6/commands/npm-config),\n[`npmrc`](/cli/v6/configuring-npm/npmrc), and [`config`](/cli/v6/using-npm/config) for more on managing npm's configuration.\n\n### Does npm send any information about me back to the registry?\n\nYes.\n\nWhen making requests of the registry npm adds two headers with information\nabout your environment:\n\n* `Npm-Scope` – If your project is scoped, this header will contain its\n  scope. In the future npm hopes to build registry features that use this\n  information to allow you to customize your experience for your\n  organization.\n* `Npm-In-CI` – Set to \"true\" if npm believes this install is running in a\n  continuous integration environment, \"false\" otherwise. This is detected by\n  looking for the following environment variables: `CI`, `TDDIUM`,\n  `JENKINS_URL`, `bamboo.buildKey`. If you'd like to learn more you may find\n  the [original PR](https://github.com/npm/npm-registry-client/pull/129)\n  interesting.\n  This is used to gather better metrics on how npm is used by humans, versus\n  build farms.\n\nThe npm registry does not try to correlate the information in these headers\nwith any authenticated accounts that may be used in the same requests.\n\n### Can I run my own private registry?\n\nYes!\n\nThe easiest way is to replicate the couch database, and use the same (or\nsimilar) design doc to implement the APIs.\n\nIf you set up continuous replication from the official CouchDB, and then\nset your internal CouchDB as the registry config, then you'll be able\nto read any published packages, in addition to your private ones, and by\ndefault will only publish internally. \n\nIf you then want to publish a package for the whole world to see, you can\nsimply override the `--registry` option for that `publish` command.\n\n### I don't want my package published in the official registry. It's private.\n\nSet `\"private\": true` in your package.json to prevent it from being\npublished at all, or\n`\"publishConfig\":{\"registry\":\"http://my-internal-registry.local\"}`\nto force it to be published only to your internal registry.\n\nSee [`package.json`](/cli/v6/configuring-npm/package-json) for more info on what goes in the package.json file.\n\n### Will you replicate from my registry into the public one?\n\nNo.  If you want things to be public, then publish them into the public\nregistry using npm.  What little security there is would be for nought\notherwise.\n\n### Do I have to use couchdb to build a registry that npm can talk to?\n\nNo, but it's way easier.  Basically, yes, you do, or you have to\neffectively implement the entire CouchDB API anyway.\n\n### Is there a website or something to see package docs and such?\n\nYes, head over to <https://www.npmjs.com/>\n\n### See also\n\n* [npm config](/cli/v6/commands/npm-config)\n* [config](/cli/v6/using-npm/config)\n* [npmrc](/cli/v6/configuring-npm/npmrc)\n* [npm developers](/cli/v6/using-npm/developers)\n* [npm disputes](/cli/v6/using-npm/disputes)\n"},{"id":"5b0cb7b5-9273-5a83-9253-6caedb7e5827","frontmatter":{"title":"removal"},"rawBody":"---\ntitle: removal\nsection: 7\ndescription: Cleaning the Slate\nredirect_from:\n  - /using-npm/removal\n  - /using-npm/removal.html\n  - /misc/removal\n  - /misc/removal.html\n  - /misc/removing-npm\n  - /misc/removing-npm.html\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/using-npm/removal.md\n---\n\n### Synopsis\n\nSo sad to see you go.\n\n```bash\nsudo npm uninstall npm -g\n```\n\nOr, if that fails, get the npm source code, and do:\n\n```bash\nsudo make uninstall\n```\n\n### More Severe Uninstalling\n\nUsually, the above instructions are sufficient.  That will remove\nnpm, but leave behind anything you've installed.\n\nIf that doesn't work, or if you require more drastic measures,\ncontinue reading.\n\nNote that this is only necessary for globally-installed packages.  Local\ninstalls are completely contained within a project's `node_modules`\nfolder.  Delete that folder, and everything is gone less a package's\ninstall script is particularly ill-behaved).\n\nThis assumes that you installed node and npm in the default place.  If\nyou configured node with a different `--prefix`, or installed npm with a\ndifferent prefix setting, then adjust the paths accordingly, replacing\n`/usr/local` with your install prefix.\n\nTo remove everything npm-related manually:\n\n```bash\nrm -rf /usr/local/{lib/node{,/.npm,_modules},bin,share/man}/npm*\n```\n\nIf you installed things *with* npm, then your best bet is to uninstall\nthem with npm first, and then install them again once you have a\nproper install.  This can help find any symlinks that are lying\naround:\n\n```bash\nls -laF /usr/local/{lib/node{,/.npm},bin,share/man} | grep npm\n```\n\nPrior to version 0.3, npm used shim files for executables and node\nmodules.  To track those down, you can do the following:\n\n```bash\nfind /usr/local/{lib/node,bin} -exec grep -l npm \\{\\} \\; ;\n```\n\n(This is also in the README file.)\n\n### See also\n\n* [npm uninstall](/cli/v6/commands/npm-uninstall)\n* [npm prune](/cli/v6/commands/npm-prune)\n"},{"id":"24f378eb-e5b7-5cd7-8466-270b73332a88","frontmatter":{"title":"scope"},"rawBody":"---\ntitle: scope\nsection: 7\ndescription: Scoped packages\nredirect_from:\n  - /using-npm/scope\n  - /using-npm/scope.html\n  - /misc/scope\n  - /misc/scope.html\n  - /using-npm/npm-scope\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/using-npm/scope.md\n---\n\n### Description\n\nAll npm packages have a name. Some package names also have a scope. A scope\nfollows the usual rules for package names (URL-safe characters, no leading dots\nor underscores). When used in package names, scopes are preceded by an `@` symbol\nand followed by a slash, e.g.\n\n```bash\n@somescope/somepackagename\n```\n\nScopes are a way of grouping related packages together, and also affect a few\nthings about the way npm treats the package.\n\nEach npm user/organization has their own scope, and only you can add packages\nin your scope. This means you don't have to worry about someone taking your\npackage name ahead of you. Thus it is also a good way to signal official packages\nfor organizations.\n\nScoped packages can be published and installed as of `npm@2` and are supported\nby the primary npm registry. Unscoped packages can depend on scoped packages and\nvice versa. The npm client is backwards-compatible with unscoped registries,\nso it can be used to work with scoped and unscoped registries at the same time.\n\n### Installing scoped packages\n\nScoped packages are installed to a sub-folder of the regular installation\nfolder, e.g. if your other packages are installed in `node_modules/packagename`,\nscoped modules will be installed in `node_modules/@myorg/packagename`. The scope\nfolder (`@myorg`) is simply the name of the scope preceded by an `@` symbol, and can\ncontain any number of scoped packages.\n\nA scoped package is installed by referencing it by name, preceded by an\n`@` symbol, in `npm install`:\n\n```bash\nnpm install @myorg/mypackage\n```\n\nOr in `package.json`:\n\n```json\n\"dependencies\": {\n  \"@myorg/mypackage\": \"^1.3.0\"\n}\n```\n\nNote that if the `@` symbol is omitted, in either case, npm will instead attempt to\ninstall from GitHub; see [`npm install`](/cli/v6/commands/npm-install).\n\n### Requiring scoped packages\n\nBecause scoped packages are installed into a scope folder, you have to\ninclude the name of the scope when requiring them in your code, e.g.\n\n```javascript\nrequire('@myorg/mypackage')\n```\n\nThere is nothing special about the way Node treats scope folders. This\nsimply requires the `mypackage` module in the folder named `@myorg`.\n\n### Publishing scoped packages\n\nScoped packages can be published from the CLI as of `npm@2` and can be\npublished to any registry that supports them, including the primary npm\nregistry.\n\n(As of 2015-04-19, and with npm 2.0 or better, the primary npm registry\n**does** support scoped packages.)\n\nIf you wish, you may associate a scope with a registry; see below.\n\n#### Publishing public scoped packages to the primary npm registry\n\nTo publish a public scoped package, you must specify `--access public` with\nthe initial publication. This will publish the package and set access\nto `public` as if you had run `npm access public` after publishing.\n\n#### Publishing private scoped packages to the npm registry\n\nTo publish a private scoped package to the npm registry, you must have\nan [npm Private Modules](https://docs.npmjs.com/private-modules/intro)\naccount.\n\nYou can then publish the module with `npm publish` or `npm publish\n--access restricted`, and it will be present in the npm registry, with\nrestricted access. You can then change the access permissions, if\ndesired, with `npm access` or on the npmjs.com website.\n\n### Associating a scope with a registry\n\nScopes can be associated with a separate registry. This allows you to\nseamlessly use a mix of packages from the primary npm registry and one or more\nprivate registries, such as npm Enterprise.\n\nYou can associate a scope with a registry at login, e.g.\n\n```bash\nnpm login --registry=http://reg.example.com --scope=@myco\n```\n\nScopes have a many-to-one relationship with registries: one registry can\nhost multiple scopes, but a scope only ever points to one registry.\n\nYou can also associate a scope with a registry using `npm config`:\n\n```bash\nnpm config set @myco:registry http://reg.example.com\n```\n\nOnce a scope is associated with a registry, any `npm install` for a package\nwith that scope will request packages from that registry instead. Any\n`npm publish` for a package name that contains the scope will be published to\nthat registry instead.\n\n### See also\n\n* [npm install](/cli/v6/commands/npm-install)\n* [npm publish](/cli/v6/commands/npm-publish)\n* [npm access](/cli/v6/commands/npm-access)\n* [npm registry](/cli/v6/using-npm/registry)\n"},{"id":"670b3c4b-f44f-5740-a765-2174f54f48d8","frontmatter":{"title":"scripts"},"rawBody":"---\ntitle: scripts\nsection: 7\ndescription: How npm handles the \"scripts\" field\nredirect_from:\n  - /using-npm/scripts\n  - /using-npm/scripts.html\n  - /misc/scripts\n  - /misc/scripts.html\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/using-npm/scripts.md\n---\n\n### Description\n\nThe `\"scripts\"` property of of your `package.json` file supports a number of built-in scripts and their preset life cycle events as well as arbitrary scripts. These all can be executed by running `npm run-script <stage>` or `npm run <stage>` for short. *Pre* and *post* commands with matching names will be run for those as well (e.g. `premyscript`, `myscript`, `postmyscript`). Scripts from dependencies can be run with `npm explore <pkg> -- npm run <stage>`.\n\n### Pre & Post Scripts\n\nTo create \"pre\" or \"post\" scripts for any scripts defined in the `\"scripts\"` section of the `package.json`, simply create another script *with a matching name* and add \"pre\" or \"post\" to the beginning of them.\n\n```json\n{\n  \"scripts\": {\n    \"precompress\": \"{{ executes BEFORE the `compress` script }}\",\n    \"compress\": \"{{ run command to compress files }}\",\n    \"postcompress\": \"{{ executes AFTER `compress` script }}\"\n  }\n}\n```\n\n### Life Cycle Scripts\n\nThere are some special life cycle scripts that happen only in certain situations. These scripts happen in addtion to the \"pre\" and \"post\" script.\n* `prepare`, `prepublish`, `prepublishOnly`, `prepack`, `postpack`\n\n**prepare** (since `npm@4.0.0`)\n* Runs BEFORE the package is packed\n* Runs BEFORE the package is published\n* Runs on local `npm install` without any arguments\n* Run AFTER `prepublish`, but BEFORE `prepublishOnly`\n* NOTE: If a package being installed through git contains a `prepare` script, its `dependencies` and `devDependencies` will be installed, and the prepare script will be run, before the package is packaged and installed.\n\n**prepublish** (DEPRECATED)\n* Same as `prepare`\n\n**prepublishOnly**\n* Runs BEFORE the package is prepared and packed, ONLY on `npm publish`.\n\n**prepack**\n* Runs BEFORE a tarball is packed (on \"`npm pack`\", \"`npm publish`\", and when installing a git dependencies).\n* NOTE: \"`npm run pack`\" is NOT the same as \"`npm pack`\". \"`npm run pack`\" is an arbitrary user defined script name, where as, \"`npm pack`\" is a CLI defined command.\n\n**postpack**\n* Runs AFTER the tarball has been generated and moved to its final destination.\n\n#### Prepare and Prepublish\n\n**Deprecation Note: prepublish**\n\nSince `npm@1.1.71`, the npm CLI has run the `prepublish` script for both `npm publish` and `npm install`, because it's a convenient way to prepare a package for use (some common use cases are described in the section below).  It has also turned out to be, in practice, [very confusing](https://github.com/npm/npm/issues/10074).  As of `npm@4.0.0`, a new event has been introduced, `prepare`, that preserves this existing behavior. A _new_ event, `prepublishOnly` has been added as a transitional strategy to allow users to avoid the confusing behavior of existing npm versions and only run on `npm publish` (for instance, running the tests one last time to ensure they're in good shape).\n\nSee <https://github.com/npm/npm/issues/10074> for a much lengthier justification, with further reading, for this change.\n\n**Use Cases**\n\nIf you need to perform operations on your package before it is used, in a way that is not dependent on the operating system or architecture of the target system, use a `prepublish` script. This includes tasks such as:\n\n* Compiling CoffeeScript source code into JavaScript.\n* Creating minified versions of JavaScript source code.\n* Fetching remote resources that your package will use.\n\nThe advantage of doing these things at `prepublish` time is that they can be done once, in a single place, thus reducing complexity and variability. Additionally, this means that:\n\n* You can depend on `coffee-script` as a `devDependency`, and thus\n  your users don't need to have it installed.\n* You don't need to include minifiers in your package, reducing\n  the size for your users.\n* You don't need to rely on your users having `curl` or `wget` or\n  other system tools on the target machines.\n\n### Life Cycle Operation Order\n\n#### [`npm publish`](/cli/v6/commands/npm-publish)\n\n* `prepublishOnly`\n* `prepare`\n* `prepublish`\n* `publish`\n* `postpublish`\n\n#### [`npm pack`](/cli/v6/commands/npm-pack)\n\n* `prepack`\n* `postpack`\n\n#### [`npm install`](/cli/v6/commands/npm-install)\n\n* `preinstall`\n* `install`\n* `postinstall`\n\nAlso triggers\n\n* `prepublish` (when on local)\n* `prepare` (when on local)\n\n#### [`npm start`](/cli/v6/commands/npm-start)\n\n`npm run start` has an `npm start` shorthand.\n\n* `prestart`\n* `start`\n* `poststart`\n\n### Default Values\nnpm will default some script values based on package contents.\n\n* `\"start\": \"node server.js\"`:\n\n  If there is a `server.js` file in the root of your package, then npm\n  will default the `start` command to `node server.js`.\n\n* `\"install\": \"node-gyp rebuild\"`:\n\n  If there is a `binding.gyp` file in the root of your package and you\n  haven't defined your own `install` or `preinstall` scripts, npm will\n  default the `install` command to compile using node-gyp.\n\n### User\n\nIf npm was invoked with root privileges, then it will change the uid\nto the user account or uid specified by the `user` config, which\ndefaults to `nobody`.  Set the `unsafe-perm` flag to run scripts with\nroot privileges.\n\n### Environment\n\nPackage scripts run in an environment where many pieces of information\nare made available regarding the setup of npm and the current state of\nthe process.\n\n\n#### path\n\nIf you depend on modules that define executable scripts, like test\nsuites, then those executables will be added to the `PATH` for\nexecuting the scripts.  So, if your package.json has this:\n\n```json\n{ \n  \"name\" : \"foo\", \n  \"dependencies\" : { \n    \"bar\" : \"0.1.x\" \n  }, \n  \"scripts\": { \n    \"start\" : \"bar ./test\" \n  } \n}\n```\n\nthen you could run `npm start` to execute the `bar` script, which is\nexported into the `node_modules/.bin` directory on `npm install`.\n\n#### package.json vars\n\nThe package.json fields are tacked onto the `npm_package_` prefix. So,\nfor instance, if you had `{\"name\":\"foo\", \"version\":\"1.2.5\"}` in your\npackage.json file, then your package scripts would have the\n`npm_package_name` environment variable set to \"foo\", and the\n`npm_package_version` set to \"1.2.5\".  You can access these variables \nin your code with `process.env.npm_package_name` and \n`process.env.npm_package_version`, and so on for other fields.\n\n#### configuration\n\nConfiguration parameters are put in the environment with the\n`npm_config_` prefix. For instance, you can view the effective `root`\nconfig by checking the `npm_config_root` environment variable.\n\n#### Special: package.json \"config\" object\n\nThe package.json \"config\" keys are overwritten in the environment if\nthere is a config param of `<name>[@<version>]:<key>`.  For example,\nif the package.json has this:\n\n```json\n{ \n  \"name\" : \"foo\", \n  \"config\" : { \n    \"port\" : \"8080\" \n  }, \n  \"scripts\" : { \n    \"start\" : \"node server.js\" \n  } \n}\n```\n\nand the server.js is this:\n\n```javascript\nhttp.createServer(...).listen(process.env.npm_package_config_port)\n```\n\nthen the user could change the behavior by doing:\n\n```bash\n  npm config set foo:port 80\n  ```\n\n#### current lifecycle event\n\nLastly, the `npm_lifecycle_event` environment variable is set to\nwhichever stage of the cycle is being executed. So, you could have a\nsingle script used for different parts of the process which switches\nbased on what's currently happening.\n\nObjects are flattened following this format, so if you had\n`{\"scripts\":{\"install\":\"foo.js\"}}` in your package.json, then you'd\nsee this in the script:\n\n```bash\nprocess.env.npm_package_scripts_install === \"foo.js\"\n```\n\n### Examples\n\nFor example, if your package.json contains this:\n\n```json\n{ \n  \"scripts\" : { \n    \"install\" : \"scripts/install.js\", \n    \"postinstall\" : \"scripts/install.js\", \n    \"uninstall\" : \"scripts/uninstall.js\"\n  }\n}\n```\n\nthen `scripts/install.js` will be called for the install\nand post-install stages of the lifecycle, and `scripts/uninstall.js`\nwill be called when the package is uninstalled.  Since\n`scripts/install.js` is running for two different phases, it would\nbe wise in this case to look at the `npm_lifecycle_event` environment\nvariable.\n\nIf you want to run a make command, you can do so.  This works just\nfine:\n\n```json\n{ \n  \"scripts\" : { \n    \"preinstall\" : \"./configure\", \n    \"install\" : \"make && make install\", \n    \"test\" : \"make test\"\n  }\n}\n```\n\n### Exiting\n\nScripts are run by passing the line as a script argument to `sh`.\n\nIf the script exits with a code other than 0, then this will abort the\nprocess.\n\nNote that these script files don't have to be nodejs or even\njavascript programs. They just have to be some kind of executable\nfile.\n\n### Hook Scripts\n\nIf you want to run a specific script at a specific lifecycle event for\nALL packages, then you can use a hook script.\n\nPlace an executable file at `node_modules/.hooks/{eventname}`, and\nit'll get run for all packages when they are going through that point\nin the package lifecycle for any packages installed in that root.\n\nHook scripts are run exactly the same way as package.json scripts.\nThat is, they are in a separate child process, with the env described\nabove.\n\n### Best Practices\n\n* Don't exit with a non-zero error code unless you *really* mean it.\n  Except for uninstall scripts, this will cause the npm action to\n  fail, and potentially be rolled back.  If the failure is minor or\n  only will prevent some optional features, then it's better to just\n  print a warning and exit successfully.\n* Try not to use scripts to do what npm can do for you.  Read through\n  [`package.json`](/cli/v6/configuring-npm/package-json) to see all the things that you can specify and enable\n  by simply describing your package appropriately.  In general, this\n  will lead to a more robust and consistent state.\n* Inspect the env to determine where to put things.  For instance, if\n  the `npm_config_binroot` environment variable is set to `/home/user/bin`, then\n  don't try to install executables into `/usr/local/bin`.  The user\n  probably set it up that way for a reason.\n* Don't prefix your script commands with \"sudo\".  If root permissions\n  are required for some reason, then it'll fail with that error, and\n  the user will sudo the npm command in question.\n* Don't use `install`. Use a `.gyp` file for compilation, and `prepublish`\n  for anything else. You should almost never have to explicitly set a\n  preinstall or install script. If you are doing this, please consider if\n  there is another option. The only valid use of `install` or `preinstall`\n  scripts is for compilation which must be done on the target architecture.\n\n### See Also\n\n* [npm run-script](/cli/v6/commands/npm-run-script)\n* [package.json](/cli/v6/configuring-npm/package-json)\n* [npm developers](/cli/v6/using-npm/developers)\n* [npm install](/cli/v6/commands/npm-install)\n"},{"id":"accf5699-ba99-5edf-854a-9c3278cc9060","frontmatter":{"title":"semver"},"rawBody":"---\ntitle: semver\nsection: 7\ndescription: The semantic versioner for npm\nredirect_from:\n  - /using-npm/semver\n  - /using-npm/semver.html\n  - /misc/semver\n  - /misc/semver.html\ngithub_repo: npm/cli\ngithub_branch: latest\ngithub_path: docs/content/using-npm/semver.md\n---\n\n## Install\n\n```bash\nnpm install --save semver\n````\n\n## Usage\n\nAs a node module:\n\n```js\nconst semver = require('semver')\n\nsemver.valid('1.2.3') // '1.2.3'\nsemver.valid('a.b.c') // null\nsemver.clean('  =v1.2.3   ') // '1.2.3'\nsemver.satisfies('1.2.3', '1.x || >=2.5.0 || 5.0.0 - 7.2.3') // true\nsemver.gt('1.2.3', '9.8.7') // false\nsemver.lt('1.2.3', '9.8.7') // true\nsemver.minVersion('>=1.0.0') // '1.0.0'\nsemver.valid(semver.coerce('v2')) // '2.0.0'\nsemver.valid(semver.coerce('42.6.7.9.3-alpha')) // '42.6.7'\n```\n\nAs a command-line utility:\n\n```\n$ semver -h\n\nA JavaScript implementation of the https://semver.org/ specification\nCopyright Isaac Z. Schlueter\n\nUsage: semver [options] <version> [<version> [...]]\nPrints valid versions sorted by SemVer precedence\n\nOptions:\n-r --range <range>\n        Print versions that match the specified range.\n\n-i --increment [<level>]\n        Increment a version by the specified level.  Level can\n        be one of: major, minor, patch, premajor, preminor,\n        prepatch, or prerelease.  Default level is 'patch'.\n        Only one version may be specified.\n\n--preid <identifier>\n        Identifier to be used to prefix premajor, preminor,\n        prepatch or prerelease version increments.\n\n-l --loose\n        Interpret versions and ranges loosely\n\n-p --include-prerelease\n        Always include prerelease versions in range matching\n\n-c --coerce\n        Coerce a string into SemVer if possible\n        (does not imply --loose)\n\nProgram exits successfully if any valid version satisfies\nall supplied ranges, and prints all satisfying versions.\n\nIf no satisfying versions are found, then exits failure.\n\nVersions are printed in ascending order, so supplying\nmultiple versions to the utility will just sort them.\n```\n\n## Versions\n\nA \"version\" is described by the `v2.0.0` specification found at\n<https://semver.org/>.\n\nA leading `\"=\"` or `\"v\"` character is stripped off and ignored.\n\n## Ranges\n\nA `version range` is a set of `comparators` which specify versions\nthat satisfy the range.\n\nA `comparator` is composed of an `operator` and a `version`.  The set\nof primitive `operators` is:\n\n* `<` Less than\n* `<=` Less than or equal to\n* `>` Greater than\n* `>=` Greater than or equal to\n* `=` Equal.  If no operator is specified, then equality is assumed,\n  so this operator is optional, but MAY be included.\n\nFor example, the comparator `>=1.2.7` would match the versions\n`1.2.7`, `1.2.8`, `2.5.3`, and `1.3.9`, but not the versions `1.2.6`\nor `1.1.0`.\n\nComparators can be joined by whitespace to form a `comparator set`,\nwhich is satisfied by the **intersection** of all of the comparators\nit includes.\n\nA range is composed of one or more comparator sets, joined by `||`.  A\nversion matches a range if and only if every comparator in at least\none of the `||`-separated comparator sets is satisfied by the version.\n\nFor example, the range `>=1.2.7 <1.3.0` would match the versions\n`1.2.7`, `1.2.8`, and `1.2.99`, but not the versions `1.2.6`, `1.3.0`,\nor `1.1.0`.\n\nThe range `1.2.7 || >=1.2.9 <2.0.0` would match the versions `1.2.7`,\n`1.2.9`, and `1.4.6`, but not the versions `1.2.8` or `2.0.0`.\n\n### Prerelease Tags\n\nIf a version has a prerelease tag (for example, `1.2.3-alpha.3`) then\nit will only be allowed to satisfy comparator sets if at least one\ncomparator with the same `[major, minor, patch]` tuple also has a\nprerelease tag.\n\nFor example, the range `>1.2.3-alpha.3` would be allowed to match the\nversion `1.2.3-alpha.7`, but it would *not* be satisfied by\n`3.4.5-alpha.9`, even though `3.4.5-alpha.9` is technically \"greater\nthan\" `1.2.3-alpha.3` according to the SemVer sort rules.  The version\nrange only accepts prerelease tags on the `1.2.3` version.  The\nversion `3.4.5` *would* satisfy the range, because it does not have a\nprerelease flag, and `3.4.5` is greater than `1.2.3-alpha.7`.\n\nThe purpose for this behavior is twofold.  First, prerelease versions\nfrequently are updated very quickly, and contain many breaking changes\nthat are (by the author's design) not yet fit for public consumption.\nTherefore, by default, they are excluded from range matching\nsemantics.\n\nSecond, a user who has opted into using a prerelease version has\nclearly indicated the intent to use *that specific* set of\nalpha/beta/rc versions.  By including a prerelease tag in the range,\nthe user is indicating that they are aware of the risk.  However, it\nis still not appropriate to assume that they have opted into taking a\nsimilar risk on the *next* set of prerelease versions.\n\nNote that this behavior can be suppressed (treating all prerelease\nversions as if they were normal versions, for the purpose of range\nmatching) by setting the `includePrerelease` flag on the options\nobject to any\n[functions](https://github.com/npm/node-semver#functions) that do\nrange matching.\n\n#### Prerelease Identifiers\n\nThe method `.inc` takes an additional `identifier` string argument that\nwill append the value of the string as a prerelease identifier:\n\n```javascript\nsemver.inc('1.2.3', 'prerelease', 'beta')\n// '1.2.4-beta.0'\n```\n\ncommand-line example:\n\n```bash\n$ semver 1.2.3 -i prerelease --preid beta\n1.2.4-beta.0\n```\n\nWhich then can be used to increment further:\n\n```bash\n$ semver 1.2.4-beta.0 -i prerelease\n1.2.4-beta.1\n```\n\n### Advanced Range Syntax\n\nAdvanced range syntax desugars to primitive comparators in\ndeterministic ways.\n\nAdvanced ranges may be combined in the same way as primitive\ncomparators using white space or `||`.\n\n#### Hyphen Ranges `X.Y.Z - A.B.C`\n\nSpecifies an inclusive set.\n\n* `1.2.3 - 2.3.4` := `>=1.2.3 <=2.3.4`\n\nIf a partial version is provided as the first version in the inclusive\nrange, then the missing pieces are replaced with zeroes.\n\n* `1.2 - 2.3.4` := `>=1.2.0 <=2.3.4`\n\nIf a partial version is provided as the second version in the\ninclusive range, then all versions that start with the supplied parts\nof the tuple are accepted, but nothing that would be greater than the\nprovided tuple parts.\n\n* `1.2.3 - 2.3` := `>=1.2.3 <2.4.0`\n* `1.2.3 - 2` := `>=1.2.3 <3.0.0`\n\n#### X-Ranges `1.2.x` `1.X` `1.2.*` `*`\n\nAny of `X`, `x`, or `*` may be used to \"stand in\" for one of the\nnumeric values in the `[major, minor, patch]` tuple.\n\n* `*` := `>=0.0.0` (Any version satisfies)\n* `1.x` := `>=1.0.0 <2.0.0` (Matching major version)\n* `1.2.x` := `>=1.2.0 <1.3.0` (Matching major and minor versions)\n\nA partial version range is treated as an X-Range, so the special\ncharacter is in fact optional.\n\n* `\"\"` (empty string) := `*` := `>=0.0.0`\n* `1` := `1.x.x` := `>=1.0.0 <2.0.0`\n* `1.2` := `1.2.x` := `>=1.2.0 <1.3.0`\n\n#### Tilde Ranges `~1.2.3` `~1.2` `~1`\n\nAllows patch-level changes if a minor version is specified on the\ncomparator.  Allows minor-level changes if not.\n\n* `~1.2.3` := `>=1.2.3 <1.(2+1).0` := `>=1.2.3 <1.3.0`\n* `~1.2` := `>=1.2.0 <1.(2+1).0` := `>=1.2.0 <1.3.0` (Same as `1.2.x`)\n* `~1` := `>=1.0.0 <(1+1).0.0` := `>=1.0.0 <2.0.0` (Same as `1.x`)\n* `~0.2.3` := `>=0.2.3 <0.(2+1).0` := `>=0.2.3 <0.3.0`\n* `~0.2` := `>=0.2.0 <0.(2+1).0` := `>=0.2.0 <0.3.0` (Same as `0.2.x`)\n* `~0` := `>=0.0.0 <(0+1).0.0` := `>=0.0.0 <1.0.0` (Same as `0.x`)\n* `~1.2.3-beta.2` := `>=1.2.3-beta.2 <1.3.0` Note that prereleases in\n  the `1.2.3` version will be allowed, if they are greater than or\n  equal to `beta.2`.  So, `1.2.3-beta.4` would be allowed, but\n  `1.2.4-beta.2` would not, because it is a prerelease of a\n  different `[major, minor, patch]` tuple.\n\n#### Caret Ranges `^1.2.3` `^0.2.5` `^0.0.4`\n\nAllows changes that do not modify the left-most non-zero digit in the\n`[major, minor, patch]` tuple.  In other words, this allows patch and\nminor updates for versions `1.0.0` and above, patch updates for\nversions `0.X >=0.1.0`, and *no* updates for versions `0.0.X`.\n\nMany authors treat a `0.x` version as if the `x` were the major\n\"breaking-change\" indicator.\n\nCaret ranges are ideal when an author may make breaking changes\nbetween `0.2.4` and `0.3.0` releases, which is a common practice.\nHowever, it presumes that there will *not* be breaking changes between\n`0.2.4` and `0.2.5`.  It allows for changes that are presumed to be\nadditive (but non-breaking), according to commonly observed practices.\n\n* `^1.2.3` := `>=1.2.3 <2.0.0`\n* `^0.2.3` := `>=0.2.3 <0.3.0`\n* `^0.0.3` := `>=0.0.3 <0.0.4`\n* `^1.2.3-beta.2` := `>=1.2.3-beta.2 <2.0.0` Note that prereleases in\n  the `1.2.3` version will be allowed, if they are greater than or\n  equal to `beta.2`.  So, `1.2.3-beta.4` would be allowed, but\n  `1.2.4-beta.2` would not, because it is a prerelease of a\n  different `[major, minor, patch]` tuple.\n* `^0.0.3-beta` := `>=0.0.3-beta <0.0.4`  Note that prereleases in the\n  `0.0.3` version *only* will be allowed, if they are greater than or\n  equal to `beta`.  So, `0.0.3-pr.2` would be allowed.\n\nWhen parsing caret ranges, a missing `patch` value desugars to the\nnumber `0`, but will allow flexibility within that value, even if the\nmajor and minor versions are both `0`.\n\n* `^1.2.x` := `>=1.2.0 <2.0.0`\n* `^0.0.x` := `>=0.0.0 <0.1.0`\n* `^0.0` := `>=0.0.0 <0.1.0`\n\nA missing `minor` and `patch` values will desugar to zero, but also\nallow flexibility within those values, even if the major version is\nzero.\n\n* `^1.x` := `>=1.0.0 <2.0.0`\n* `^0.x` := `>=0.0.0 <1.0.0`\n\n### Range Grammar\n\nPutting all this together, here is a Backus-Naur grammar for ranges,\nfor the benefit of parser authors:\n\n```bnf\nrange-set  ::= range ( logical-or range ) *\nlogical-or ::= ( ' ' ) * '||' ( ' ' ) *\nrange      ::= hyphen | simple ( ' ' simple ) * | ''\nhyphen     ::= partial ' - ' partial\nsimple     ::= primitive | partial | tilde | caret\nprimitive  ::= ( '<' | '>' | '>=' | '<=' | '=' ) partial\npartial    ::= xr ( '.' xr ( '.' xr qualifier ? )? )?\nxr         ::= 'x' | 'X' | '*' | nr\nnr         ::= '0' | ['1'-'9'] ( ['0'-'9'] ) *\ntilde      ::= '~' partial\ncaret      ::= '^' partial\nqualifier  ::= ( '-' pre )? ( '+' build )?\npre        ::= parts\nbuild      ::= parts\nparts      ::= part ( '.' part ) *\npart       ::= nr | [-0-9A-Za-z]+\n```\n\n## Functions\n\nAll methods and classes take a final `options` object argument.  All\noptions in this object are `false` by default.  The options supported\nare:\n\n- `loose`  Be more forgiving about not-quite-valid semver strings.\n  (Any resulting output will always be 100% strict compliant, of\n  course.)  For backwards compatibility reasons, if the `options`\n  argument is a boolean value instead of an object, it is interpreted\n  to be the `loose` param.\n- `includePrerelease`  Set to suppress the [default\n  behavior](https://github.com/npm/node-semver#prerelease-tags) of\n  excluding prerelease tagged versions from ranges unless they are\n  explicitly opted into.\n\nStrict-mode Comparators and Ranges will be strict about the SemVer\nstrings that they parse.\n\n* `valid(v)`: Return the parsed version, or null if it's not valid.\n* `inc(v, release)`: Return the version incremented by the release\n  type (`major`,   `premajor`, `minor`, `preminor`, `patch`,\n  `prepatch`, or `prerelease`), or null if it's not valid\n  * `premajor` in one call will bump the version up to the next major\n    version and down to a prerelease of that major version.\n    `preminor`, and `prepatch` work the same way.\n  * If called from a non-prerelease version, the `prerelease` will work the\n    same as `prepatch`. It increments the patch version, then makes a\n    prerelease. If the input version is already a prerelease it simply\n    increments it.\n* `prerelease(v)`: Returns an array of prerelease components, or null\n  if none exist. Example: `prerelease('1.2.3-alpha.1') -> ['alpha', 1]`\n* `major(v)`: Return the major version number.\n* `minor(v)`: Return the minor version number.\n* `patch(v)`: Return the patch version number.\n* `intersects(r1, r2, loose)`: Return true if the two supplied ranges\n  or comparators intersect.\n* `parse(v)`: Attempt to parse a string as a semantic version, returning either\n  a `SemVer` object or `null`.\n\n### Comparison\n\n* `gt(v1, v2)`: `v1 > v2`\n* `gte(v1, v2)`: `v1 >= v2`\n* `lt(v1, v2)`: `v1 < v2`\n* `lte(v1, v2)`: `v1 <= v2`\n* `eq(v1, v2)`: `v1 == v2` This is true if they're logically equivalent,\n  even if they're not the exact same string.  You already know how to\n  compare strings.\n* `neq(v1, v2)`: `v1 != v2` The opposite of `eq`.\n* `cmp(v1, comparator, v2)`: Pass in a comparison string, and it'll call\n  the corresponding function above.  `\"===\"` and `\"!==\"` do simple\n  string comparison, but are included for completeness.  Throws if an\n  invalid comparison string is provided.\n* `compare(v1, v2)`: Return `0` if `v1 == v2`, or `1` if `v1` is greater, or `-1` if\n  `v2` is greater.  Sorts in ascending order if passed to `Array.sort()`.\n* `rcompare(v1, v2)`: The reverse of compare.  Sorts an array of versions\n  in descending order when passed to `Array.sort()`.\n* `diff(v1, v2)`: Returns difference between two versions by the release type\n  (`major`, `premajor`, `minor`, `preminor`, `patch`, `prepatch`, or `prerelease`),\n  or null if the versions are the same.\n\n### Comparators\n\n* `intersects(comparator)`: Return true if the comparators intersect\n\n### Ranges\n\n* `validRange(range)`: Return the valid range or null if it's not valid\n* `satisfies(version, range)`: Return true if the version satisfies the\n  range.\n* `maxSatisfying(versions, range)`: Return the highest version in the list\n  that satisfies the range, or `null` if none of them do.\n* `minSatisfying(versions, range)`: Return the lowest version in the list\n  that satisfies the range, or `null` if none of them do.\n* `minVersion(range)`: Return the lowest version that can possibly match\n  the given range.\n* `gtr(version, range)`: Return `true` if version is greater than all the\n  versions possible in the range.\n* `ltr(version, range)`: Return `true` if version is less than all the\n  versions possible in the range.\n* `outside(version, range, hilo)`: Return true if the version is outside\n  the bounds of the range in either the high or low direction.  The\n  `hilo` argument must be either the string `'>'` or `'<'`.  (This is\n  the function called by `gtr` and `ltr`.)\n* `intersects(range)`: Return true if any of the ranges comparators intersect\n\nNote that, since ranges may be non-contiguous, a version might not be\ngreater than a range, less than a range, *or* satisfy a range!  For\nexample, the range `1.2 <1.2.9 || >2.0.0` would have a hole from `1.2.9`\nuntil `2.0.0`, so the version `1.2.10` would not be greater than the\nrange (because `2.0.1` satisfies, which is higher), nor less than the\nrange (since `1.2.8` satisfies, which is lower), and it also does not\nsatisfy the range.\n\nIf you want to know if a version satisfies or does not satisfy a\nrange, use the `satisfies(version, range)` function.\n\n### Coercion\n\n* `coerce(version)`: Coerces a string to semver if possible\n\nThis aims to provide a very forgiving translation of a non-semver string to\nsemver. It looks for the first digit in a string, and consumes all\nremaining characters which satisfy at least a partial semver (e.g., `1`,\n`1.2`, `1.2.3`) up to the max permitted length (256 characters).  Longer\nversions are simply truncated (`4.6.3.9.2-alpha2` becomes `4.6.3`).  All\nsurrounding text is simply ignored (`v3.4 replaces v3.3.1` becomes\n`3.4.0`).  Only text which lacks digits will fail coercion (`version one`\nis not valid).  The maximum  length for any semver component considered for\ncoercion is 16 characters; longer components will be ignored\n(`10000000000000000.4.7.4` becomes `4.7.4`).  The maximum value for any\nsemver component is `Number.MAX_SAFE_INTEGER || (2**53 - 1)`; higher value\ncomponents are invalid (`9999999999999999.4.7.4` is likely invalid).\n"},{"id":"1e4a42f7-70c5-5822-9379-bf6975f29371","frontmatter":{"title":"CLI Commands"},"rawBody":"---\ntitle: CLI Commands\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/index.mdx\n---\n\n<Index depth=\"1\" />\n"},{"id":"e7ff7e32-1d85-5725-9344-f82c87d91237","frontmatter":{"title":"npm-access"},"rawBody":"---\ntitle: npm-access\nsection: 1\ndescription: Set access level on published packages\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-access.md\n---\n\n### Synopsis\n\n```bash\nnpm access public [<package>]\nnpm access restricted [<package>]\n\nnpm access grant <read-only|read-write> <scope:team> [<package>]\nnpm access revoke <scope:team> [<package>]\n\nnpm access 2fa-required [<package>]\nnpm access 2fa-not-required [<package>]\n\nnpm access ls-packages [<user>|<scope>|<scope:team>]\nnpm access ls-collaborators [<package> [<user>]]\nnpm access edit [<package>]\n```\n\n### Description\n\nUsed to set access controls on private packages.\n\nFor all of the subcommands, `npm access` will perform actions on the packages\nin the current working directory if no package name is passed to the\nsubcommand.\n\n* public / restricted:\n  Set a package to be either publicly accessible or restricted.\n\n* grant / revoke:\n  Add or remove the ability of users and teams to have read-only or read-write\n  access to a package.\n\n* 2fa-required / 2fa-not-required:\n  Configure whether a package requires that anyone publishing it have two-factor\n  authentication enabled on their account.\n\n* ls-packages:\n  Show all of the packages a user or a team is able to access, along with the\n  access level, except for read-only public packages (it won't print the whole\n  registry listing)\n\n* ls-collaborators:\n  Show all of the access privileges for a package. Will only show permissions\n  for packages to which you have at least read access. If `<user>` is passed in,\n  the list is filtered only to teams _that_ user happens to belong to.\n\n* edit:\n  Set the access privileges for a package at once using `$EDITOR`.\n\n### Details\n\n`npm access` always operates directly on the current registry, configurable\nfrom the command line using `--registry=<registry url>`.\n\nUnscoped packages are *always public*.\n\nScoped packages *default to restricted*, but you can either publish them as\npublic using `npm publish --access=public`, or set their access as public using\n`npm access public` after the initial publish.\n\nYou must have privileges to set the access of a package:\n\n* You are an owner of an unscoped or scoped package.\n* You are a member of the team that owns a scope.\n* You have been given read-write privileges for a package, either as a member\n  of a team or directly as an owner.\n\nIf you have two-factor authentication enabled then you'll have to pass in an\notp with `--otp` when making access changes.\n\nIf your account is not paid, then attempts to publish scoped packages will fail\nwith an HTTP 402 status code (logically enough), unless you use\n`--access=public`.\n\nManagement of teams and team memberships is done with the `npm team` command.\n\n### See Also\n\n* [`libnpmaccess`](https://npm.im/libnpmaccess)\n* [npm team](/cli/v7/commands/npm-team)\n* [npm publish](/cli/v7/commands/npm-publish)\n* [npm config](/cli/v7/commands/npm-config)\n* [npm registry](/cli/v7/using-npm/registry)\n"},{"id":"6fa754d5-9546-5dec-91a0-9f9c5c96aac5","frontmatter":{"title":"npm-adduser"},"rawBody":"---\ntitle: npm-adduser\nsection: 1\ndescription: Add a registry user account\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-adduser.md\n---\n\n### Synopsis\n\n```bash\nnpm adduser [--registry=url] [--scope=@orgname] [--always-auth] [--auth-type=legacy]\n\naliases: login, add-user\n```\n\n### Description\n\nCreate or verify a user named `<username>` in the specified registry, and\nsave the credentials to the `.npmrc` file. If no registry is specified,\nthe default registry will be used (see [`config`](/cli/v7/using-npm/config)).\n\nThe username, password, and email are read in from prompts.\n\nTo reset your password, go to <https://www.npmjs.com/forgot>\n\nTo change your email address, go to <https://www.npmjs.com/email-edit>\n\nYou may use this command multiple times with the same user account to\nauthorize on a new machine.  When authenticating on a new machine,\nthe username, password and email address must all match with\nyour existing record.\n\n`npm login` is an alias to `adduser` and behaves exactly the same way.\n\n### Configuration\n\n#### registry\n\nDefault: https://registry.npmjs.org/\n\nThe base URL of the npm package registry. If `scope` is also specified,\nthis registry will only be used for packages with that scope. `scope` defaults\nto the scope of the project directory you're currently in, if any. See [`scope`](/cli/v7/using-npm/scope).\n\n#### scope\n\nDefault: none\n\nIf specified, the user and login credentials given will be associated\nwith the specified scope. See [`scope`](/cli/v7/using-npm/scope). You can use both at the same time,\ne.g.\n\n```bash\n    npm adduser --registry=http://myregistry.example.com --scope=@myco\n```    \n\nThis will set a registry for the given scope and login or create a user for\nthat registry at the same time.\n\n#### always-auth\n\nDefault: false\n\nIf specified, save configuration indicating that all requests to the given\nregistry should include authorization information. Useful for private\nregistries. Can be used with `--registry` and / or `--scope`, e.g.\n\n```bash\n    npm adduser --registry=http://private-registry.example.com --always-auth\n```\n\nThis will ensure that all requests to that registry (including for tarballs)\ninclude an authorization header. This setting may be necessary for use with\nprivate registries where metadata and package tarballs are stored on hosts with\ndifferent hostnames. See `always-auth` in [`config`](/cli/v7/using-npm/config) for more details on always-auth. Registry-specific configuration of `always-auth` takes precedence over any global configuration.\n\n#### auth-type\n\n* Default: `'legacy'`\n* Type: `'legacy'`, `'sso'`, `'saml'`, `'oauth'`\n\nWhat authentication strategy to use with `adduser`/`login`. Some npm registries\n(for example, npmE) might support alternative auth strategies besides classic\nusername/password entry in legacy npm.\n\n### See Also\n\n* [npm registry](/cli/v7/using-npm/registry)\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n* [npm owner](/cli/v7/commands/npm-owner)\n* [npm whoami](/cli/v7/commands/npm-whoami)\n"},{"id":"88386370-e4e7-5fc8-b6c7-36ee74311a49","frontmatter":{"title":"npm-audit"},"rawBody":"---\ntitle: npm-audit\nsection: 1\ndescription: Run a security audit\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-audit.md\n---\n\n### Synopsis\n\n```bash\nnpm audit [--json|--parseable|--audit-level=(low|moderate|high|critical)]\nnpm audit fix [--force|--package-lock-only|--dry-run]\n\ncommon options: [--production] [--only=(dev|prod)]\n```\n\n### Examples\n\nScan your project for vulnerabilities and automatically install any compatible\nupdates to vulnerable dependencies:\n```bash\n$ npm audit fix\n```\n\nRun `audit fix` without modifying `node_modules`, but still updating the\npkglock:\n```bash\n$ npm audit fix --package-lock-only\n```\n\nSkip updating `devDependencies`:\n```bash\n$ npm audit fix --only=prod\n```\n\nHave `audit fix` install semver-major updates to toplevel dependencies, not just\nsemver-compatible ones:\n```bash\n$ npm audit fix --force\n```\n\nDo a dry run to get an idea of what `audit fix` will do, and _also_ output\ninstall information in JSON format:\n```bash\n$ npm audit fix --dry-run --json\n```\n\nScan your project for vulnerabilities and just show the details, without fixing\nanything:\n```bash\n$ npm audit\n```\n\nGet the detailed audit report in JSON format:\n```bash\n$ npm audit --json\n```\n\nGet the detailed audit report in plain text result, separated by tab characters, allowing for\nfuture reuse in scripting or command line post processing, like for example, selecting\nsome of the columns printed:\n```bash\n$ npm audit --parseable\n```\n\nTo parse columns, you can use for example `awk`, and just print some of them:\n```bash\n$ npm audit --parseable | awk -F $'\\t' '{print $1,$4}'\n```\n\nFail an audit only if the results include a vulnerability with a level of moderate or higher:\n```bash\n$ npm audit --audit-level=moderate\n```\n\n### Description\n\nThe audit command submits a description of the dependencies configured in\nyour project to your default registry and asks for a report of known\nvulnerabilities. The report returned includes instructions on how to act on\nthis information. The command will exit with a 0 exit code if no\nvulnerabilities were found.\n\nYou can also have npm automatically fix the vulnerabilities by running `npm\naudit fix`. Note that some vulnerabilities cannot be fixed automatically and\nwill require manual intervention or review. Also note that since `npm audit fix`\nruns a full-fledged `npm install` under the hood, all configs that apply to the\ninstaller will also apply to `npm install` -- so things like `npm audit fix\n--package-lock-only` will work as expected.\n\nBy default, the audit command will exit with a non-zero code if any vulnerability\nis found. It may be useful in CI environments to include the `--audit-level` parameter\nto specify the minimum vulnerability level that will cause the command to fail. This\noption does not filter the report output, it simply changes the command's failure\nthreshold.\n\n### Content Submitted\n\n* npm_version\n* node_version\n* platform\n* node_env\n* A scrubbed version of your package-lock.json or npm-shrinkwrap.json\n\n#### Scrubbing\n\nIn order to ensure that potentially sensitive information is not included in\nthe audit data bundle, some dependencies may have their names (and sometimes\nversions) replaced with opaque non-reversible identifiers.  It is done for\nthe following dependency types:\n\n* Any module referencing a scope that is configured for a non-default\n  registry has its name scrubbed.  (That is, a scope you did a `npm login --scope=@ourscope` for.)\n* All git dependencies have their names and specifiers scrubbed.\n* All remote tarball dependencies have their names and specifiers scrubbed.\n* All local directory and tarball dependencies have their names and specifiers scrubbed.\n\nThe non-reversible identifiers are a sha256 of a session-specific UUID and the\nvalue being replaced, ensuring a consistent value within the payload that is\ndifferent between runs.\n\n### Exit Code\n\nThe `npm audit` command will exit with a 0 exit code if no vulnerabilities were found.\n\nIf vulnerabilities were found the exit code will depend on the `audit-level`\nconfiguration setting.\n\n### See Also\n\n* [npm install](/cli/v7/commands/npm-install)\n* [package-locks](/cli/v7/configuring-npm/package-locks)\n* [config](/cli/v7/using-npm/config)\n"},{"id":"a2eff430-640c-5131-91f2-8dac3e3bdb37","frontmatter":{"title":"npm-bin"},"rawBody":"---\ntitle: npm-bin\nsection: 1\ndescription: Display npm bin folder\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-bin.md\n---\n\n### Synopsis\n```bash\nnpm bin [-g|--global]\n```\n\n### Description\n\nPrint the folder where npm will install executables.\n\n### See Also\n\n* [npm prefix](/cli/v7/commands/npm-prefix)\n* [npm root](/cli/v7/commands/npm-root)\n* [npm folders](/cli/v7/configuring-npm/folders)\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n"},{"id":"16798f51-b3aa-52b8-9604-f38adc6df9cf","frontmatter":{"title":"npm-bugs"},"rawBody":"---\ntitle: npm-bugs\nsection: 1\ndescription: Bugs for a package in a web browser maybe\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-bugs.md\n---\n\n### Synopsis\n```bash\nnpm bugs [<pkgname> [<pkgname> ...]]\n\naliases: issues\n```\n\n### Description\n\nThis command tries to guess at the likely location of a package's\nbug tracker URL, and then tries to open it using the `--browser`\nconfig param. If no package name is provided, it will search for\na `package.json` in the current folder and use the `name` property.\n\n### Configuration\n\n#### browser\n\n* Default: OS X: `\"open\"`, Windows: `\"start\"`, Others: `\"xdg-open\"`\n* Type: String or Boolean\n\nThe browser that is called by the `npm bugs` command to open websites.\n\nSet to `false` to suppress browser behavior and instead print urls to\nterminal.\n\nSet to `true` to use default system URL opener.\n\n#### registry\n\n* Default: https://registry.npmjs.org/\n* Type: url\n\nThe base URL of the npm package registry.\n\n\n### See Also\n\n* [npm docs](/cli/v7/commands/npm-docs)\n* [npm view](/cli/v7/commands/npm-view)\n* [npm publish](/cli/v7/commands/npm-publish)\n* [npm registry](/cli/v7/using-npm/registry)\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n* [package.json](/cli/v7/configuring-npm/package-json)\n"},{"id":"44f3fb5d-68d3-5f27-9b1e-529c496464ff","frontmatter":{"title":"npm-bundle"},"rawBody":"---\ntitle: npm-bundle\nsection: 1\ndescription: REMOVED\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-bundle.md\n---\n\n### Description\n\nThe `npm bundle` command has been removed in 1.0, for the simple reason\nthat it is no longer necessary, as the default behavior is now to\ninstall packages into the local space.\n\nJust use `npm install` now to do what `npm bundle` used to do.\n\n### See Also\n\n* [npm install](/cli/v7/commands/npm-install)\n"},{"id":"bf47804f-c926-52d4-9304-cf146d1690f6","frontmatter":{"title":"npm-cache"},"rawBody":"---\ntitle: npm-cache\nsection: 1\ndescription: Manipulates packages cache\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-cache.md\n---\n\n### Synopsis\n\n```bash\nnpm cache add <tarball file>\nnpm cache add <folder>\nnpm cache add <tarball url>\nnpm cache add <name>@<version>\n\nnpm cache clean [<path>]\naliases: npm cache clear, npm cache rm\n\nnpm cache verify\n```\n\n### Description\n\nUsed to add, list, or clean the npm cache folder.\n\n* add:\n  Add the specified package to the local cache.  This command is primarily\n  intended to be used internally by npm, but it can provide a way to\n  add data to the local installation cache explicitly.\n\n* clean:\n  Delete all data out of the cache folder.\n\n* verify:\n  Verify the contents of the cache folder, garbage collecting any unneeded data,\n  and verifying the integrity of the cache index and all cached data.\n\n### Details\n\nnpm stores cache data in an opaque directory within the configured `cache`,\nnamed `_cacache`. This directory is a `cacache`-based content-addressable cache\nthat stores all http request data as well as other package-related data. This\ndirectory is primarily accessed through `pacote`, the library responsible for\nall package fetching as of npm@5.\n\nAll data that passes through the cache is fully verified for integrity on both\ninsertion and extraction. Cache corruption will either trigger an error, or\nsignal to `pacote` that the data must be refetched, which it will do\nautomatically. For this reason, it should never be necessary to clear the cache\nfor any reason other than reclaiming disk space, thus why `clean` now requires\n`--force` to run.\n\nThere is currently no method exposed through npm to inspect or directly manage\nthe contents of this cache. In order to access it, `cacache` must be used\ndirectly.\n\nnpm will not remove data by itself: the cache will grow as new packages are\ninstalled.\n\n### A note about the cache's design\n\nThe npm cache is strictly a cache: it should not be relied upon as a persistent\nand reliable data store for package data. npm makes no guarantee that a\npreviously-cached piece of data will be available later, and will automatically\ndelete corrupted contents. The primary guarantee that the cache makes is that,\nif it does return data, that data will be exactly the data that was inserted.\n\nTo run an offline verification of existing cache contents, use `npm cache\nverify`.\n\n### Configuration\n\n#### cache\n\nDefault: `~/.npm` on Posix, or `%AppData%/npm-cache` on Windows.\n\nThe root cache folder.\n\n### See Also\n\n* [npm folders](/cli/v7/configuring-npm/folders)\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n* [npm install](/cli/v7/commands/npm-install)\n* [npm publish](/cli/v7/commands/npm-publish)\n* [npm pack](/cli/v7/commands/npm-pack)\n* https://npm.im/cacache\n* https://npm.im/pacote\n"},{"id":"8c392cf6-6b2c-5370-ae04-df70c70f41a1","frontmatter":{"title":"npm-ci"},"rawBody":"---\ntitle: npm-ci\nsection: 1\ndescription: Install a project with a clean slate\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-ci.md\n---\n\n### Synopsis\n```bash\nnpm ci\n```\n\n### Example\n\nMake sure you have a package-lock and an up-to-date install:\n\n```bash\n$ cd ./my/npm/project\n$ npm install\nadded 154 packages in 10s\n$ ls | grep package-lock\n```\n\nRun `npm ci` in that project\n\n```bash\n$ npm ci\nadded 154 packages in 5s\n```\n\nConfigure Travis to build using `npm ci` instead of `npm install`:\n\n```bash\n# .travis.yml\ninstall:\n- npm ci\n# keep the npm cache around to speed up installs\ncache:\n  directories:\n  - \"$HOME/.npm\"\n```\n\n### Description\n\nThis command is similar to [`npm install`](/cli/v7/commands/npm-install), except it's meant to be used in\nautomated environments such as test platforms, continuous integration, and\ndeployment -- or any situation where you want to make sure you're doing a clean\ninstall of your dependencies. It can be significantly faster than a regular npm\ninstall by skipping certain user-oriented features. It is also more strict than\na regular install, which can help catch errors or inconsistencies caused by the\nincrementally-installed local environments of most npm users.\n\nIn short, the main differences between using `npm install` and `npm ci` are:\n\n* The project **must** have an existing `package-lock.json` or `npm-shrinkwrap.json`.\n* If dependencies in the package lock do not match those in `package.json`, `npm ci` will exit with an error, instead of updating the package lock.\n* `npm ci` can only install entire projects at a time: individual dependencies cannot be added with this command.\n* If a `node_modules` is already present, it will be automatically removed before `npm ci` begins its install.\n* It will never write to `package.json` or any of the package-locks: installs are essentially frozen.\n\n### See Also\n\n* [npm install](/cli/v7/commands/npm-install)\n* [package-locks](/cli/v7/configuring-npm/package-locks)\n"},{"id":"a249fbaa-4dd0-519e-9bbd-20f1f29e5a94","frontmatter":{"title":"npm-completion"},"rawBody":"---\ntitle: npm-completion\nsection: 1\ndescription: Tab Completion for npm\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-completion.md\n---\n\n### Synopsis\n```bash\nsource <(npm completion)\n```\n\n### Description\n\nEnables tab-completion in all npm commands.\n\nThe synopsis above\nloads the completions into your current shell.  Adding it to\nyour ~/.bashrc or ~/.zshrc will make the completions available\neverywhere:\n\n```bash\nnpm completion >> ~/.bashrc\nnpm completion >> ~/.zshrc\n```\n\nYou may of course also pipe the output of `npm completion` to a file\nsuch as `/usr/local/etc/bash_completion.d/npm` or \n`/etc/bash_completion.d/npm` if you have a system that will read \nthat file for you.\n\nWhen `COMP_CWORD`, `COMP_LINE`, and `COMP_POINT` are defined in the\nenvironment, `npm completion` acts in \"plumbing mode\", and outputs\ncompletions based on the arguments.\n\n### See Also\n\n* [npm developers](/cli/v7/using-npm/developers)\n* [npm](/cli/v7/commands/npm-npm)\n"},{"id":"bebab92e-bf96-517b-8e2a-dd88a933261b","frontmatter":{"title":"npm-config"},"rawBody":"---\ntitle: npm-config\nsection: 1\ndescription: Manage the npm configuration files\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-config.md\n---\n\n### Synopsis\n```bash\nnpm config set <key> <value> [-g|--global]\nnpm config get <key>\nnpm config delete <key>\nnpm config list [-l] [--json]\nnpm config edit\nnpm get <key>\nnpm set <key> <value> [-g|--global]\n\naliases: c\n```\n\n### Description\n\nnpm gets its config settings from the command line, environment\nvariables, `npmrc` files, and in some cases, the `package.json` file.\n\nSee [npmrc](/cli/v7/configuring-npm/npmrc) for more information about the npmrc files.\n\nSee [config](/cli/v7/using-npm/config) for a more thorough discussion of the mechanisms\ninvolved.\n\nThe `npm config` command can be used to update and edit the contents\nof the user and global npmrc files.\n\n### Sub-commands\n\nConfig supports the following sub-commands:\n\n#### set\n```bash\nnpm config set key value\n```\nSets the config key to the value.\n\nIf value is omitted, then it sets it to \"true\".\n\n#### get\n```bash\nnpm config get key\n```\n\nEcho the config value to stdout.\n\n#### list\n```bash\nnpm config list\n```\n\nShow all the config settings. Use `-l` to also show defaults. Use `--json`\nto show the settings in json format.\n\n#### delete\n```bash\nnpm config delete key\n```\n\nDeletes the key from all configuration files.\n\n#### edit\n```bash\nnpm config edit\n```\n\nOpens the config file in an editor.  Use the `--global` flag to edit the\nglobal config.\n\n### See Also\n\n* [npm folders](/cli/v7/configuring-npm/folders)\n* [npm config](/cli/v7/commands/npm-config)\n* [package.json](/cli/v7/configuring-npm/package-json)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n* [npm](/cli/v7/commands/npm-npm)\n"},{"id":"cb6b0576-5045-5a6b-bc08-b0caf9523c34","frontmatter":{"title":"npm-dedupe"},"rawBody":"---\ntitle: npm-dedupe\nsection: 1\ndescription: Reduce duplication\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-dedupe.md\n---\n\n### Synopsis\n```bash\nnpm dedupe\nnpm ddp\n\naliases: find-dupes, ddp\n```\n\n### Description\n\nSearches the local package tree and attempts to simplify the overall\nstructure by moving dependencies further up the tree, where they can\nbe more effectively shared by multiple dependent packages.\n\nFor example, consider this dependency graph:\n\n```bash\na\n+-- b <-- depends on c@1.0.x\n|   `-- c@1.0.3\n`-- d <-- depends on c@~1.0.9\n    `-- c@1.0.10\n```\n\nIn this case, `npm dedupe` will transform the tree to:\n\n```bash\na\n+-- b\n+-- d\n`-- c@1.0.10\n```\n\nBecause of the hierarchical nature of node's module lookup, b and d\nwill both get their dependency met by the single c package at the root\nlevel of the tree.\n\nThe deduplication algorithm walks the tree, moving each dependency as far\nup in the tree as possible, even if duplicates are not found. This will\nresult in both a flat and deduplicated tree.\n\nIf a suitable version exists at the target location in the tree\nalready, then it will be left untouched, but the other duplicates will\nbe deleted.\n\nArguments are ignored. Dedupe always acts on the entire tree.\n\nModules\n\nNote that this operation transforms the dependency tree, but will never\nresult in new modules being installed.\n\nUsing `npm find-dupes` will run the command in dryRun mode.\n\n### See Also\n\n* [npm ls](/cli-commands/ls)\n* [npm update](/cli-commands/update)\n* [npm install](/cli-commands/install)\n"},{"id":"6dd5d1dd-08db-5610-b55e-27782d6315c9","frontmatter":{"title":"npm-deprecate"},"rawBody":"---\ntitle: npm-deprecate\nsection: 1\ndescription: Deprecate a version of a package\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-deprecate.md\n---\n\n### Synopsis\n```bash\nnpm deprecate <pkg>[@<version>] <message>\n```\n\n### Description\n\nThis command will update the npm registry entry for a package, providing\na deprecation warning to all who attempt to install it.\n\nIt works on [version ranges](https://semver.npmjs.com/) as well as specific \nversions, so you can do something like this:\n```bash\nnpm deprecate my-thing@\"< 0.2.3\" \"critical bug fixed in v0.2.3\"\n```\n\nNote that you must be the package owner to deprecate something.  See the\n`owner` and `adduser` help topics.\n\nTo un-deprecate a package, specify an empty string (`\"\"`) for the `message` \nargument. Note that you must use double quotes with no space between them to \nformat an empty string.\n\n### See Also\n\n* [npm publish](/cli/v7/commands/npm-publish)\n* [npm registry](/cli/v7/using-npm/registry)\n"},{"id":"a8fd44d5-1bc6-588f-9224-312e3af277ce","frontmatter":{"title":"npm-dist-tag"},"rawBody":"---\ntitle: npm-dist-tag\nsection: 1\ndescription: Modify package distribution tags\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-dist-tag.md\n---\n\n### Synopsis\n```bash\nnpm dist-tag add <pkg>@<version> [<tag>]\nnpm dist-tag rm <pkg> <tag>\nnpm dist-tag ls [<pkg>]\n\naliases: dist-tags\n```\n\n### Description\n\nAdd, remove, and enumerate distribution tags on a package:\n\n* add:\n  Tags the specified version of the package with the specified tag, or the\n  `--tag` config if not specified. If you have two-factor authentication on\n  auth-and-writes then you’ll need to include a one-time password on the\n  command line with `--otp <one-time password>`.\n\n* rm:\n  Clear a tag that is no longer in use from the package.\n\n* ls:\n  Show all of the dist-tags for a package, defaulting to the package in\n  the current prefix. This is the default action if none is specified.\n\nA tag can be used when installing packages as a reference to a version instead\nof using a specific version number:\n\n```bash\nnpm install <name>@<tag>\n```\n\nWhen installing dependencies, a preferred tagged version may be specified:\n\n```bash\nnpm install --tag <tag>\n```\n\nThis also applies to `npm dedupe`.\n\nPublishing a package sets the `latest` tag to the published version unless the\n`--tag` option is used. For example, `npm publish --tag=beta`.\n\nBy default, `npm install <pkg>` (without any `@<version>` or `@<tag>`\nspecifier) installs the `latest` tag.\n\n### Purpose\n\nTags can be used to provide an alias instead of version numbers.\n\nFor example, a project might choose to have multiple streams of development\nand use a different tag for each stream,\ne.g., `stable`, `beta`, `dev`, `canary`.\n\nBy default, the `latest` tag is used by npm to identify the current version of\na package, and `npm install <pkg>` (without any `@<version>` or `@<tag>`\nspecifier) installs the `latest` tag. Typically, projects only use the `latest`\ntag for stable release versions, and use other tags for unstable versions such\nas prereleases.\n\nThe `next` tag is used by some projects to identify the upcoming version.\n\nBy default, other than `latest`, no tag has any special significance to npm\nitself.\n\n### Caveats\n\nThis command used to be known as `npm tag`, which only created new tags, and so\nhad a different syntax.\n\nTags must share a namespace with version numbers, because they are specified in\nthe same slot: `npm install <pkg>@<version>` vs `npm install <pkg>@<tag>`.\n\nTags that can be interpreted as valid semver ranges will be rejected. For\nexample, `v1.4` cannot be used as a tag, because it is interpreted by semver as\n`>=1.4.0 <1.5.0`.  See <https://github.com/npm/npm/issues/6082>.\n\nThe simplest way to avoid semver problems with tags is to use tags that do not\nbegin with a number or the letter `v`.\n\n### See Also\n\n* [npm publish](/cli/v7/commands/npm-publish)\n* [npm install](/cli/v7/commands/npm-install)\n* [npm dedupe](/cli/v7/commands/npm-dedupe)\n* [npm registry](/cli/v7/using-npm/registry)\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n"},{"id":"09ad20e2-83c1-52df-a8c1-1c31b3638add","frontmatter":{"title":"npm-docs"},"rawBody":"---\ntitle: npm-docs\nsection: 1\ndescription: Docs for a package in a web browser maybe\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-docs.md\n---\n\n### Synopsis\n\n```bash\nnpm docs [<pkgname> [<pkgname> ...]]\n\naliases: home\n```\n\n### Description\n\nThis command tries to guess at the likely location of a package's\ndocumentation URL, and then tries to open it using the `--browser`\nconfig param. You can pass multiple package names at once. If no\npackage name is provided, it will search for a `package.json` in\nthe current folder and use the `name` property.\n\n### Configuration\n\n#### browser\n\n* Default: OS X: `\"open\"`, Windows: `\"start\"`, Others: `\"xdg-open\"`\n* Type: String or Boolean\n\nThe browser that is called by the `npm docs` command to open websites.\n\nSet to `false` to suppress browser behavior and instead print urls to\nterminal.\n\nSet to `true` to use default system URL opener.\n\n#### registry\n\n* Default: https://registry.npmjs.org/\n* Type: url\n\nThe base URL of the npm package registry.\n\n\n### See Also\n\n* [npm view](/cli/v7/commands/npm-view)\n* [npm publish](/cli/v7/commands/npm-publish)\n* [npm registry](/cli/v7/using-npm/registry)\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n* [package.json](/cli/v7/configuring-npm/package-json)\n"},{"id":"2d4abb52-a5c3-5075-ac4a-bb3904d99346","frontmatter":{"title":"npm-doctor"},"rawBody":"---\ntitle: npm-doctor\nsection: 1\ndescription: Check your environments\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-doctor.md\n---\n\n### Synopsis\n\n```bash\nnpm doctor\n```\n\n### Description\n\n`npm doctor` runs a set of checks to ensure that your npm installation has\nwhat it needs to manage your JavaScript packages. npm is mostly a standalone tool, but it does\nhave some basic requirements that must be met:\n\n+ Node.js and git must be executable by npm.\n+ The primary npm registry, `registry.npmjs.com`, or another service that uses\n  the registry API, is available.\n+ The directories that npm uses, `node_modules` (both locally and globally),\n  exist and can be written by the current user.\n+ The npm cache exists, and the package tarballs within it aren't corrupt.\n\nWithout all of these working properly, npm may not work properly.  Many issues\nare often attributable to things that are outside npm's code base, so `npm\ndoctor` confirms that the npm installation is in a good state.\n\nAlso, in addition to this, there are also very many issue reports due to using\nold versions of npm. Since npm is constantly improving, running `npm@latest` is\nbetter than an old version.\n\n`npm doctor` verifies the following items in your environment, and if there are\nany recommended changes, it will display them.\n\n#### `npm ping`\n\nBy default, npm installs from the primary npm registry, `registry.npmjs.org`.\n`npm doctor` hits a special ping endpoint within the registry. This can also be\nchecked with `npm ping`. If this check fails, you may be using a proxy that\nneeds to be configured, or may need to talk to your IT staff to get access over\nHTTPS to `registry.npmjs.org`.\n\nThis check is done against whichever registry you've configured (you can see\nwhat that is by running `npm config get registry`), and if you're using a\nprivate registry that doesn't support the `/whoami` endpoint supported by the\nprimary registry, this check may fail.\n\n#### `npm -v`\n\nWhile Node.js may come bundled with a particular version of npm, it's the\npolicy of the CLI team that we recommend all users run `npm@latest` if they\ncan. As the CLI is maintained by a small team of contributors, there are only\nresources for a single line of development, so npm's own long-term support\nreleases typically only receive critical security and regression fixes. The\nteam believes that the latest tested version of npm is almost always likely to\nbe the most functional and defect-free version of npm.\n\n#### `node -v`\n\nFor most users, in most circumstances, the best version of Node will be the\nlatest long-term support (LTS) release. Those of you who want access to new\nECMAscript features or bleeding-edge changes to Node's standard library may be\nrunning a newer version, and some of you may be required to run an older\nversion of Node because of enterprise change control policies. That's OK! But\nin general, the npm team recommends that most users run Node.js LTS.\n\n#### `npm config get registry`\n\nSome of you may be installing from private package registries for your project\nor company. That's great! Others of you may be following tutorials or\nStackOverflow questions in an effort to troubleshoot problems you may be\nhaving. Sometimes, this may entail changing the registry you're pointing at.\nThis part of `npm doctor` just lets you, and maybe whoever's helping you with\nsupport, know that you're not using the default registry.\n\n#### `which git`\n\nWhile it's documented in the README, it may not be obvious that npm needs Git\ninstalled to do many of the things that it does. Also, in some cases\n– especially on Windows – you may have Git set up in such a way that it's not\naccessible via your `PATH` so that npm can find it. This check ensures that Git\nis available.\n\n#### Permissions checks\n\n* Your cache must be readable and writable by the user running npm.\n* Global package binaries must be writable by the user running npm.\n* Your local `node_modules` path, if you're running `npm doctor` with a project\n  directory, must be readable and writable by the user running npm.\n\n#### Validate the checksums of cached packages\n\nWhen an npm package is published, the publishing process generates a checksum\nthat npm uses at install time to verify that the package didn't get corrupted\nin transit. `npm doctor` uses these checksums to validate the package tarballs\nin your local cache (you can see where that cache is located with `npm config\nget cache`, and see what's in that cache with `npm cache ls` – probably more\nthan you were expecting!). In the event that there are corrupt packages in your\ncache, you should probably run `npm cache clean` and reset the cache.\n\n### See Also\n\n* [npm bugs](/cli/v7/commands/npm-bugs)\n* [npm help](/cli/v7/commands/npm-help)\n* [npm ping](/cli/v7/commands/npm-ping)\n"},{"id":"d1878e1c-89d7-5a5b-a5ba-62b5753fd8cd","frontmatter":{"title":"npm-edit"},"rawBody":"---\ntitle: npm-edit\nsection: 1\ndescription: Edit an installed package\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-edit.md\n---\n\n### Synopsis\n\n```bash\nnpm edit <pkg>[/<subpkg>...]\n```\n\n### Description\n\nSelects a (sub)dependency in the current\nworking directory and opens the package folder in the default editor\n(or whatever you've configured as the npm `editor` config -- see\n[`npm-config`](npm-config).)\n\nAfter it has been edited, the package is rebuilt so as to pick up any\nchanges in compiled packages.\n\nFor instance, you can do `npm install connect` to install connect\ninto your package, and then `npm edit connect` to make a few\nchanges to your locally installed copy.\n\n### Configuration\n\n#### editor\n\n* Default: `EDITOR` environment variable if set, or `\"vi\"` on Posix,\n  or `\"notepad\"` on Windows.\n* Type: path\n\nThe command to run for `npm edit` or `npm config edit`.\n\n### See Also\n\n* [npm folders](/cli/v7/configuring-npm/folders)\n* [npm explore](/cli/v7/commands/npm-explore)\n* [npm install](/cli/v7/commands/npm-install)\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n"},{"id":"a7da0e25-1e11-5b69-9b6f-ef073561e496","frontmatter":{"title":"npm-exec"},"rawBody":"---\ntitle: npm-exec\nsection: 1\ndescription: Run a command from a local or remote npm package\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-exec.md\n---\n\n### Synopsis\n\n```bash\nnpm exec -- <pkg>[@<version>] [args...]\nnpm exec -p <pkg>[@<version>] -- <cmd> [args...]\nnpm exec -c '<cmd> [args...]'\nnpm exec -p foo -c '<cmd> [args...]'\n\nnpx <pkg>[@<specifier>] [args...]\nnpx -p <pkg>[@<specifier>] <cmd> [args...]\nnpx -c '<cmd> [args...]'\nnpx -p <pkg>[@<specifier>] -c '<cmd> [args...]'\n\nalias: npm x, npx\n\n-p <pkg> --package=<pkg> (may be specified multiple times)\n-c <cmd> --call=<cmd> (may not be mixed with positional arguments)\n```\n\n### Description\n\nThis command allows you to run an arbitrary command from an npm package\n(either one installed locally, or fetched remotely), in a similar context\nas running it via `npm run`.\n\nWhatever packages are specified by the `--package` or `-p` option will be\nprovided in the `PATH` of the executed command, along with any locally\ninstalled package executables.  The `--package` or `-p` option may be\nspecified multiple times, to execute the supplied command in an environment\nwhere all specified packages are available.\n\nIf any requested packages are not present in the local project\ndependencies, then they are installed to a folder in the npm cache, which\nis added to the `PATH` environment variable in the executed process.  A\nprompt is printed (which can be suppressed by providing either `--yes` or\n`--no`).\n\nPackage names provided without a specifier will be matched with whatever\nversion exists in the local project.  Package names with a specifier will\nonly be considered a match if they have the exact same name and version as\nthe local dependency.\n\nIf no `-c` or `--call` option is provided, then the positional arguments\nare used to generate the command string.  If no `-p` or `--package` options\nare provided, then npm will attempt to determine the executable name from\nthe package specifier provided as the first positional argument according\nto the following heuristic:\n\n- If the package has a single entry in its `bin` field in `package.json`,\n  then that command will be used.\n- If the package has multiple `bin` entries, and one of them matches the\n  unscoped portion of the `name` field, then that command will be used.\n- If this does not result in exactly one option (either because there are\n  no bin entries, or none of them match the `name` of the package), then\n  `npm exec` exits with an error.\n\nTo run a binary _other than_ the named binary, specify one or more\n`--package` options, which will prevent npm from inferring the package from\nthe first command argument.\n\n### `npx` vs `npm exec`\n\nWhen run via the `npx` binary, all flags and options *must* be set prior to\nany positional arguments.  When run via `npm exec`, a double-hyphen `--`\nflag can be used to suppress npm's parsing of switches and options that\nshould be sent to the executed command.\n\nFor example:\n\n```\n$ npx foo@latest bar --package=@npmcli/foo\n```\n\nIn this case, npm will resolve the `foo` package name, and run the\nfollowing command:\n\n```\n$ foo bar --package=@npmcli/foo\n```\n\nSince the `--package` option comes _after_ the positional arguments, it is\ntreated as an argument to the executed command.\n\nIn contrast, due to npm's argument parsing logic, running this command is\ndifferent:\n\n```\n$ npm exec foo@latest bar --package=@npmcli/foo\n```\n\nIn this case, npm will parse the `--package` option first, resolving the\n`@npmcli/foo` package.  Then, it will execute the following command in that\ncontext:\n\n```\n$ foo@latest bar\n```\n\nThe double-hyphen character is recommended to explicitly tell npm to stop\nparsing command line options and switches.  The following command would\nthus be equivalent to the `npx` command above:\n\n```\n$ npm exec -- foo@latest bar --package=@npmcli/foo\n```\n\n### Examples\n\nRun the version of `tap` in the local dependencies, with the provided\narguments:\n\n```\n$ npm exec -- tap --bail test/foo.js\n$ npx tap --bail test/foo.js\n```\n\nRun a command _other than_ the command whose name matches the package name\nby specifying a `--package` option:\n\n```\n$ npm exec --package=foo -- bar --bar-argument\n# ~ or ~\n$ npx --package=foo bar --bar-argument\n```\n\nRun an arbitrary shell script, in the context of the current project:\n\n```\n$ npm x -c 'eslint && say \"hooray, lint passed\"'\n$ npx -c 'eslint && say \"hooray, lint passed\"'\n```\n\n### Compatibility with Older npx Versions\n\nThe `npx` binary was rewritten in npm v7.0.0, and the standalone `npx`\npackage deprecated at that time.  `npx` uses the `npm exec`\ncommand instead of a separate argument parser and install process, with\nsome affordances to maintain backwards compatibility with the arguments it\naccepted in previous versions.\n\nThis resulted in some shifts in its functionality:\n\n- Any `npm` config value may be provided.\n- To prevent security and user-experience problems from mistyping package\n  names, `npx` prompts before installing anything.  Suppress this\n  prompt with the `-y` or `--yes` option.\n- The `--no-install` option is deprecated, and will be converted to `--no`.\n- Shell fallback functionality is removed, as it is not advisable.\n- The `-p` argument is a shorthand for `--parseable` in npm, but shorthand\n  for `--package` in npx.  This is maintained, but only for the `npx`\n  executable.\n- The `--ignore-existing` option is removed.  Locally installed bins are\n  always present in the executed process `PATH`.\n- The `--npm` option is removed.  `npx` will always use the `npm` it ships\n  with.\n- The `--node-arg` and `-n` options are removed.\n- The `--always-spawn` option is redundant, and thus removed.\n- The `--shell` option is replaced with `--script-shell`, but maintained\n  in the `npx` executable for backwards compatibility.\n\n### See Also\n\n* [npm run-script](/cli/v7/commands/npm-run-script)\n* [npm scripts](/cli/v7/using-npm/scripts)\n* [npm test](/cli/v7/commands/npm-test)\n* [npm start](/cli/v7/commands/npm-start)\n* [npm restart](/cli/v7/commands/npm-restart)\n* [npm stop](/cli/v7/commands/npm-stop)\n* [npm config](/cli/v7/commands/npm-config)\n"},{"id":"7084f298-b09e-5777-9e51-535f7a5c5922","frontmatter":{"title":"npm-explain"},"rawBody":"---\ntitle: npm-explain\nsection: 1\ndescription: Explain installed packages\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-explain.md\n---\n\n### Synopsis\n\n```bash\nnpm explain <folder | specifier>\n```\n\n### Description\n\nThis command will print the chain of dependencies causing a given package\nto be installed in the current project.\n\nPositional arguments can be either folders within `node_modules`, or\n`name@version-range` specifiers, which will select the dependency\nrelationships to explain.\n\nFor example, running `npm explain glob` within npm's source tree will show:\n\n```bash\nglob@7.1.6\nnode_modules/glob\n  glob@\"^7.1.4\" from the root project\n\nglob@7.1.1 dev\nnode_modules/tacks/node_modules/glob\n  glob@\"^7.0.5\" from rimraf@2.6.2\n  node_modules/tacks/node_modules/rimraf\n    rimraf@\"^2.6.2\" from tacks@1.3.0\n    node_modules/tacks\n      dev tacks@\"^1.3.0\" from the root project\n```\n\nTo explain just the package residing at a specific folder, pass that as the\nargument to the command.  This can be useful when trying to figure out\nexactly why a given dependency is being duplicated to satisfy conflicting\nversion requirements within the project.\n\n```bash\n$ npm explain node_modules/nyc/node_modules/find-up\nfind-up@3.0.0 dev\nnode_modules/nyc/node_modules/find-up\n  find-up@\"^3.0.0\" from nyc@14.1.1\n  node_modules/nyc\n    nyc@\"^14.1.1\" from tap@14.10.8\n    node_modules/tap\n      dev tap@\"^14.10.8\" from the root project\n```\n\n### Configuration\n\n#### json\n\n* Default: false\n* Type: Bolean\n\nShow information in JSON format.\n\n### See Also\n\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n* [npm folders](/cli/v7/configuring-npm/folders)\n* [npm ls](/cli/v7/commands/npm-ls)\n* [npm install](/cli/v7/commands/npm-install)\n* [npm link](/cli/v7/commands/npm-link)\n* [npm prune](/cli/v7/commands/npm-prune)\n* [npm outdated](/cli/v7/commands/npm-outdated)\n* [npm update](/cli/v7/commands/npm-update)\n"},{"id":"f82da848-6eb9-5def-924f-d6f0001679ec","frontmatter":{"title":"npm-explore"},"rawBody":"---\ntitle: npm-explore\nsection: 1\ndescription: Browse an installed package\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-explore.md\n---\n\n### Synopsis\n\n```bash\nnpm explore <pkg> [ -- <command>]\n```\n\n### Description\n\nSpawn a subshell in the directory of the installed package specified.\n\nIf a command is specified, then it is run in the subshell, which then\nimmediately terminates.\n\nThis is particularly handy in the case of git submodules in the\n`node_modules` folder:\n\n```bash\nnpm explore some-dependency -- git pull origin master\n```\n\nNote that the package is *not* automatically rebuilt afterwards, so be\nsure to use `npm rebuild <pkg>` if you make any changes.\n\n### Configuration\n\n#### shell\n\n* Default: SHELL environment variable, or \"bash\" on Posix, or \"cmd\" on\n  Windows\n* Type: path\n\nThe shell to run for the `npm explore` command.\n\n### See Also\n\n* [npm folders](/cli/v7/configuring-npm/folders)\n* [npm edit](/cli/v7/commands/npm-edit)\n* [npm rebuild](/cli/v7/commands/npm-rebuild)\n* [npm build](/cli/v7/commands/npm-build)\n* [npm install](/cli/v7/commands/npm-install)\n"},{"id":"31cd2341-b960-58f2-ba0b-2ba16bc02768","frontmatter":{"title":"npm-fund"},"rawBody":"---\ntitle: npm-fund\nsection: 1\ndescription: Retrieve funding information\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-fund.md\n---\n\n### Synopsis\n\n```bash\n    npm fund [<pkg>]\n```\n\n### Description\n\nThis command retrieves information on how to fund the dependencies of\na given project. If no package name is provided, it will list all\ndependencies that are looking for funding in a tree-structure in which\nare listed the type of funding and the url to visit. If a package name\nis provided then it tries to open its funding url using the `--browser`\nconfig param; if there are multiple funding sources for the package, the\nuser will be instructed to pass the `--which` command to disambiguate.\n\nThe list will avoid duplicated entries and will stack all packages\nthat share the same url as a single entry. Given this nature the\nlist is not going to have the same shape of the output from `npm ls`.\n\n### Configuration\n\n#### browser\n\n* Default: OS X: `\"open\"`, Windows: `\"start\"`, Others: `\"xdg-open\"`\n* Type: String\n\nThe browser that is called by the `npm fund` command to open websites.\n\n#### json\n\n* Type: Boolean\n* Default: false\n\nShow information in JSON format.\n\n#### unicode\n\n* Type: Boolean\n* Default: true\n\nWhether to represent the tree structure using unicode characters.\nSet it to `false` in order to use all-ansi output.\n\n#### which\n\n* Type: Number\n* Default: undefined\n\nIf there are multiple funding sources, which 1-indexed source URL to open.\n\n## See Also\n\n* [npm docs](/cli/v7/commands/npm-docs)\n* [npm config](/cli/v7/commands/npm-config)\n* [npm install](/cli/v7/commands/npm-install)\n* [npm ls](/cli/v7/commands/npm-ls)\n\n"},{"id":"a3c74a66-d65a-57b6-bd74-1caebce4ac24","frontmatter":{"title":"npm-help-search"},"rawBody":"---\ntitle: npm-help-search\nsection: 1\ndescription: Search npm help documentation\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-help-search.md\n---\n\n### Synopsis\n\n```bash\nnpm help-search <text>\n```\n\n### Description\n\nThis command will search the npm markdown documentation files for the\nterms provided, and then list the results, sorted by relevance.\n\nIf only one result is found, then it will show that help topic.\n\nIf the argument to `npm help` is not a known help topic, then it will\ncall `help-search`.  It is rarely if ever necessary to call this\ncommand directly.\n\n### Configuration\n\n#### long\n\n* Type: Boolean\n* Default: false\n\nIf true, the \"long\" flag will cause help-search to output context around\nwhere the terms were found in the documentation.\n\nIf false, then help-search will just list out the help topics found.\n\n### See Also\n\n* [npm](/cli/v7/commands/npm-npm)\n* [npm help](/cli/v7/commands/npm-help)\n"},{"id":"b457fa52-cbbf-5daf-8c17-1c0ccf2936f9","frontmatter":{"title":"npm-help"},"rawBody":"---\ntitle: npm-help\nsection: 1\ndescription: Get help on npm\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-help.md\n---\n\n### Synopsis\n\n```bash\nnpm help <term> [<terms..>]\n```\n\n### Description\n\nIf supplied a topic, then show the appropriate documentation page.\n\nIf the topic does not exist, or if multiple terms are provided, then run\nthe `help-search` command to find a match.  Note that, if `help-search`\nfinds a single subject, then it will run `help` on that topic, so unique\nmatches are equivalent to specifying a topic name.\n\n### Configuration\n\n#### viewer\n\n* Default: \"man\" on Posix, \"browser\" on Windows\n* Type: path\n\nThe program to use to view help content.\n\nSet to `\"browser\"` to view html help content in the default web browser.\n\n### See Also\n\n* [npm](/cli/v7/commands/npm-npm)\n* [npm folders](/cli/v7/configuring-npm/folders)\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n* [package.json](/cli/v7/configuring-npm/package-json)\n* [npm help-search](/cli/v7/commands/npm-help-search)\n"},{"id":"ff51f4c0-bed8-5cf5-a8a6-f4fc78a0b569","frontmatter":{"title":"npm-hook"},"rawBody":"---\ntitle: npm-hook\nsection: 1\ndescription: Manage registry hooks\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-hook.md\n---\n\n### Synopsis\n\n```bash\nnpm hook ls [pkg]\nnpm hook add <entity> <url> <secret>\nnpm hook update <id> <url> [secret]\nnpm hook rm <id>\n```\n\n### Example\n\nAdd a hook to watch a package for changes:\n```bash\n$ npm hook add lodash https://example.com/ my-shared-secret\n```\n\nAdd a hook to watch packages belonging to the user `substack`:\n```bash\n$ npm hook add ~substack https://example.com/ my-shared-secret\n```\n\nAdd a hook to watch packages in the scope `@npm`\n```bash\n$ npm hook add @npm https://example.com/ my-shared-secret\n```\n\nList all your active hooks:\n```bash\n$ npm hook ls\n```\n\nList your active hooks for the `lodash` package:\n```bash\n$ npm hook ls lodash\n```\n\nUpdate an existing hook's url:\n```bash\n$ npm hook update id-deadbeef https://my-new-website.here/\n```\n\nRemove a hook:\n```bash\n$ npm hook rm id-deadbeef\n```\n\n### Description\n\nAllows you to manage [npm hooks](https://blog.npmjs.org/post/145260155635/introducing-hooks-get-notifications-of-npm),\nincluding adding, removing, listing, and updating.\n\nHooks allow you to configure URL endpoints that will be notified whenever a\nchange happens to any of the supported entity types. Three different types of\nentities can be watched by hooks: packages, owners, and scopes.\n\nTo create a package hook, simply reference the package name.\n\nTo create an owner hook, prefix the owner name with `~` (as in, `~youruser`).\n\nTo create a scope hook, prefix the scope name with `@` (as in, `@yourscope`).\n\nThe hook `id` used by `update` and `rm` are the IDs listed in `npm hook ls` for\nthat particular hook.\n\nThe shared secret will be sent along to the URL endpoint so you can verify the\nrequest came from your own configured hook.\n\n### See Also\n\n* [\"Introducing Hooks\" blog post](https://blog.npmjs.org/post/145260155635/introducing-hooks-get-notifications-of-npm)\n"},{"id":"5f028df4-d395-54de-a625-f56a459bd808","frontmatter":{"title":"npm-init"},"rawBody":"---\ntitle: npm-init\nsection: 1\ndescription: create a package.json file\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-init.md\n---\n\n### Synopsis\n```bash\nnpm init [--force|-f|--yes|-y|--scope]\nnpm init <@scope> (same as `npx <@scope>/create`)\nnpm init [<@scope>/]<name> (same as `npx [<@scope>/]create-<name>`)\n```\n\n### Examples\n\nCreate a new React-based project using [`create-react-app`](https://npm.im/create-react-app):\n```bash\n$ npm init react-app ./my-react-app\n```\n\nCreate a new `esm`-compatible package using [`create-esm`](https://npm.im/create-esm):\n```bash\n$ mkdir my-esm-lib && cd my-esm-lib\n$ npm init esm --yes\n```\n\nGenerate a plain old package.json using legacy init:\n```bash\n$ mkdir my-npm-pkg && cd my-npm-pkg\n$ git init\n$ npm init\n```\n\nGenerate it without having it ask any questions:\n```bash\n$ npm init -y\n```\n\n### Description\n\n`npm init <initializer>` can be used to set up a new or existing npm package.\n\n`initializer` in this case is an npm package named `create-<initializer>`, which\nwill be installed by [`npx`](https://npm.im/npx), and then have its main bin\nexecuted -- presumably creating or updating `package.json` and running any other\ninitialization-related operations.\n\nThe init command is transformed to a corresponding `npx` operation as follows:\n\n* `npm init foo` -> `npx create-foo`\n* `npm init @usr/foo` -> `npx @usr/create-foo`\n* `npm init @usr` -> `npx @usr/create`\n\nAny additional options will be passed directly to the command, so `npm init foo\n--hello` will map to `npx create-foo --hello`.\n\nIf the initializer is omitted (by just calling `npm init`), init will fall back\nto legacy init behavior. It will ask you a bunch of questions, and then write a\npackage.json for you. It will attempt to make reasonable guesses based on\nexisting fields, dependencies, and options selected. It is strictly additive, so\nit will keep any fields and values that were already set. You can also use\n`-y`/`--yes` to skip the questionnaire altogether. If you pass `--scope`, it\nwill create a scoped package.\n\n### See Also\n\n* <https://github.com/isaacs/init-package-json>\n* [package.json](/cli/v7/configuring-npm/package-json)\n* [npm version](/cli/v7/commands/npm-version)\n* [npm scope](/cli/v7/using-npm/scope)\n"},{"id":"c17fa124-8c80-50d6-84e8-f229dea529d2","frontmatter":{"title":"npm-install-ci-test"},"rawBody":"---\ntitle: npm-install-ci-test\nsection: 1\ndescription: Install a project with a clean slate and run tests\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-install-ci-test.md\n---\n\n### Synopsis\n\n```bash\nnpm install-ci-test\n\nalias: npm cit\n```\n\n### Description\n\nThis command runs an `npm ci` followed immediately by an `npm test`.\n\n### See Also\n\n* [npm ci](/cli/v7/commands/npm-ci)\n* [npm test](/cli/v7/commands/npm-test)\n"},{"id":"161607ef-dbf8-5446-b9a5-d7663006a53e","frontmatter":{"title":"npm-install-test"},"rawBody":"---\ntitle: npm-install-test\nsection: 1\ndescription: Install package(s) and run tests\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-install-test.md\n---\n\n### Synopsis\n\n```bash\nnpm install-test (with no args, in package dir)\nnpm install-test [<@scope>/]<name>\nnpm install-test [<@scope>/]<name>@<tag>\nnpm install-test [<@scope>/]<name>@<version>\nnpm install-test [<@scope>/]<name>@<version range>\nnpm install-test <tarball file>\nnpm install-test <tarball url>\nnpm install-test <folder>\n\nalias: npm it\ncommon options: [--save|--save-dev|--save-optional] [--save-exact] [--dry-run]\n```\n\n### Description\n\nThis command runs an `npm install` followed immediately by an `npm test`. It\ntakes exactly the same arguments as `npm install`.\n\n### See Also\n\n* [npm install](/cli/v7/commands/npm-install)\n* [npm test](/cli/v7/commands/npm-test)\n"},{"id":"61fac420-dca8-51aa-8b3c-a071623a42ef","frontmatter":{"title":"npm-install"},"rawBody":"---\ntitle: npm-install\nsection: 1\ndescription: Install a package\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-install.md\n---\n\n### Synopsis\n\n```bash\nnpm install (with no args, in package dir)\nnpm install [<@scope>/]<name>\nnpm install [<@scope>/]<name>@<tag>\nnpm install [<@scope>/]<name>@<version>\nnpm install [<@scope>/]<name>@<version range>\nnpm install <alias>@npm:<name>\nnpm install <git-host>:<git-user>/<repo-name>\nnpm install <git repo url>\nnpm install <tarball file>\nnpm install <tarball url>\nnpm install <folder>\n\naliases: npm i, npm add\ncommon options: [-P|--save-prod|-D|--save-dev|-O|--save-optional] [-E|--save-exact] [-B|--save-bundle] [--no-save] [--dry-run]\n```\n\n### Description\n\nThis command installs a package, and any packages that it depends on. If the\npackage has a package-lock or shrinkwrap file, the installation of dependencies\nwill be driven by that, with an `npm-shrinkwrap.json` taking precedence if both\nfiles exist. See [package-lock.json](/cli/v7/configuring-npm/package-lock-json) and [`npm shrinkwrap`](/cli/v7/commands/npm-shrinkwrap).\n\nA `package` is:\n\n* a) a folder containing a program described by a [`package.json`](/cli/v7/configuring-npm/package-json) file\n* b) a gzipped tarball containing (a)\n* c) a url that resolves to (b)\n* d) a `<name>@<version>` that is published on the registry (see [`registry`](/cli/v7/using-npm/registry)) with (c)\n* e) a `<name>@<tag>` (see [`npm dist-tag`](/cli/v7/commands/npm-dist-tag)) that points to (d)\n* f) a `<name>` that has a \"latest\" tag satisfying (e)\n* g) a `<git remote url>` that resolves to (a)\n\nEven if you never publish your package, you can still get a lot of\nbenefits of using npm if you just want to write a node program (a), and\nperhaps if you also want to be able to easily install it elsewhere\nafter packing it up into a tarball (b).\n\n\n* `npm install` (in package directory, no arguments):\n\n    Install the dependencies in the local node_modules folder.\n\n    In global mode (ie, with `-g` or `--global` appended to the command),\n    it installs the current package context (ie, the current working\n    directory) as a global package.\n\n    By default, `npm install` will install all modules listed as dependencies\n    in [`package.json`](/cli/v7/configuring-npm/package-json).\n\n    With the `--production` flag (or when the `NODE_ENV` environment variable\n    is set to `production`), npm will not install modules listed in\n    `devDependencies`. To install all modules listed in both `dependencies` \n    and `devDependencies` when `NODE_ENV` environment variable is set to `production`, \n    you can use `--production=false`.\n\n    > NOTE: The `--production` flag has no particular meaning when adding a\n    dependency to a project.\n\n* `npm install <folder>`:\n\n    Install the package in the directory as a symlink in the current project.\n    Its dependencies will be installed before it's linked. If `<folder>` sits\n    inside the root of your project, its dependencies may be hoisted to the\n    toplevel `node_modules` as they would for other types of dependencies.\n\n* `npm install <tarball file>`:\n\n    Install a package that is sitting on the filesystem.  Note: if you just want\n    to link a dev directory into your npm root, you can do this more easily by\n    using `npm link`.\n\n    Tarball requirements:\n    * The filename *must* use `.tar`, `.tar.gz`, or `.tgz` as\n    the extension.\n    * The package contents should reside in a subfolder inside the tarball (usually it is called `package/`). npm strips one directory layer when installing the package (an equivalent of `tar x --strip-components=1` is run).\n    * The package must contain a `package.json` file with `name` and `version` properties.\n\n    Example:\n\n          npm install ./package.tgz\n\n* `npm install <tarball url>`:\n\n    Fetch the tarball url, and then install it.  In order to distinguish between\n    this and other options, the argument must start with \"http://\" or \"https://\"\n\n    Example:\n\n          npm install https://github.com/indexzero/forever/tarball/v0.5.6\n\n* `npm install [<@scope>/]<name>`:\n\n    Do a `<name>@<tag>` install, where `<tag>` is the \"tag\" config. (See\n    [`config`](/cli/v7/using-npm/config). The config's default value is `latest`.)\n\n    In most cases, this will install the version of the modules tagged as\n    `latest` on the npm registry.\n\n    Example:\n\n          npm install sax\n\n* `npm install <alias>@npm:<name>`:\n\n    Install a package under a custom alias. Allows multiple versions of\n    a same-name package side-by-side, more convenient import names for\n    packages with otherwise long ones and using git forks replacements\n    or forked npm packages as replacements. Aliasing works only on your\n    project and does not rename packages in transitive dependencies.\n    Aliases should follow the naming conventions stated in\n    [`validate-npm-package-name`](https://www.npmjs.com/package/validate-npm-package-name#naming-rules).\n\n    Examples:\n\n          npm install my-react@npm:react\n          npm install jquery2@npm:jquery@2\n          npm install jquery3@npm:jquery@3\n          npm install npa@npm:npm-package-arg\n\n\n    `npm install` saves any specified packages into `dependencies` by default.\n    Additionally, you can control where and how they get saved with some\n    additional flags:\n\n    * `-P, --save-prod`: Package will appear in your `dependencies`. This is the\n                         default unless `-D` or `-O` are present.\n\n    * `-D, --save-dev`: Package will appear in your `devDependencies`.\n\n    * `-O, --save-optional`: Package will appear in your `optionalDependencies`.\n\n    * `--no-save`: Prevents saving to `dependencies`.\n\n    When using any of the above options to save dependencies to your\n    package.json, there are two additional, optional flags:\n\n    * `-E, --save-exact`: Saved dependencies will be configured with an\n      exact version rather than using npm's default semver range\n      operator.\n\n    * `-B, --save-bundle`: Saved dependencies will also be added to your `bundleDependencies` list.\n\n    Further, if you have an `npm-shrinkwrap.json` or `package-lock.json` then it\n    will be updated as well.\n\n    `<scope>` is optional. The package will be downloaded from the registry\n    associated with the specified scope. If no registry is associated with\n    the given scope the default registry is assumed. See [`scope`](/cli/v7/using-npm/scope).\n\n    Note: if you do not include the @-symbol on your scope name, npm will\n    interpret this as a GitHub repository instead, see below. Scopes names\n    must also be followed by a slash.\n\n    Examples:\n\n    ```bash\n    npm install sax\n    npm install githubname/reponame\n    npm install @myorg/privatepackage\n    npm install node-tap --save-dev\n    npm install dtrace-provider --save-optional\n    npm install readable-stream --save-exact\n    npm install ansi-regex --save-bundle\n    ```\n\n    **Note**: If there is a file or folder named `<name>` in the current\n    working directory, then it will try to install that, and only try to\n    fetch the package by name if it is not valid.\n\n* `npm install [<@scope>/]<name>@<tag>`:\n\n    Install the version of the package that is referenced by the specified tag.\n    If the tag does not exist in the registry data for that package, then this\n    will fail.\n\n    Example:\n\n    ```bash\n    npm install sax@latest\n    npm install @myorg/mypackage@latest\n    ```\n\n* `npm install [<@scope>/]<name>@<version>`:\n\n    Install the specified version of the package.  This will fail if the\n    version has not been published to the registry.\n\n    Example:\n\n    ```bash\n    npm install sax@0.1.1\n    npm install @myorg/privatepackage@1.5.0\n    ```\n\n* `npm install [<@scope>/]<name>@<version range>`:\n\n    Install a version of the package matching the specified version range.  This\n    will follow the same rules for resolving dependencies described in [`package.json`](/cli/v7/configuring-npm/package-json).\n\n    Note that most version ranges must be put in quotes so that your shell will\n    treat it as a single argument.\n\n    Example:\n    ```bash\n    npm install sax@\">=0.1.0 <0.2.0\"\n    npm install @myorg/privatepackage@\">=0.1.0 <0.2.0\"\n    ```\n\n* `npm install <git remote url>`:\n\n    Installs the package from the hosted git provider, cloning it with `git`.\n    For a full git remote url, only that URL will be attempted.\n\n    ```bash\n      <protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish> | #semver:<semver>]\n    ```\n\n    `<protocol>` is one of `git`, `git+ssh`, `git+http`, `git+https`, or\n    `git+file`.\n\n    If `#<commit-ish>` is provided, it will be used to clone exactly that\n    commit. If the commit-ish has the format `#semver:<semver>`, `<semver>` can\n    be any valid semver range or exact version, and npm will look for any tags\n    or refs matching that range in the remote repository, much as it would for a\n    registry dependency. If neither `#<commit-ish>` or `#semver:<semver>` is\n    specified, then the default branch of the repository is used.\n\n    If the repository makes use of submodules, those submodules will be cloned\n    as well.\n\n    If the package being installed contains a `prepare` script, its\n    `dependencies` and `devDependencies` will be installed, and the prepare\n    script will be run, before the package is packaged and installed.\n\n    The following git environment variables are recognized by npm and will be\n    added to the environment when running git:\n\n    * `GIT_ASKPASS`\n    * `GIT_EXEC_PATH`\n    * `GIT_PROXY_COMMAND`\n    * `GIT_SSH`\n    * `GIT_SSH_COMMAND`\n    * `GIT_SSL_CAINFO`\n    * `GIT_SSL_NO_VERIFY`\n\n    See the git man page for details.\n\n    Examples:\n\n    ```bash\n    npm install git+ssh://git@github.com:npm/cli.git#v1.0.27\n    npm install git+ssh://git@github.com:npm/cli#semver:^5.0\n    npm install git+https://isaacs@github.com/npm/cli.git\n    npm install git://github.com/npm/cli.git#v1.0.27\n    GIT_SSH_COMMAND='ssh -i ~/.ssh/custom_ident' npm install git+ssh://git@github.com:npm/cli.git\n    ```\n\n* `npm install <githubname>/<githubrepo>[#<commit-ish>]`:\n* `npm install github:<githubname>/<githubrepo>[#<commit-ish>]`:\n\n    Install the package at `https://github.com/githubname/githubrepo` by\n    attempting to clone it using `git`.\n\n    If `#<commit-ish>` is provided, it will be used to clone exactly that\n    commit. If the commit-ish has the format `#semver:<semver>`, `<semver>` can\n    be any valid semver range or exact version, and npm will look for any tags\n    or refs matching that range in the remote repository, much as it would for a\n    registry dependency. If neither `#<commit-ish>` or `#semver:<semver>` is\n    specified, then `master` is used.\n\n    As with regular git dependencies, `dependencies` and `devDependencies` will\n    be installed if the package has a `prepare` script, before the package is\n    done installing.\n\n    Examples:\n    \n    ```bash\n    npm install mygithubuser/myproject\n    npm install github:mygithubuser/myproject\n   ```\n\n* `npm install gist:[<githubname>/]<gistID>[#<commit-ish>|#semver:<semver>]`:\n\n    Install the package at `https://gist.github.com/gistID` by attempting to\n    clone it using `git`. The GitHub username associated with the gist is\n    optional and will not be saved in `package.json`.\n\n    As with regular git dependencies, `dependencies` and `devDependencies` will\n    be installed if the package has a `prepare` script, before the package is\n    done installing.\n\n    Example:\n    \n    ```bash\n    npm install gist:101a11beef\n    ```\n\n* `npm install bitbucket:<bitbucketname>/<bitbucketrepo>[#<commit-ish>]`:\n\n    Install the package at `https://bitbucket.org/bitbucketname/bitbucketrepo`\n    by attempting to clone it using `git`.\n\n    If `#<commit-ish>` is provided, it will be used to clone exactly that\n    commit. If the commit-ish has the format `#semver:<semver>`, `<semver>` can\n    be any valid semver range or exact version, and npm will look for any tags\n    or refs matching that range in the remote repository, much as it would for a\n    registry dependency. If neither `#<commit-ish>` or `#semver:<semver>` is\n    specified, then `master` is used.\n\n    As with regular git dependencies, `dependencies` and `devDependencies` will\n    be installed if the package has a `prepare` script, before the package is\n    done installing.\n\n    Example:\n    \n    ```bash\n    npm install bitbucket:mybitbucketuser/myproject\n    ```\n\n* `npm install gitlab:<gitlabname>/<gitlabrepo>[#<commit-ish>]`:\n\n    Install the package at `https://gitlab.com/gitlabname/gitlabrepo`\n    by attempting to clone it using `git`.\n\n    If `#<commit-ish>` is provided, it will be used to clone exactly that\n    commit. If the commit-ish has the format `#semver:<semver>`, `<semver>` can\n    be any valid semver range or exact version, and npm will look for any tags\n    or refs matching that range in the remote repository, much as it would for a\n    registry dependency. If neither `#<commit-ish>` or `#semver:<semver>` is\n    specified, then `master` is used.\n\n    As with regular git dependencies, `dependencies` and `devDependencies` will\n    be installed if the package has a `prepare` script, before the package is\n    done installing.\n\n    Example:\n    \n    ```bash\n    npm install gitlab:mygitlabuser/myproject\n    npm install gitlab:myusr/myproj#semver:^5.0\n    ```\n\nYou may combine multiple arguments, and even multiple types of arguments.\nFor example:\n\n```bash\nnpm install sax@\">=0.1.0 <0.2.0\" bench supervisor\n```\n\nThe `--tag` argument will apply to all of the specified install targets. If a\ntag with the given name exists, the tagged version is preferred over newer\nversions.\n\nThe `--dry-run` argument will report in the usual way what the install would\nhave done without actually installing anything.\n\nThe `--package-lock-only` argument will only update the `package-lock.json`,\ninstead of checking `node_modules` and downloading dependencies.\n\nThe `-f` or `--force` argument will force npm to fetch remote resources even if a\nlocal copy exists on disk.\n\n```bash\nnpm install sax --force\n```\n\nThe `--no-fund` argument will hide the message displayed at the end of each\ninstall that acknowledges the number of dependencies looking for funding.\nSee `npm-fund(1)`\n\nThe `-g` or `--global` argument will cause npm to install the package globally\nrather than locally.  See [folders](/cli/v7/configuring-npm/folders).\n\nThe `--global-style` argument will cause npm to install the package into\nyour local `node_modules` folder with the same layout it uses with the\nglobal `node_modules` folder. Only your direct dependencies will show in\n`node_modules` and everything they depend on will be flattened in their\n`node_modules` folders. This obviously will eliminate some deduping.\n\nThe `--ignore-scripts` argument will cause npm to not execute any\nscripts defined in the package.json. See [`scripts`](/cli/v7/using-npm/scripts).\n\nThe `--legacy-bundling` argument will cause npm to install the package such\nthat versions of npm prior to 1.4, such as the one included with node 0.8,\ncan install the package. This eliminates all automatic deduping.\n\nThe `--link` argument will cause npm to link global installs into the\nlocal space in some cases.\n\nThe `--no-bin-links` argument will prevent npm from creating symlinks for\nany binaries the package might contain.\n\nThe `--no-optional` argument will prevent optional dependencies from\nbeing installed.\n\nThe `--no-shrinkwrap` argument, which will ignore an available\npackage lock or shrinkwrap file and use the package.json instead.\n\nThe `--no-package-lock` argument will prevent npm from creating a\n`package-lock.json` file.  When running with package-lock's disabled npm\nwill not automatically prune your node modules when installing.\n\nThe `--nodedir=/path/to/node/source` argument will allow npm to find the\nnode source code so that npm can compile native modules.\n\nThe `--only={prod[uction]|dev[elopment]}` argument will cause either only\n`devDependencies` or only non-`devDependencies` to be installed regardless of the `NODE_ENV`.\n\nThe `--no-audit` argument can be used to disable sending of audit reports to\nthe configured registries.  See [`npm-audit`](npm-audit) for details on what is sent.\n\nSee [`config`](/cli/v7/using-npm/config).  Many of the configuration params have some\neffect on installation, since that's most of what npm does.\n\n#### Algorithm\n\nTo install a package, npm uses the following algorithm:\n```bash\nload the existing node_modules tree from disk\nclone the tree\nfetch the package.json and assorted metadata and add it to the clone\nwalk the clone and add any missing dependencies\n  dependencies will be added as close to the top as is possible\n  without breaking any other modules\ncompare the original tree with the cloned tree and make a list of\nactions to take to convert one to the other\nexecute all of the actions, deepest first\n  kinds of actions are install, update, remove and move\n```\n\nFor this `package{dep}` structure: `A{B,C}, B{C}, C{D}`,\nthis algorithm produces:\n\n```bash\nA\n+-- B\n+-- C\n+-- D\n```\n\nThat is, the dependency from B to C is satisfied by the fact that A\nalready caused C to be installed at a higher level. D is still installed\nat the top level because nothing conflicts with it.\n\nFor `A{B,C}, B{C,D@1}, C{D@2}`, this algorithm produces:\n\n```bash\nA\n+-- B\n+-- C\n   `-- D@2\n+-- D@1\n```\n\nBecause B's D@1 will be installed in the top level, C now has to install D@2\nprivately for itself. This algorithm is deterministic, but different trees may\nbe produced if two dependencies are requested for installation in a different\norder.\n\nSee [folders](/cli/v7/configuring-npm/folders) for a more detailed description of the specific folder structures that npm creates.\n\n### Limitations of npm's Install Algorithm\n\nnpm will refuse to install any package with an identical name to the\ncurrent package. This can be overridden with the `--force` flag, but in\nmost cases can simply be addressed by changing the local package name.\n\nThere are some very rare and pathological edge-cases where a cycle can\ncause npm to try to install a never-ending tree of packages.  Here is\nthe simplest case:\n\n```bash\nA -> B -> A' -> B' -> A -> B -> A' -> B' -> A -> ...\n```\n\nwhere `A` is some version of a package, and `A'` is a different version\nof the same package.  Because `B` depends on a different version of `A`\nthan the one that is already in the tree, it must install a separate\ncopy.  The same is true of `A'`, which must install `B'`.  Because `B'`\ndepends on the original version of `A`, which has been overridden, the\ncycle falls into infinite regress.\n\nTo avoid this situation, npm flat-out refuses to install any\n`name@version` that is already present anywhere in the tree of package\nfolder ancestors.  A more correct, but more complex, solution would be\nto symlink the existing version into the new location.  If this ever\naffects a real use-case, it will be investigated.\n\n### See Also\n\n* [npm folders](/cli/v7/configuring-npm/folders)\n* [npm update](/cli/v7/commands/npm-update)\n* [npm audit](/cli/v7/commands/npm-audit)\n* [npm fund](/cli/v7/commands/npm-fund)\n* [npm link](/cli/v7/commands/npm-link)\n* [npm rebuild](/cli/v7/commands/npm-rebuild)\n* [npm scripts](/cli/v7/using-npm/scripts)\n* [npm build](/cli/v7/commands/npm-build)\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n* [npm registry](/cli/v7/using-npm/registry)\n* [npm dist-tag](/cli/v7/commands/npm-dist-tag)\n* [npm uninstall](/cli/v7/commands/npm-uninstall)\n* [npm shrinkwrap](/cli/v7/commands/npm-shrinkwrap)\n* [package.json](/cli/v7/configuring-npm/package-json)\n"},{"id":"92e3e89d-7f22-5c8c-9620-87a1ffa782ad","frontmatter":{"title":"npm-link"},"rawBody":"---\ntitle: npm-link\nsection: 1\ndescription: Symlink a package folder\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-link.md\n---\n\n### Synopsis\n\n```bash\nnpm link (in package dir)\nnpm link [<@scope>/]<pkg>[@<version>]\n\nalias: npm ln\n```\n\n### Description\n\nPackage linking is a two-step process.\n\nFirst, `npm link` in a package folder will create a symlink in the global folder\n`{prefix}/lib/node_modules/<package>` that links to the package where the `npm\nlink` command was executed. It will also link any bins in the package to `{prefix}/bin/{name}`.\nNote that `npm link` uses the global prefix (see `npm prefix -g` for its value).\n\nNext, in some other location, `npm link package-name` will create a\nsymbolic link from globally-installed `package-name` to `node_modules/`\nof the current folder.\n\nNote that `package-name` is taken from `package.json`,\nnot from directory name.\n\nThe package name can be optionally prefixed with a scope. See [`scope`](/cli/v7/using-npm/scope).\nThe scope must be preceded by an @-symbol and followed by a slash.\n\nWhen creating tarballs for `npm publish`, the linked packages are\n\"snapshotted\" to their current state by resolving the symbolic links.\n\nThis is handy for installing your own stuff, so that you can work on it and\ntest it iteratively without having to continually rebuild.\n\nFor example:\n\n```bash\n    cd ~/projects/node-redis    # go into the package directory\n    npm link                    # creates global link\n    cd ~/projects/node-bloggy   # go into some other package directory.\n    npm link redis              # link-install the package\n```\n\nNow, any changes to ~/projects/node-redis will be reflected in\n~/projects/node-bloggy/node_modules/node-redis/. Note that the link should\nbe to the package name, not the directory name for that package.\n\nYou may also shortcut the two steps in one.  For example, to do the\nabove use-case in a shorter way:\n\n```bash\ncd ~/projects/node-bloggy  # go into the dir of your main project\nnpm link ../node-redis     # link the dir of your dependency\n```\n\nThe second line is the equivalent of doing:\n\n```bash\n(cd ../node-redis; npm link)\nnpm link redis\n```\n\nThat is, it first creates a global link, and then links the global\ninstallation target into your project's `node_modules` folder.\n\nNote that in this case, you are referring to the directory name, `node-redis`,\nrather than the package name `redis`.\n\nIf your linked package is scoped (see [`scope`](/cli/v7/using-npm/scope)) your link command must include that scope, e.g.\n\n```bash\nnpm link @myorg/privatepackage\n```\n\n### See Also\n\n* [npm developers](/cli/v7/using-npm/developers)\n* [package.json](/cli/v7/configuring-npm/package-json)\n* [npm install](/cli/v7/commands/npm-install)\n* [npm folders](/cli/v7/configuring-npm/folders)\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n"},{"id":"4a34b301-60e9-5e2c-98c9-e947c9c556b6","frontmatter":{"title":"npm-logout"},"rawBody":"---\ntitle: npm-logout\nsection: 1\ndescription: Log out of the registry\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-logout.md\n---\n\n### Synopsis\n\n```bash\nnpm logout [--registry=<url>] [--scope=<@scope>]\n```\n\n### Description\n\nWhen logged into a registry that supports token-based authentication, tell the\nserver to end this token's session. This will invalidate the token everywhere\nyou're using it, not just for the current environment.\n\nWhen logged into a legacy registry that uses username and password authentication, this will\nclear the credentials in your user configuration. In this case, it will _only_ affect\nthe current environment.\n\nIf `--scope` is provided, this will find the credentials for the registry\nconnected to that scope, if set.\n\n### Configuration\n\n#### registry\n\nDefault: https://registry.npmjs.org/\n\nThe base URL of the npm package registry. If `scope` is also specified,\nit takes precedence.\n\n#### scope\n\nDefault: The scope of your current project, if any, otherwise none.\n\nIf specified, you will be logged out of the specified scope. See [`scope`](/cli/v7/using-npm/scope).\n\n```bash\nnpm logout --scope=@myco\n```\n\n### See Also\n\n* [npm adduser](/cli/v7/commands/npm-adduser)\n* [npm registry](/cli/v7/using-npm/registry)\n* [npm config](/cli/v7/commands/npm-config)\n* [npm whoami](/cli/v7/commands/npm-whoami)\n"},{"id":"4af5ca60-bb04-5463-9403-3fca0b0f73b3","frontmatter":{"title":"npm-ls"},"rawBody":"---\ntitle: npm-ls\nsection: 1\ndescription: List installed packages\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-ls.md\n---\n\n### Synopsis\n\n```bash\nnpm ls [[<@scope>/]<pkg> ...]\n\naliases: list, la, ll\n```\n\n### Description\n\nThis command will print to stdout all the versions of packages that are\ninstalled, as well as their dependencies, in a tree-structure.\n\nPositional arguments are `name@version-range` identifiers, which will\nlimit the results to only the paths to the packages named.  Note that\nnested packages will *also* show the paths to the specified packages.\nFor example, running `npm ls promzard` in npm's source tree will show:\n\n```bash\n    npm@7.0.0 /path/to/npm\n    └─┬ init-package-json@0.0.4\n      └── promzard@0.1.5\n```\n\nIt will print out extraneous, missing, and invalid packages.\n\nIf a project specifies git urls for dependencies these are shown\nin parentheses after the name@version to make it easier for users to\nrecognize potential forks of a project.\n\nThe tree shown is the logical dependency tree, based on package\ndependencies, not the physical layout of your node_modules folder.\n\nWhen run as `ll` or `la`, it shows extended information by default.\n\n### Configuration\n\n#### json\n\n* Default: false\n* Type: Boolean\n\nShow information in JSON format.\n\n#### long\n\n* Default: false\n* Type: Boolean\n\nShow extended information.\n\n#### parseable\n\n* Default: false\n* Type: Boolean\n\nShow parseable output instead of tree view.\n\n#### global\n\n* Default: false\n* Type: Boolean\n\nList packages in the global install prefix instead of in the current\nproject.\n\n#### depth\n\n* Type: Int\n\nMax display depth of the dependency tree.\n\n#### prod / production\n\n* Type: Boolean\n* Default: false\n\nDisplay only the dependency tree for packages in `dependencies`.\n\n#### dev / development\n\n* Type: Boolean\n* Default: false\n\nDisplay only the dependency tree for packages in `devDependencies`.\n\n#### only\n\n* Type: String\n\nWhen \"dev\" or \"development\", is an alias to `dev`.\n\nWhen \"prod\" or \"production\", is an alias to `production`.\n\n#### link\n\n* Type: Boolean\n* Default: false\n\nDisplay only dependencies which are linked\n\n#### unicode\n\n* Type: Boolean\n* Default: true\n\nWhether to represent the tree structure using unicode characters.\nSet it to false in order to use all-ansi output.\n\n### See Also\n\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n* [npm folders](/cli/v7/configuring-npm/folders)\n* [npm explain](/cli/v7/commands/npm-explain)\n* [npm install](/cli/v7/commands/npm-install)\n* [npm link](/cli/v7/commands/npm-link)\n* [npm prune](/cli/v7/commands/npm-prune)\n* [npm outdated](/cli/v7/commands/npm-outdated)\n* [npm update](/cli/v7/commands/npm-update)\n"},{"id":"c8b0e66a-af1d-5858-830e-0a4cdbbe44d2","frontmatter":{"title":"npm-org"},"rawBody":"---\ntitle: npm-org\nsection: 1\ndescription: Manage orgs\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-org.md\n---\n\n### Synopsis\n\n```bash\nnpm org set <orgname> <username> [developer | admin | owner]\nnpm org rm <orgname> <username>\nnpm org ls <orgname> [<username>]\n```\n\n### Example\n\nAdd a new developer to an org:\n\n```bash\n$ npm org set my-org @mx-smith\n```\n\nAdd a new admin to an org (or change a developer to an admin):\n\n```bash\n$ npm org set my-org @mx-santos admin\n```\n\nRemove a user from an org:\n\n```bash\n$ npm org rm my-org mx-santos\n```\n\nList all users in an org:\n\n```bash\n$ npm org ls my-org\n```\n\nList all users in JSON format:\n\n```bash\n$ npm org ls my-org --json\n```\n\nSee what role a user has in an org:\n\n```bash\n$ npm org ls my-org @mx-santos\n```\n\n### Description\n\nYou can use the `npm org` commands to manage and view users of an organization.\nIt supports adding and removing users, changing their roles, listing them, and\nfinding specific ones and their roles.\n\n### See Also\n\n* [Documentation on npm Orgs](https://docs.npmjs.com/orgs/)\n"},{"id":"9beb317a-26e0-5015-be47-f4ee9420dbfd","frontmatter":{"title":"npm-outdated"},"rawBody":"---\ntitle: npm-outdated\nsection: 1\ndescription: Check for outdated packages\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-outdated.md\n---\n\n### Synopsis\n\n```bash\nnpm outdated [[<@scope>/]<pkg> ...]\n```\n\n### Description\n\nThis command will check the registry to see if any (or, specific) installed\npackages are currently outdated.\n\nIn the output:\n\n* `wanted` is the maximum version of the package that satisfies the semver\n  range specified in `package.json`. If there's no available semver range (i.e.\n  you're running `npm outdated --global`, or the package isn't included in\n  `package.json`), then `wanted` shows the currently-installed version.\n* `latest` is the version of the package tagged as latest in the registry.\n  Running `npm publish` with no special configuration will publish the package\n  with a dist-tag of `latest`. This may or may not be the maximum version of\n  the package, or the most-recently published version of the package, depending\n  on how the package's developer manages the latest [dist-tag](npm-dist-tag).\n* `location` is where in the physical tree the package is located.\n* `depended by` shows which package depends on the displayed dependency\n* `package type` (when using `--long` / `-l`) tells you whether this package is\n  a `dependency` or a dev/peer/optional dependency. Packages not included in `package.json`\n  are always marked `dependencies`.\n* `homepage` (when using `--long` / `-l`) is the `homepage` value contained in the package's packument\n* Red means there's a newer version matching your semver requirements, so you should update now.\n* Yellow indicates that there's a newer version above your semver requirements (usually new major, or new 0.x minor) so proceed with caution.\n\n### An example\n\n```bash\n$ npm outdated\nPackage      Current   Wanted   Latest  Location                  Depended by\nglob          5.0.15   5.0.15    6.0.1  node_modules/glob         dependent-package-name\nnothingness    0.0.3      git      git  node_modules/nothingness  dependent-package-name\nnpm            3.5.1    3.5.2    3.5.1  node_modules/npm          dependent-package-name\nlocal-dev      0.0.3   linked   linked  local-dev                 dependent-package-name\nonce           1.3.2    1.3.3    1.3.3  node_modules/once         dependent-package-name\n```\n\nWith these `dependencies`:\n```json\n{\n  \"glob\": \"^5.0.15\",\n  \"nothingness\": \"github:othiym23/nothingness#master\",\n  \"npm\": \"^3.5.1\",\n  \"once\": \"^1.3.1\"\n}\n```\n\nA few things to note:\n\n* `glob` requires `^5`, which prevents npm from installing `glob@6`, which is\n  outside the semver range.\n* Git dependencies will always be reinstalled, because of how they're specified.\n  The installed committish might satisfy the dependency specifier (if it's\n  something immutable, like a commit SHA), or it might not, so `npm outdated` and\n  `npm update` have to fetch Git repos to check. This is why currently doing a\n  reinstall of a Git dependency always forces a new clone and install.\n* `npm@3.5.2` is marked as \"wanted\", but \"latest\" is `npm@3.5.1` because npm\n  uses dist-tags to manage its `latest` and `next` release channels. `npm update`\n  will install the _newest_ version, but `npm install npm` (with no semver range)\n  will install whatever's tagged as `latest`.\n* `once` is just plain out of date. Reinstalling `node_modules` from scratch or\n  running `npm update` will bring it up to spec.\n\n### Configuration\n\n#### json\n\n* Default: false\n* Type: Boolean\n\nShow information in JSON format.\n\n#### long\n\n* Default: false\n* Type: Boolean\n\nShow extended information.\n\n#### parseable\n\n* Default: false\n* Type: Boolean\n\nShow parseable output instead of tree view.\n\n#### global\n\n* Default: false\n* Type: Boolean\n\nCheck packages in the global install prefix instead of in the current\nproject.\n\n#### all\n\n* Default: false\n* Type: Boolean\n\nDisplay all outdated dependencies on the tree.\n\n### See Also\n\n* [npm update](/cli/v7/commands/npm-update)\n* [npm dist-tag](/cli/v7/commands/npm-dist-tag)\n* [npm registry](/cli/v7/using-npm/registry)\n* [npm folders](/cli/v7/configuring-npm/folders)\n"},{"id":"00d38971-3902-5c37-8bc5-7de956c879a3","frontmatter":{"title":"npm-owner"},"rawBody":"---\ntitle: npm-owner\nsection: 1\ndescription: Manage package owners\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-owner.md\n---\n\n### Synopsis\n\n```bash\nnpm owner add <user> [<@scope>/]<pkg>\nnpm owner rm <user> [<@scope>/]<pkg>\nnpm owner ls [<@scope>/]<pkg>\n\naliases: author\n```\n\n### Description\n\nManage ownership of published packages.\n\n* ls:\n  List all the users who have access to modify a package and push new versions.\n  Handy when you need to know who to bug for help.\n* add:\n  Add a new user as a maintainer of a package.  This user is enabled to modify\n  metadata, publish new versions, and add other owners.\n* rm:\n  Remove a user from the package owner list.  This immediately revokes their\n  privileges.\n\nNote that there is only one level of access.  Either you can modify a package,\nor you can't.  Future versions may contain more fine-grained access levels, but\nthat is not implemented at this time.\n\nIf you have two-factor authentication enabled with `auth-and-writes` then\nyou'll need to include an otp on the command line when changing ownership\nwith `--otp`.\n\n### See Also\n\n* [npm publish](/cli/v7/commands/npm-publish)\n* [npm registry](/cli/v7/using-npm/registry)\n* [npm adduser](/cli/v7/commands/npm-adduser)\n* [npm disputes](/cli/v7/using-npm/disputes)\n"},{"id":"464f419c-d9f4-57e7-b345-8f04bbbacbd9","frontmatter":{"title":"npm-pack"},"rawBody":"---\ntitle: npm-pack\nsection: 1\ndescription: Create a tarball from a package\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-pack.md\n---\n\n### Synopsis\n\n```bash\nnpm pack [[<@scope>/]<pkg>...] [--dry-run]\n```\n\n### Description\n\nFor anything that's installable (that is, a package folder, tarball,\ntarball url, name@tag, name@version, name, or scoped name), this\ncommand will fetch it to the cache, and then copy the tarball to the\ncurrent working directory as `<name>-<version>.tgz`, and then write\nthe filenames out to stdout.\n\nIf the same package is specified multiple times, then the file will be\noverwritten the second time.\n\nIf no arguments are supplied, then npm packs the current package folder.\n\nThe `--dry-run` argument will do everything that pack usually does without\nactually packing anything. Reports on what would have gone into the tarball.\n\n### See Also\n\n* [npm cache](/cli/v7/commands/npm-cache)\n* [npm publish](/cli/v7/commands/npm-publish)\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n"},{"id":"0e4d156e-c5ad-59ba-8c39-277157e4d8ee","frontmatter":{"title":"npm-ping"},"rawBody":"---\ntitle: npm-ping\nsection: 1\ndescription: Ping npm registry\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-ping.md\n---\n\n### Synopsis\n\n```bash\nnpm ping [--registry <registry>]\n```\n\n### Description\n\nPing the configured or given npm registry and verify authentication.\nIf it works it will output something like:\n\n```bash\nPing success: {*Details about registry*}\n```\notherwise you will get:\n```bash\nPing error: {*Detail about error}\n```\n\n### See Also\n\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n"},{"id":"a47600b4-6983-5f75-af01-f17a8383d648","frontmatter":{"title":"npm-prefix"},"rawBody":"---\ntitle: npm-prefix\nsection: 1\ndescription: Display prefix\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-prefix.md\n---\n\n### Synopsis\n\n```bash\nnpm prefix [-g]\n```\n\n### Description\n\nPrint the local prefix to standard out. This is the closest parent directory\nto contain a `package.json` file or `node_modules` directory, unless `-g` is\nalso specified.\n\nIf `-g` is specified, this will be the value of the global prefix. See\n[`npm config`](/cli/v7/commands/npm-config) for more detail.\n\n### See Also\n\n* [npm root](/cli/v7/commands/npm-root)\n* [npm bin](/cli/v7/commands/npm-bin)\n* [npm folders](/cli/v7/configuring-npm/folders)\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n"},{"id":"8eb922d0-525e-5d5d-9267-8881ee5e4274","frontmatter":{"title":"npm-profile"},"rawBody":"---\ntitle: npm-profile\nsection: 1\ndescription: Change settings on your registry profile\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-profile.md\n---\n\n### Synopsis\n\n```bash\nnpm profile get [--json|--parseable] [<property>]\nnpm profile set [--json|--parseable] <property> <value>\nnpm profile set password\nnpm profile enable-2fa [auth-and-writes|auth-only]\nnpm profile disable-2fa\n```\n\n### Description\n\nChange your profile information on the registry.  This not be available if\nyou're using a non-npmjs registry.\n\n* `npm profile get [<property>]`:\n  Display all of the properties of your profile, or one or more specific\n  properties.  It looks like:\n\n```bash\n+-----------------+---------------------------+\n| name            | example                   |\n+-----------------+---------------------------+\n| email           | me@example.com (verified) |\n+-----------------+---------------------------+\n| two factor auth | auth-and-writes           |\n+-----------------+---------------------------+\n| fullname        | Example User              |\n+-----------------+---------------------------+\n| homepage        |                           |\n+-----------------+---------------------------+\n| freenode        |                           |\n+-----------------+---------------------------+\n| twitter         |                           |\n+-----------------+---------------------------+\n| github          |                           |\n+-----------------+---------------------------+\n| created         | 2015-02-26T01:38:35.892Z  |\n+-----------------+---------------------------+\n| updated         | 2017-10-02T21:29:45.922Z  |\n+-----------------+---------------------------+\n```\n  \n* `npm profile set <property> <value>`:\n  Set the value of a profile property. You can set the following properties this way:\n    email, fullname, homepage, freenode, twitter, github\n\n* `npm profile set password`:\n  Change your password.  This is interactive, you'll be prompted for your\n  current password and a new password.  You'll also be prompted for an OTP\n  if you have two-factor authentication enabled.\n\n* `npm profile enable-2fa [auth-and-writes|auth-only]`:\n  Enables two-factor authentication. Defaults to `auth-and-writes` mode. Modes are:\n  * `auth-only`: Require an OTP when logging in or making changes to your\n    account's authentication.  The OTP will be required on both the website\n    and the command line.\n  * `auth-and-writes`: Requires an OTP at all the times `auth-only` does, and also requires one when\n    publishing a module, setting the `latest` dist-tag, or changing access\n    via `npm access` and `npm owner`.\n\n* `npm profile disable-2fa`:\n  Disables two-factor authentication.\n\n### Details\n\nAll of the `npm profile` subcommands accept `--json` and `--parseable` and\nwill tailor their output based on those.  Some of these commands may not be\navailable on non npmjs.com registries.\n\n### See Also\n\n* [npm config](/cli/v7/commands/npm-config)\n"},{"id":"2b7c3fe7-6405-5a9e-892d-4ff8cea7eb9c","frontmatter":{"title":"npm-prune"},"rawBody":"---\ntitle: npm-prune\nsection: 1\ndescription: Remove extraneous packages\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-prune.md\n---\n\n### Synopsis\n\n```bash\nnpm prune [[<@scope>/]<pkg>...] [--production] [--dry-run] [--json]\n```\n\n### Description\n\nThis command removes \"extraneous\" packages.  If a package name is\nprovided, then only packages matching one of the supplied names are\nremoved.\n\nExtraneous packages are packages that are not listed on the parent\npackage's dependencies list.\n\nIf the `--production` flag is specified or the `NODE_ENV` environment\nvariable is set to `production`, this command will remove the packages\nspecified in your `devDependencies`. Setting `--no-production` will\nnegate `NODE_ENV` being set to `production`.\n\nIf the `--dry-run` flag is used then no changes will actually be made.\n\nIf the `--json` flag is used then the changes `npm prune` made (or would\nhave made with `--dry-run`) are printed as a JSON object.\n\nIn normal operation with package-locks enabled, extraneous modules are\npruned automatically when modules are installed and you'll only need\nthis command with the `--production` flag.\n\nIf you've disabled package-locks then extraneous modules will not be removed\nand it's up to you to run `npm prune` from time-to-time to remove them.\n\n### See Also\n\n* [npm uninstall](/cli/v7/commands/npm-uninstall)\n* [npm folders](/cli/v7/configuring-npm/folders)\n* [npm ls](/cli/v7/commands/npm-ls)\n"},{"id":"a743a29a-5b4f-559b-912f-7f05f7f26137","frontmatter":{"title":"npm-publish"},"rawBody":"---\ntitle: npm-publish\nsection: 1\ndescription: Publish a package\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-publish.md\n---\n\n### Synopsis\n\n```bash\nnpm publish [<tarball>|<folder>] [--tag <tag>] [--access <public|restricted>] [--otp otpcode] [--dry-run]\n\nPublishes '.' if no argument supplied\nSets tag 'latest' if no --tag specified\n```\n\n### Description\n\nPublishes a package to the registry so that it can be installed by name. All\nfiles in the package directory are included if no local `.gitignore` or\n`.npmignore` file exists. If both files exist and a file is ignored by\n`.gitignore` but not by `.npmignore` then it will be included.  See\n[`developers`](/cli/v7/using-npm/developers) for full details on what's included in the published package, as well as details on how the package is built.\n\nBy default npm will publish to the public registry. This can be overridden by\nspecifying a different default registry or using a [`scope`](/cli/v7/using-npm/scope) in the name (see [`package.json`](/cli/v7/configuring-npm/package-json)).\n\n* `<folder>`:\n  A folder containing a package.json file\n\n* `<tarball>`:\n  A url or file path to a gzipped tar archive containing a single folder\n  with a package.json file inside.\n\n* `[--tag <tag>]`\n  Registers the published package with the given tag, such that\n  `npm install <name>@<tag>` will install this version.  By default,\n  `npm publish` updates and `npm install` installs the `latest` tag. See\n  [`npm-dist-tag`](npm-dist-tag) for details about tags.\n\n* `[--access <public|restricted>]`\n  Tells the registry whether this package should be published as public or\n  restricted. Only applies to scoped packages, which default to `restricted`.\n  If you don't have a paid account, you must publish with `--access public`\n  to publish scoped packages.\n\n* `[--otp <otpcode>]`\n  If you have two-factor authentication enabled in `auth-and-writes` mode\n  then you can provide a code from your authenticator with this. If you\n  don't include this and you're running from a TTY then you'll be prompted.\n\n* `[--dry-run]`\n  As of `npm@6`, does everything publish would do except actually publishing\n  to the registry. Reports the details of what would have been published.\n\nFails if the package name and version combination already exists in\nthe specified registry.\n\nOnce a package is published with a given name and version, that\nspecific name and version combination can never be used again, even if\nit is removed with [`npm unpublish`](/cli/v7/commands/npm-unpublish).\n\nAs of `npm@5`, both a sha1sum and an integrity field with a sha512sum of the\ntarball will be submitted to the registry during publication. Subsequent\ninstalls will use the strongest supported algorithm to verify downloads.\n\nSimilar to `--dry-run` see [`npm pack`](/cli/v7/commands/npm-pack), which figures out the files to be\nincluded and packs them into a tarball to be uploaded to the registry.\n\n### See Also\n\n* [npm registry](/cli/v7/using-npm/registry)\n* [npm scope](/cli/v7/using-npm/scope)\n* [npm adduser](/cli/v7/commands/npm-adduser)\n* [npm owner](/cli/v7/commands/npm-owner)\n* [npm deprecate](/cli/v7/commands/npm-deprecate)\n* [npm dist-tag](/cli/v7/commands/npm-dist-tag)\n* [npm pack](/cli/v7/commands/npm-pack)\n* [npm profile](/cli/v7/commands/npm-profile)\n"},{"id":"3824ff58-799e-594e-bca9-776510c14b93","frontmatter":{"title":"npm-rebuild"},"rawBody":"---\ntitle: npm-rebuild\nsection: 1\ndescription: Rebuild a package\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-rebuild.md\n---\n\n### Synopsis\n\n```bash\nnpm rebuild [[<@scope>/<name>]...]\n\nalias: npm rb\n```\n\n### Description\n\nThis command runs the `npm build` command on the matched folders.  This is useful when you install a new version of node, and must recompile all your C++ addons with the new binary.\n\n### See Also\n\n* [npm build](/cli/v7/commands/npm-build)\n* [npm install](/cli/v7/commands/npm-install)\n"},{"id":"887969cc-7751-57a7-a5b5-9c462c18636a","frontmatter":{"title":"npm-repo"},"rawBody":"---\ntitle: npm-repo\nsection: 1\ndescription: Open package repository page in the browser\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-repo.md\n---\n\n### Synopsis\n\n```bash\nnpm repo [<pkgname> [<pkgname> ...]]\n```\n\n### Description\n\nThis command tries to guess at the likely location of a package's\nrepository URL, and then tries to open it using the `--browser`\nconfig param. If no package name is provided, it will search for\na `package.json` in the current folder and use the `name` property.\n\n### Configuration\n\n#### browser\n\n* Default: OS X: `\"open\"`, Windows: `\"start\"`, Others: `\"xdg-open\"`\n* Type: String or Boolean\n\nThe browser that is called by the `npm repo` command to open websites.\n\nSet to `false` to suppress browser behavior and instead print urls to\nterminal.\n\nSet to `true` to use default system URL opener.\n\n### See Also\n\n* [npm docs](/cli/v7/commands/npm-docs)\n* [npm config](/cli/v7/commands/npm-config)\n"},{"id":"6c79b87e-77d5-5aad-baed-567fddc64d8e","frontmatter":{"title":"npm-restart"},"rawBody":"---\ntitle: npm-restart\nsection: 1\ndescription: Restart a package\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-restart.md\n---\n\n### Synopsis\n\n```bash\nnpm restart [-- <args>]\n```\n\n### Description\n\nThis restarts a package.\n\nThis runs a package's \"stop\", \"restart\", and \"start\" scripts, and associated\npre- and post- scripts, in the order given below:\n\n1. prerestart\n2. prestop\n3. stop\n4. poststop\n5. restart\n6. prestart\n7. start\n8. poststart\n9. postrestart\n\n### Note\n\nNote that the \"restart\" script is run **in addition to** the \"stop\"\nand \"start\" scripts, not instead of them.\n\nThis is the behavior as of `npm` major version 2.  A change in this\nbehavior will be accompanied by an increase in major version number\n\n### See Also\n\n* [npm run-script](/cli/v7/commands/npm-run-script)\n* [npm scripts](/cli/v7/using-npm/scripts)\n* [npm test](/cli/v7/commands/npm-test)\n* [npm start](/cli/v7/commands/npm-start)\n* [npm stop](/cli/v7/commands/npm-stop)\n* [npm restart](/cli/v7/commands/npm-restart)\n"},{"id":"b39fa7c0-63f8-5144-847a-6c4e6aa8d8ae","frontmatter":{"title":"npm-root"},"rawBody":"---\ntitle: npm-root\nsection: 1\ndescription: Display npm root\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-root.md\n---\n\n### Synopsis\n```bash\nnpm root [-g]\n```\n\n### Description\n\nPrint the effective `node_modules` folder to standard out.\n\n### See Also\n\n* [npm prefix](/cli/v7/commands/npm-prefix)\n* [npm bin](/cli/v7/commands/npm-bin)\n* [npm folders](/cli/v7/configuring-npm/folders)\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n"},{"id":"5c327b30-18ac-51da-bf25-edc965ba69d3","frontmatter":{"title":"npm-run-script"},"rawBody":"---\ntitle: npm-run-script\nsection: 1\ndescription: Run arbitrary package scripts\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-run-script.md\n---\n\n### Synopsis\n\n```bash\nnpm run-script <command> [--silent] [-- <args>...]\n\nalias: npm run\n```\n\n### Description\n\nThis runs an arbitrary command from a package's `\"scripts\"` object.  If no\n`\"command\"` is provided, it will list the available scripts.  `run[-script]` is\nused by the test, start, restart, and stop commands, but can be called\ndirectly, as well. When the scripts in the package are printed out, they're\nseparated into lifecycle (test, start, restart) and directly-run scripts.\n\nAs of [`npm@2.0.0`](https://blog.npmjs.org/post/98131109725/npm-2-0-0), you can\nuse custom arguments when executing scripts. The special option `--` is used by\n[getopt](https://goo.gl/KxMmtG) to delimit the end of the options. npm will pass\nall the arguments after the `--` directly to your script:\n\n```bash\nnpm run test -- --grep=\"pattern\"\n```\n\nThe arguments will only be passed to the script specified after ```npm run```\nand not to any pre or post script.\n\nThe `env` script is a special built-in command that can be used to list\nenvironment variables that will be available to the script at runtime. If an\n\"env\" command is defined in your package, it will take precedence over the\nbuilt-in.\n\nIn addition to the shell's pre-existing `PATH`, `npm run` adds\n`node_modules/.bin` to the `PATH` provided to scripts. Any binaries provided by\nlocally-installed dependencies can be used without the `node_modules/.bin`\nprefix. For example, if there is a `devDependency` on `tap` in your package,\nyou should write:\n\n```bash\n\"scripts\": {\"test\": \"tap test/\\*.js\"}\n```\n\ninstead of\n\n```bash\n\"scripts\": {\"test\": \"node_modules/.bin/tap test/\\*.js\"}\n```\n\nto run your tests.\n\nThe actual shell your script is run within is platform dependent. By default,\non Unix-like systems it is the `/bin/sh` command, on Windows it is the `cmd.exe`.\nThe actual shell referred to by `/bin/sh` also depends on the system.\nAs of [`npm@5.1.0`](https://github.com/npm/npm/releases/tag/v5.1.0) you can\ncustomize the shell with the `script-shell` configuration.\n\nScripts are run from the root of the module, regardless of what your current\nworking directory is when you call `npm run`. If you want your script to\nuse different behavior based on what subdirectory you're in, you can use the\n`INIT_CWD` environment variable, which holds the full path you were in when\nyou ran `npm run`.\n\n`npm run` sets the `NODE` environment variable to the `node` executable with\nwhich `npm` is executed. Also, if the `--scripts-prepend-node-path` is passed,\nthe directory within which `node` resides is added to the\n`PATH`. If `--scripts-prepend-node-path=auto` is passed (which has been the\ndefault in `npm` v3), this is only performed when that `node` executable is\nnot found in the `PATH`.\n\nIf you try to run a script without having a `node_modules` directory and it fails,\nyou will be given a warning to run `npm install`, just in case you've forgotten.\n\nYou can use the `--silent` flag to prevent showing `npm ERR!` output on error.\n\nYou can use the `--if-present` flag to avoid exiting with a non-zero exit code\nwhen the script is undefined. This lets you run potentially undefined scripts\nwithout breaking the execution chain.\n\n### See Also\n\n* [npm scripts](/cli/v7/using-npm/scripts)\n* [npm test](/cli/v7/commands/npm-test)\n* [npm start](/cli/v7/commands/npm-start)\n* [npm restart](/cli/v7/commands/npm-restart)\n* [npm stop](/cli/v7/commands/npm-stop)\n* [npm config](/cli/v7/commands/npm-config)\n"},{"id":"836e67e5-a647-5aa9-87e8-27f56cfdf2e8","frontmatter":{"title":"npm-search"},"rawBody":"---\ntitle: npm-search\nsection: 1\ndescription: Search for packages\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-search.md\n---\n\n### Synopsis\n\n```bash\nnpm search [-l|--long] [--json] [--parseable] [--no-description] [search terms ...]\n\naliases: s, se, find\n```\n\n### Description\n\nSearch the registry for packages matching the search terms. `npm search`\nperforms a linear, incremental, lexically-ordered search through package\nmetadata for all files in the registry. If color is enabled, it will further\nhighlight the matches in the results.\n\nAdditionally, using the `--searchopts` and `--searchexclude` options paired with\nmore search terms will respectively include and exclude further patterns. The\nmain difference between `--searchopts` and the standard search terms is that the\nformer does not highlight results in the output and can be used for more\nfine-grained filtering. Additionally, both of these can be added to `.npmrc` for\ndefault search filtering behavior.\n\nSearch also allows targeting of maintainers in search results, by prefixing\ntheir npm username with `=`.\n\nIf a term starts with `/`, then it's interpreted as a regular expression and\nsupports standard JavaScript RegExp syntax. A trailing `/` will be ignored in\nthis case. (Note that many regular expression characters must be escaped or\nquoted in most shells.)\n\n### A Note on caching\n\n### Configuration\n\n#### description\n\n* Default: true\n* Type: Boolean\n\nUsed as `--no-description`, disables search matching in package descriptions and\nsuppresses display of that field in results.\n\n#### json\n\n* Default: false\n* Type: Boolean\n\nOutput search results as a JSON array.\n\n#### parseable\n\n* Default: false\n* Type: Boolean\n\nOutput search results as lines with tab-separated columns.\n\n#### long\n\n* Default: false\n* Type: Boolean\n\nDisplay full package descriptions and other long text across multiple\nlines. When disabled (default) search results are truncated to fit\nneatly on a single line. Modules with extremely long names will\nfall on multiple lines.\n\n#### searchopts\n\n* Default: \"\"\n* Type: String\n\nSpace-separated options that are always passed to search.\n\n#### searchexclude\n\n* Default: \"\"\n* Type: String\n\nSpace-separated options that limit the results from search.\n\n#### searchstaleness\n\n* Default: 900 (15 minutes)\n* Type: Number\n\nThe age of the cache, in seconds, before another registry request is made.\n\n#### registry\n\n * Default: https://registry.npmjs.org/\n * Type: url\n\nSearch the specified registry for modules. If you have configured npm to point\nto a different default registry, such as your internal private module\nrepository, `npm search` will default to that registry when searching. Pass a\ndifferent registry url such as the default above in order to override this\nsetting.\n\n### See Also\n\n* [npm registry](/cli/v7/using-npm/registry)\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n* [npm view](/cli/v7/commands/npm-view)\n"},{"id":"5920d16a-49e2-5581-8060-e9503d34982b","frontmatter":{"title":"npm-shrinkwrap"},"rawBody":"---\ntitle: npm-shrinkwrap\nsection: 1\ndescription: Lock down dependency versions for publication\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-shrinkwrap.md\n---\n\n### Synopsis\n\n```bash\nnpm shrinkwrap\n```\n\n### Description\n\nThis command repurposes `package-lock.json` into a publishable\n`npm-shrinkwrap.json` or simply creates a new one. The file created and updated\nby this command will then take precedence over any other existing or future\n`package-lock.json` files. For a detailed explanation of the design and purpose\nof package locks in npm, see [package-locks](/cli/v7/configuring-npm/package-locks).\n\n### See Also\n\n* [npm install](/cli/v7/commands/npm-install)\n* [npm run-script](/cli/v7/commands/npm-run-script)\n* [npm scripts](/cli/v7/using-npm/scripts)\n* [package.js](/cli/v7/configuring-npm/package-json)\n* [package-locks](/cli/v7/configuring-npm/package-locks)\n* [package-lock.json](/cli/v7/configuring-npm/package-lock-json)\n* [shrinkwrap.json](/cli/v7/configuring-npm/shrinkwrap-json)\n* [npm ls](/cli/v7/commands/npm-ls)\n"},{"id":"6f29e981-b6f6-5362-b0d4-3352d9ea8e05","frontmatter":{"title":"npm-star"},"rawBody":"---\ntitle: npm-star\nsection: 1\ndescription: Mark your favorite packages\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-star.md\n---\n\n### Synopsis\n\n```bash\nnpm star [<pkg>...]\nnpm unstar [<pkg>...]\n```\n\n### Description\n\n\"Starring\" a package means that you have some interest in it.  It's\na vaguely positive way to show that you care.\n\n\"Unstarring\" is the same thing, but in reverse.\n\nIt's a boolean thing.  Starring repeatedly has no additional effect.\n\n### See Also\n\n* [npm view](/cli/v7/commands/npm-view)\n* [npm whoami](/cli/v7/commands/npm-whoami)\n* [npm adduser](/cli/v7/commands/npm-adduser)\n"},{"id":"1d6acaae-7a38-5903-a434-336385d928f4","frontmatter":{"title":"npm-stars"},"rawBody":"---\ntitle: npm-stars\nsection: 1\ndescription: View packages marked as favorites\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-stars.md\n---\n\n### Synopsis\n```bash\nnpm stars [<user>]\n```\n\n### Description\n\nIf you have starred a lot of neat things and want to find them again\nquickly this command lets you do just that.\n\nYou may also want to see your friend's favorite packages, in this case\nyou will most certainly enjoy this command.\n\n### See Also\n\n* [npm star](/cli/v7/commands/npm-star)\n* [npm view](/cli/v7/commands/npm-view)\n* [npm whoami](/cli/v7/commands/npm-whoami)\n* [npm adduser](/cli/v7/commands/npm-adduser)\n"},{"id":"c3f4e901-ffcb-54cc-a011-42dc3067d44b","frontmatter":{"title":"npm-start"},"rawBody":"---\ntitle: npm-start\nsection: 1\ndescription: Start a package\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-start.md\n---\n\n### Synopsis\n\n```bash\nnpm start [-- <args>]\n```\n\n### Description\n\nThis runs an arbitrary command specified in the package's `\"start\"` property of\nits `\"scripts\"` object. If no `\"start\"` property is specified on the\n`\"scripts\"` object, it will run `node server.js`.\n\nAs of [`npm@2.0.0`](https://blog.npmjs.org/post/98131109725/npm-2-0-0), you can\nuse custom arguments when executing scripts. Refer to [`npm run-script`](/cli/v7/commands/npm-run-script) for more details.\n\n### See Also\n\n* [npm run-script](/cli/v7/commands/npm-run-script)\n* [npm scripts](/cli/v7/using-npm/scripts)\n* [npm test](/cli/v7/commands/npm-test)\n* [npm restart](/cli/v7/commands/npm-restart)\n* [npm stop](/cli/v7/commands/npm-stop)\n"},{"id":"1420fb3a-5e96-5216-a957-9c7aa4c1b1f9","frontmatter":{"title":"npm-stop"},"rawBody":"---\ntitle: npm-stop\nsection: 1\ndescription: Stop a package\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-stop.md\n---\n\n### Synopsis\n\n```bash\nnpm stop [-- <args>]\n```\n\n### Description\n\nThis runs a package's \"stop\" script, if one was provided.\n\n### See Also\n\n* [npm run-script](/cli/v7/commands/npm-run-script)\n* [npm scripts](/cli/v7/using-npm/scripts)\n* [npm test](/cli/v7/commands/npm-test)\n* [npm start](/cli/v7/commands/npm-start)\n* [npm restart](/cli/v7/commands/npm-restart)\n"},{"id":"71e84cf3-4495-5f0d-bf37-f3eaaa6feb95","frontmatter":{"title":"npm-team"},"rawBody":"---\ntitle: npm-team\nsection: 1\ndescription: Manage organization teams and team memberships\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-team.md\n---\n\n### Synopsis\n\n```bash\nnpm team create <scope:team>\nnpm team destroy <scope:team>\n\nnpm team add <scope:team> <user>\nnpm team rm <scope:team> <user>\n\nnpm team ls <scope>|<scope:team>\n\nnpm team edit <scope:team>\n```\n\n### Description\n\nUsed to manage teams in organizations, and change team memberships. Does not\nhandle permissions for packages.\n\nTeams must always be fully qualified with the organization/scope they belong to\nwhen operating on them, separated by a colon (`:`). That is, if you have a `wombats` team in a `wisdom` organization, you must always refer to that team as `wisdom:wombats` in these commands.\n\nIf you have two-factor authentication enabled in `auth-and-writes` mode, then you can provide a code from your authenticator with `[--otp <otpcode>]`. If you don't include this then you will be prompted.\n\n* create / destroy:\n  Create a new team, or destroy an existing one. Note: You cannot remove the `developers` team, <a href=\"https://docs.npmjs.com/about-developers-team\" target=\"_blank\">learn more.</a>\n* add / rm:\n  Add a user to an existing team, or remove a user from a team they belong to.\n\n* ls:\n  If performed on an organization name, will return a list of existing teams\n  under that organization. If performed on a team, it will instead return a list\n  of all users belonging to that particular team.\n\n* edit:\n  Edit a current team.\n\n### Details\n\n`npm team` always operates directly on the current registry, configurable from\nthe command line using `--registry=<registry url>`.\n\nIn order to create teams and manage team membership, you must be a *team admin*\nunder the given organization. Listing teams and team memberships may be done by\nany member of the organizations.\n\nOrganization creation and management of team admins and *organization* members\nis done through the website, not the npm CLI.\n\nTo use teams to manage permissions on packages belonging to your organization,\nuse the `npm access` command to grant or revoke the appropriate permissions.\n\n### See Also\n\n* [npm access](/cli/v7/commands/npm-access)\n* [npm registry](/cli/v7/using-npm/registry)\n"},{"id":"7462132d-117d-5537-bba0-863d414bae64","frontmatter":{"title":"npm-test"},"rawBody":"---\ntitle: npm-test\nsection: 1\ndescription: Test a package\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-test.md\n---\n\n### Synopsis\n\n```bash\nnpm test [-- <args>]\n\naliases: t, tst\n```\n\n### Description\n\nThis runs a package's \"test\" script, if one was provided.\n\n### See Also\n\n* [npm run-script](/cli/v7/commands/npm-run-script)\n* [npm scripts](/cli/v7/using-npm/scripts)\n* [npm start](/cli/v7/commands/npm-start)\n* [npm restart](/cli/v7/commands/npm-restart)\n* [npm stop](/cli/v7/commands/npm-stop)\n"},{"id":"6c462675-8461-5cf4-8193-807919c74acb","frontmatter":{"title":"npm-token"},"rawBody":"---\ntitle: npm-token\nsection: 1\ndescription: Manage your authentication tokens\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-token.md\n---\n\n### Synopsis\n```bash\n  npm token list [--json|--parseable]\n  npm token create [--read-only] [--cidr=1.1.1.1/24,2.2.2.2/16]\n  npm token revoke <id|token>\n  ```\n\n### Description\n\nThis lets you list, create and revoke authentication tokens.\n\n* `npm token list`:\n  Shows a table of all active authentication tokens. You can request this as\n  JSON with `--json` or tab-separated values with `--parseable`.\n\n```bash\n+--------+---------+------------+----------+----------------+\n| id     | token   | created    | read-only | CIDR whitelist |\n+--------+---------+------------+----------+----------------+\n| 7f3134 | 1fa9ba… | 2017-10-02 | yes      |                |\n+--------+---------+------------+----------+----------------+\n| c03241 | af7aef… | 2017-10-02 | no       | 192.168.0.1/24 |\n+--------+---------+------------+----------+----------------+\n| e0cf92 | 3a436a… | 2017-10-02 | no       |                |\n+--------+---------+------------+----------+----------------+\n| 63eb9d | 74ef35… | 2017-09-28 | no       |                |\n+--------+---------+------------+----------+----------------+\n| 2daaa8 | cbad5f… | 2017-09-26 | no       |                |\n+--------+---------+------------+----------+----------------+\n| 68c2fe | 127e51… | 2017-09-23 | no       |                |\n+--------+---------+------------+----------+----------------+\n| 6334e1 | 1dadd1… | 2017-09-23 | no       |                |\n+--------+---------+------------+----------+----------------+\n```\n\n* `npm token create [--read-only] [--cidr=<cidr-ranges>]`:\n  Create a new authentication token. It can be `--read-only` or accept a list of\n  [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) ranges to\n  limit use of this token to. This will prompt you for your password, and, if you have\n  two-factor authentication enabled, an otp.\n\n```bash\n+----------------+--------------------------------------+\n| token          | a73c9572-f1b9-8983-983d-ba3ac3cc913d |\n+----------------+--------------------------------------+\n| cidr_whitelist |                                      |\n+----------------+--------------------------------------+\n| readonly       | false                                |\n+----------------+--------------------------------------+\n| created        | 2017-10-02T07:52:24.838Z             |\n+----------------+--------------------------------------+\n```\n\n* `npm token revoke <token|id>`:\n  This removes an authentication token, making it immediately unusable. This can accept\n  both complete tokens (as you get back from `npm token create` and will\n  find in your `.npmrc`) and ids as seen in the `npm token list` output. \n  This will NOT accept the truncated token found in `npm token list` output.\n"},{"id":"320ab1bd-2f0c-541e-ab61-7cf375bea282","frontmatter":{"title":"npm-uninstall"},"rawBody":"---\ntitle: npm-uninstall\nsection: 1\ndescription: Remove a package\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-uninstall.md\n---\n\n### Synopsis\n\n```bash\nnpm uninstall [<@scope>/]<pkg>[@<version>]... [-S|--save|-D|--save-dev|-O|--save-optional|--no-save]\n\naliases: remove, rm, r, un, unlink\n```\n\n### Description\n\nThis uninstalls a package, completely removing everything npm installed\non its behalf.\n\nExample:\n\n```bash\nnpm uninstall sax\n```\n\nIn global mode (ie, with `-g` or `--global` appended to the command),\nit uninstalls the current package context as a global package.\n\n`npm uninstall` takes 3 exclusive, optional flags which save or update\nthe package version in your main package.json:\n\n* `-S, --save`: Package will be removed from your `dependencies`.\n\n* `-D, --save-dev`: Package will be removed from your `devDependencies`.\n\n* `-O, --save-optional`: Package will be removed from your `optionalDependencies`.\n\n* `--no-save`: Package will not be removed from your `package.json` file.\n\nFurther, if you have an `npm-shrinkwrap.json` then it will be updated as\nwell.\n\nScope is optional and follows the usual rules for [`scope`](/cli/v7/using-npm/scope).\n\nExamples:\n```bash\nnpm uninstall sax --save\nnpm uninstall @myorg/privatepackage --save\nnpm uninstall node-tap --save-dev\nnpm uninstall dtrace-provider --save-optional\nnpm uninstall lodash --no-save\n```\n\n### See Also\n\n* [npm prune](/cli/v7/commands/npm-prune)\n* [npm install](/cli/v7/commands/npm-install)\n* [npm folders](/cli/v7/configuring-npm/folders)\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n"},{"id":"5baa5b13-d638-524f-96bc-51147bf7f43d","frontmatter":{"title":"npm-unpublish"},"rawBody":"---\ntitle: npm-unpublish\nsection: 1\ndescription: Remove a package from the registry\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-unpublish.md\n---\n\n### Synopsis\n\n#### Unpublishing a single version of a package\n\n```bash\nnpm unpublish [<@scope>/]<pkg>@<version>\n```\n\n#### Unpublishing an entire package\n\n```bash\nnpm unpublish [<@scope>/]<pkg> --force\n```\n\n### Warning\n\nConsider using the `deprecate` command instead, if your intent is to encourage users to upgrade, or if you no longer want to maintain a package.\n\n### Description\n\nThis removes a package version from the registry, deleting its\nentry and removing the tarball.\n\nIf no version is specified, or if all versions are removed then\nthe root package entry is removed from the registry entirely.\n\nEven if a package version is unpublished, that specific name and\nversion combination can never be reused. In order to publish the\npackage again, a new version number must be used. If you unpublish the entire package, you may not publish any new versions of that package until 24 hours have passed.\n\nTo learn more about how unpublish is treated on the npm registry, see our <a href=\"https://www.npmjs.com/policies/unpublish\" target=\"_blank\" rel=\"noopener noreferrer\"> unpublish policies</a>. \n\n\n### See Also\n\n* [npm deprecate](/cli/v7/commands/npm-deprecate)\n* [npm publish](/cli/v7/commands/npm-publish)\n* [npm registry](/cli/v7/using-npm/registry)\n* [npm adduser](/cli/v7/commands/npm-adduser)\n* [npm owner](/cli/v7/commands/npm-owner)\n"},{"id":"81ab79d5-0d7d-58a5-8dbf-a967653433a5","frontmatter":{"title":"npm-update"},"rawBody":"---\ntitle: npm-update\nsection: 1\ndescription: Update a package\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-update.md\n---\n\n### Synopsis\n\n```bash\nnpm update [-g] [<pkg>...]\n\naliases: up, upgrade\n```\n\n### Description\n\nThis command will update all the packages listed to the latest version\n(specified by the `tag` config), respecting semver.\n\nIt will also install missing packages. As with all commands that install\npackages, the `--dev` flag will cause `devDependencies` to be processed\nas well.\n\nIf the `-g` flag is specified, this command will update globally installed\npackages.\n\nIf no package name is specified, all packages in the specified location (global\nor local) will be updated.\n\nAs of `npm@2.6.1`, the `npm update` will only inspect top-level packages.\nPrior versions of `npm` would also recursively inspect all dependencies.\nTo get the old behavior, use `npm --depth 9999 update`.\n\nAs of `npm@5.0.0`, the `npm update` will change `package.json` to save the \nnew version as the minimum required dependency. To get the old behavior, \nuse `npm update --no-save`.\n\n### Example\n\nIMPORTANT VERSION NOTE: these examples assume `npm@2.6.1` or later.  For\nolder versions of `npm`, you must specify `--depth 0` to get the behavior\ndescribed below.\n\nFor the examples below, assume that the current package is `app` and it depends\non dependencies, `dep1` (`dep2`, .. etc.).  The published versions of `dep1` are:\n\n```json\n{\n  \"dist-tags\": { \"latest\": \"1.2.2\" },\n  \"versions\": [\n    \"1.2.2\",\n    \"1.2.1\",\n    \"1.2.0\",\n    \"1.1.2\",\n    \"1.1.1\",\n    \"1.0.0\",\n    \"0.4.1\",\n    \"0.4.0\",\n    \"0.2.0\"\n  ]\n}\n```\n\n#### Caret Dependencies\n\nIf `app`'s `package.json` contains:\n\n```json\n\"dependencies\": {\n  \"dep1\": \"^1.1.1\"\n}\n```\n\nThen `npm update` will install `dep1@1.2.2`, because `1.2.2` is `latest` and\n`1.2.2` satisfies `^1.1.1`.\n\n#### Tilde Dependencies\n\nHowever, if `app`'s `package.json` contains:\n\n```json\n\"dependencies\": {\n  \"dep1\": \"~1.1.1\"\n}\n```\n\nIn this case, running `npm update` will install `dep1@1.1.2`.  Even though the `latest`\ntag points to `1.2.2`, this version does not satisfy `~1.1.1`, which is equivalent\nto `>=1.1.1 <1.2.0`.  So the highest-sorting version that satisfies `~1.1.1` is used,\nwhich is `1.1.2`.\n\n#### Caret Dependencies below 1.0.0\n\nSuppose `app` has a caret dependency on a version below `1.0.0`, for example:\n\n```json\n\"dependencies\": {\n  \"dep1\": \"^0.2.0\"\n}\n```\n\n`npm update` will install `dep1@0.2.0`, because there are no other\nversions which satisfy `^0.2.0`.\n\nIf the dependence were on `^0.4.0`:\n\n```json\n\"dependencies\": {\n  \"dep1\": \"^0.4.0\"\n}\n```\n\nThen `npm update` will install `dep1@0.4.1`, because that is the highest-sorting\nversion that satisfies `^0.4.0` (`>= 0.4.0 <0.5.0`)\n\n\n#### Updating Globally-Installed Packages\n\n`npm update -g` will apply the `update` action to each globally installed\npackage that is `outdated` -- that is, has a version that is different from\n`wanted`.\n\nNote: Globally installed packages are treated as if they are installed with a caret semver range specified. So if you require to update to `latest` you may need to run `npm install -g [<pkg>...]`\n\nNOTE: If a package has been upgraded to a version newer than `latest`, it will\nbe _downgraded_.\n\n\n### See Also\n\n* [npm install](/cli/v7/commands/npm-install)\n* [npm outdated](/cli/v7/commands/npm-outdated)\n* [npm shrinkwrap](/cli/v7/commands/npm-shrinkwrap)\n* [npm registry](/cli/v7/using-npm/registry)\n* [npm folders](/cli/v7/configuring-npm/folders)\n* [npm ls](/cli/v7/commands/npm-ls)\n"},{"id":"68679a7c-6822-5f52-a542-2dd03dd9f9b7","frontmatter":{"title":"npm-version"},"rawBody":"---\ntitle: npm-version\nsection: 1\ndescription: Bump a package version\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-version.md\n---\n\n### Synopsis\n\n```bash\nnpm version [<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease [--preid=<prerelease-id>] | from-git]\n\n'npm [-v | --version]' to print npm version\n'npm view <pkg> version' to view a package's published version\n'npm ls' to inspect current package/dependency versions\n```\n\n### Description\n\nRun this in a package directory to bump the version and write the new\ndata back to `package.json`, `package-lock.json`, and, if present, `npm-shrinkwrap.json`.\n\nThe `newversion` argument should be a valid semver string, a\nvalid second argument to [semver.inc](https://github.com/npm/node-semver#functions) (one of `patch`, `minor`, `major`,\n`prepatch`, `preminor`, `premajor`, `prerelease`), or `from-git`. In the second case,\nthe existing version will be incremented by 1 in the specified field.\n`from-git` will try to read the latest git tag, and use that as the new npm version.\n\nIf run in a git repo, it will also create a version commit and tag.\nThis behavior is controlled by `git-tag-version` (see below), and can\nbe disabled on the command line by running `npm --no-git-tag-version version`.\nIt will fail if the working directory is not clean, unless the `-f` or\n`--force` flag is set.\n\nIf supplied with `-m` or `--message` config option, npm will\nuse it as a commit message when creating a version commit.  If the\n`message` config contains `%s` then that will be replaced with the\nresulting version number.  For example:\n\n```bash\nnpm version patch -m \"Upgrade to %s for reasons\"\n```\n\nIf the `sign-git-tag` config is set, then the tag will be signed using\nthe `-s` flag to git.  Note that you must have a default GPG key set up\nin your git config for this to work properly.  For example:\n\n```bash\n$ npm config set sign-git-tag true\n$ npm version patch\n\nYou need a passphrase to unlock the secret key for\nuser: \"isaacs (http://blog.izs.me/) <i@izs.me>\"\n2048-bit RSA key, ID 6C481CF6, created 2010-08-31\n\nEnter passphrase:\n```\n\nIf `preversion`, `version`, or `postversion` are in the `scripts` property of\nthe package.json, they will be executed as part of running `npm version`.\n\nThe exact order of execution is as follows:\n  1. Check to make sure the git working directory is clean before we get started.\n     Your scripts may add files to the commit in future steps.\n     This step is skipped if the `--force` flag is set.\n  2. Run the `preversion` script. These scripts have access to the old `version` in package.json.\n     A typical use would be running your full test suite before deploying.\n     Any files you want added to the commit should be explicitly added using `git add`.\n  3. Bump `version` in `package.json` as requested (`patch`, `minor`, `major`, etc).\n  4. Run the `version` script. These scripts have access to the new `version` in package.json\n     (so they can incorporate it into file headers in generated files for example).\n     Again, scripts should explicitly add generated files to the commit using `git add`.\n  5. Commit and tag.\n  6. Run the `postversion` script. Use it to clean up the file system or automatically push\n     the commit and/or tag.\n\nTake the following example:\n\n```json\n    \"scripts\": {\n      \"preversion\": \"npm test\",\n      \"version\": \"npm run build && git add -A dist\",\n      \"postversion\": \"git push && git push --tags && rm -rf build/temp\"\n    }\n```\n\nThis runs all your tests, and proceeds only if they pass. Then runs your `build` script, and\nadds everything in the `dist` directory to the commit. After the commit, it pushes the new commit\nand tag up to the server, and deletes the `build/temp` directory.\n\n### Configuration\n\n#### allow-same-version\n\n* Default: false\n* Type: Boolean\n\nPrevents throwing an error when `npm version` is used to set the new version \nto the same value as the current version.\n\n#### git-tag-version\n\n* Default: true\n* Type: Boolean\n\nCommit and tag the version change.\n\n#### commit-hooks\n\n* Default: true\n* Type: Boolean\n\nRun git commit hooks when committing the version change.\n\n#### sign-git-tag\n\n* Default: false\n* Type: Boolean\n\nPass the `-s` flag to git to sign the tag.\n\nNote that you must have a default GPG key set up in your git config for this to work properly.\n\n### See Also\n\n* [npm init](/cli/v7/commands/npm-init)\n* [npm run-script](/cli/v7/commands/npm-run-script)\n* [npm scripts](/cli/v7/using-npm/scripts)\n* [package.json](/cli/v7/configuring-npm/package-json)\n* [semver](/cli/v7/using-npm/semver)\n* [config](/cli/v7/using-npm/config)\n"},{"id":"51fdf0d7-98e6-5e39-a5ed-72589974fcf4","frontmatter":{"title":"npm-view"},"rawBody":"---\ntitle: npm-view\nsection: 1\ndescription: View registry info\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-view.md\n---\n\n### Synopsis\n\n```bash\nnpm view [<@scope>/]<name>[@<version>] [<field>[.<subfield>]...]\n\naliases: info, show, v\n```\n\n### Description\n\nThis command shows data about a package and prints it to the stream\nreferenced by the `outfd` config, which defaults to stdout.\n\nTo show the package registry entry for the `connect` package, you can do\nthis:\n\n```bash\nnpm view connect\n```\n\nThe default version is \"latest\" if unspecified.\n\nField names can be specified after the package descriptor.\nFor example, to show the dependencies of the `ronn` package at version\n0.3.5, you could do the following:\n\n```bash\nnpm view ronn@0.3.5 dependencies\n```\n\nYou can view child fields by separating them with a period.\nTo view the git repository URL for the latest version of npm, you could\ndo this:\n\n```bash\nnpm view npm repository.url\n```\n\nThis makes it easy to view information about a dependency with a bit of\nshell scripting.  For example, to view all the data about the version of\nopts that ronn depends on, you can do this:\n\n```bash\nnpm view opts@$(npm view ronn dependencies.opts)\n```\n\nFor fields that are arrays, requesting a non-numeric field will return\nall of the values from the objects in the list.  For example, to get all\nthe contributor names for the \"express\" project, you can do this:\n\n```bash\nnpm view express contributors.email\n```\n\nYou may also use numeric indices in square braces to specifically select\nan item in an array field.  To just get the email address of the first\ncontributor in the list, you can do this:\n\n```bash\nnpm view express contributors[0].email\n```\n\nMultiple fields may be specified, and will be printed one after another.\nFor example, to get all the contributor names and email addresses, you\ncan do this:\n\n```bash\nnpm view express contributors.name contributors.email\n```\n\n\"Person\" fields are shown as a string if they would be shown as an\nobject.  So, for example, this will show the list of npm contributors in\nthe shortened string format.  (See [`package.json`](/cli/v7/configuring-npm/package.json) for more on this.)\n\n```bash\nnpm view npm contributors\n```\n\nIf a version range is provided, then data will be printed for every\nmatching version of the package.  This will show which version of jsdom\nwas required by each matching version of yui3:\n\n```bash\nnpm view yui3@'>0.5.4' dependencies.jsdom\n```    \n\nTo show the `connect` package version history, you can do\nthis:\n\n```bash\nnpm view connect versions\n```\n\n### Output\n\nIf only a single string field for a single version is output, then it\nwill not be colorized or quoted, so as to enable piping the output to\nanother command. If the field is an object, it will be output as a JavaScript object literal.\n\nIf the --json flag is given, the outputted fields will be JSON.\n\nIf the version range matches multiple versions, than each printed value\nwill be prefixed with the version it applies to.\n\nIf multiple fields are requested, than each of them are prefixed with\nthe field name.\n\n### See Also\n\n* [npm search](/cli/v7/commands/npm-search)\n* [npm registry](/cli/v7/using-npm/registry)\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n* [npm docs](/cli/v7/commands/npm-docs)\n"},{"id":"9a411c16-6bdf-5624-86c4-530ad73d8737","frontmatter":{"title":"npm-whoami"},"rawBody":"---\ntitle: npm-whoami\nsection: 1\ndescription: Display npm username\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm-whoami.md\n---\n\n### Synopsis\n\n```bash\nnpm whoami [--registry <registry>]\n```\n\n### Description\n\nPrint the `username` config to standard output.\n\n### See Also\n\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n* [npm adduser](/cli/v7/commands/npm-adduser)\n"},{"id":"c67d2d8a-d4d7-5914-a105-b11284989c63","frontmatter":{"title":"npm"},"rawBody":"---\ntitle: npm\nsection: 1\ndescription: javascript package manager\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npm.md\n---\n\n### Synopsis\n\n```bash\nnpm <command> [args]\n```\n\n### Version\n\n7.0.0\n\n### Description\n\nnpm is the package manager for the Node JavaScript platform.  It puts\nmodules in place so that node can find them, and manages dependency\nconflicts intelligently.\n\nIt is extremely configurable to support a wide variety of use cases.\nMost commonly, it is used to publish, discover, install, and develop node\nprograms.\n\nRun `npm help` to get a list of available commands.\n\n### Important\n\nnpm is configured to use npm, Inc.'s public registry at\nhttps://registry.npmjs.org by default. Use of the npm public registry is\nsubject to terms of use available at https://www.npmjs.com/policies/terms.\n\nYou can configure npm to use any compatible registry you like, and even run\nyour own registry. Use of someone else's registry may be governed by their\nterms of use.\n\n### Introduction\n\nYou probably got npm because you want to install stuff.\n\nUse `npm install blerg` to install the latest version of \"blerg\".  Check out\n[`npm install`](/cli/v7/commands/npm-npm-install) for more info.  It can do a lot of stuff.\n\nUse the `npm search` command to show everything that's available.\nUse `npm ls` to show everything you've installed.\n\n### Dependencies\n\nIf a package references to another package with a git URL, npm depends\non a preinstalled git.\n\nIf one of the packages npm tries to install is a native node module and\nrequires compiling of C++ Code, npm will use\n[node-gyp](https://github.com/nodejs/node-gyp) for that task.\nFor a Unix system, [node-gyp](https://github.com/nodejs/node-gyp)\nneeds Python, make and a buildchain like GCC. On Windows,\nPython and Microsoft Visual Studio C++ are needed. Python 3 is\nnot supported by [node-gyp](https://github.com/nodejs/node-gyp).\nFor more information visit\n[the node-gyp repository](https://github.com/nodejs/node-gyp) and\nthe [node-gyp Wiki](https://github.com/nodejs/node-gyp/wiki).\n\n### Directories\n\nSee [`folders`](/cli/v7/configuring-npm/folders) to learn about where npm puts stuff.\n\nIn particular, npm has two modes of operation:\n\n* global mode:\n  npm installs packages into the install prefix at\n  `prefix/lib/node_modules` and bins are installed in `prefix/bin`.\n* local mode:\n  npm installs packages into the current project directory, which\n  defaults to the current working directory.  Packages are installed to\n  `./node_modules`, and bins are installed to `./node_modules/.bin`.\n\nLocal mode is the default.  Use `-g` or `--global` on any command to\noperate in global mode instead.\n\n### Developer Usage\n\nIf you're using npm to develop and publish your code, check out the\nfollowing help topics:\n\n* json:\n  Make a package.json file.  See [`package.json`](/cli/v7/configuring-npm/package-json).\n* link:\n  For linking your current working code into Node's path, so that you\n  don't have to reinstall every time you make a change.  Use\n  `npm link` to do this.\n* install:\n  It's a good idea to install things if you don't need the symbolic link.\n  Especially, installing other peoples code from the registry is done via\n  `npm install`\n* adduser:\n  Create an account or log in.  Credentials are stored in the\n  user config file.\n* publish:\n  Use the `npm publish` command to upload your code to the registry.\n\n#### Configuration\n\nnpm is extremely configurable.  It reads its configuration options from\n5 places.\n\n* Command line switches:\n  Set a config with `--key val`.  All keys take a value, even if they\n  are booleans (the config parser doesn't know what the options are at\n  the time of parsing).  If no value is provided, then the option is set\n  to boolean `true`.\n* Environment Variables:\n  Set any config by prefixing the name in an environment variable with\n  `npm_config_`.  For example, `export npm_config_key=val`.\n* User Configs:\n  The file at $HOME/.npmrc is an ini-formatted list of configs.  If\n  present, it is parsed.  If the `userconfig` option is set in the cli\n  or env, then that will be used instead.\n* Global Configs:\n  The file found at ../etc/npmrc (from the node executable, by default\n  this resolves to /usr/local/etc/npmrc) will be parsed if it is found.\n  If the `globalconfig` option is set in the cli, env, or user config,\n  then that file is parsed instead.\n* Defaults:\n  npm's default configuration options are defined in\n  lib/utils/config-defs.js.  These must not be changed.\n\nSee [`config`](/cli/v7/using-npm/config) for much much more information.\n\n### Contributions\n\nPatches welcome!\n\nIf you would like to contribute, but don't know what to work on, read\nthe contributing guidelines and check the issues list.\n\n* [CONTRIBUTING.md](https://github.com/npm/cli/blob/latest/CONTRIBUTING.md)\n* [Bug tracker](https://github.com/npm/cli/issues)\n\n### Bugs\n\nWhen you find issues, please report them:\n\n* web:\n  <https://npm.community/c/bugs>\n\nBe sure to follow the template and bug reporting guidelines. You can also ask\nfor help in the [support forum](https://npm.community/c/support) if you're\nunsure if it's actually a bug or are having trouble coming up with a detailed\nreproduction to report.\n\n### Author\n\n[Isaac Z. Schlueter](http://blog.izs.me/) ::\n[isaacs](https://github.com/isaacs/) ::\n[@izs](https://twitter.com/izs) ::\n<i@izs.me>\n\n### See Also\n* [npm help](/cli/v7/commands/npm-npm-help)\n* [package.json](/cli/v7/configuring-npm/package-json)\n* [npm install](/cli/v7/commands/npm-npm-install)\n* [npm config](/cli/v7/commands/npm-npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n"},{"id":"4951d9e9-e6f0-515f-919b-3b241a4a77df","frontmatter":{"title":"npx"},"rawBody":"---\ntitle: npx\nsection: 1\ndescription: Run a command from a local or remote npm package\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/commands/npx.md\n---\n\n### Synopsis\n\n```bash\nnpm exec -- <pkg>[@<version>] [args...]\nnpm exec -p <pkg>[@<version>] -- <cmd> [args...]\nnpm exec -c '<cmd> [args...]'\nnpm exec -p foo -c '<cmd> [args...]'\n\nnpx <pkg>[@<specifier>] [args...]\nnpx -p <pkg>[@<specifier>] <cmd> [args...]\nnpx -c '<cmd> [args...]'\nnpx -p <pkg>[@<specifier>] -c '<cmd> [args...]'\n\nalias: npm x, npx\n\n-p <pkg> --package=<pkg> (may be specified multiple times)\n-c <cmd> --call=<cmd> (may not be mixed with positional arguments)\n```\n\n### Description\n\nThis command allows you to run an arbitrary command from an npm package\n(either one installed locally, or fetched remotely), in a similar context\nas running it via `npm run`.\n\nWhatever packages are specified by the `--package` or `-p` option will be\nprovided in the `PATH` of the executed command, along with any locally\ninstalled package executables.  The `--package` or `-p` option may be\nspecified multiple times, to execute the supplied command in an environment\nwhere all specified packages are available.\n\nIf any requested packages are not present in the local project\ndependencies, then they are installed to a folder in the npm cache, which\nis added to the `PATH` environment variable in the executed process.  A\nprompt is printed (which can be suppressed by providing either `--yes` or\n`--no`).\n\nPackage names provided without a specifier will be matched with whatever\nversion exists in the local project.  Package names with a specifier will\nonly be considered a match if they have the exact same name and version as\nthe local dependency.\n\nIf no `-c` or `--call` option is provided, then the positional arguments\nare used to generate the command string.  If no `-p` or `--package` options\nare provided, then npm will attempt to determine the executable name from\nthe package specifier provided as the first positional argument according\nto the following heuristic:\n\n- If the package has a single entry in its `bin` field in `package.json`,\n  then that command will be used.\n- If the package has multiple `bin` entries, and one of them matches the\n  unscoped portion of the `name` field, then that command will be used.\n- If this does not result in exactly one option (either because there are\n  no bin entries, or none of them match the `name` of the package), then\n  `npm exec` exits with an error.\n\nTo run a binary _other than_ the named binary, specify one or more\n`--package` options, which will prevent npm from inferring the package from\nthe first command argument.\n\n### `npx` vs `npm exec`\n\nWhen run via the `npx` binary, all flags and options *must* be set prior to\nany positional arguments.  When run via `npm exec`, a double-hyphen `--`\nflag can be used to suppress npm's parsing of switches and options that\nshould be sent to the executed command.\n\nFor example:\n\n```\n$ npx foo@latest bar --package=@npmcli/foo\n```\n\nIn this case, npm will resolve the `foo` package name, and run the\nfollowing command:\n\n```\n$ foo bar --package=@npmcli/foo\n```\n\nSince the `--package` option comes _after_ the positional arguments, it is\ntreated as an argument to the executed command.\n\nIn contrast, due to npm's argument parsing logic, running this command is\ndifferent:\n\n```\n$ npm exec foo@latest bar --package=@npmcli/foo\n```\n\nIn this case, npm will parse the `--package` option first, resolving the\n`@npmcli/foo` package.  Then, it will execute the following command in that\ncontext:\n\n```\n$ foo@latest bar\n```\n\nThe double-hyphen character is recommended to explicitly tell npm to stop\nparsing command line options and switches.  The following command would\nthus be equivalent to the `npx` command above:\n\n```\n$ npm exec -- foo@latest bar --package=@npmcli/foo\n```\n\n### Examples\n\nRun the version of `tap` in the local dependencies, with the provided\narguments:\n\n```\n$ npm exec -- tap --bail test/foo.js\n$ npx tap --bail test/foo.js\n```\n\nRun a command _other than_ the command whose name matches the package name\nby specifying a `--package` option:\n\n```\n$ npm exec --package=foo -- bar --bar-argument\n# ~ or ~\n$ npx --package=foo bar --bar-argument\n```\n\nRun an arbitrary shell script, in the context of the current project:\n\n```\n$ npm x -c 'eslint && say \"hooray, lint passed\"'\n$ npx -c 'eslint && say \"hooray, lint passed\"'\n```\n\n### Compatibility with Older npx Versions\n\nThe `npx` binary was rewritten in npm v7.0.0, and the standalone `npx`\npackage deprecated at that time.  `npx` uses the `npm exec`\ncommand instead of a separate argument parser and install process, with\nsome affordances to maintain backwards compatibility with the arguments it\naccepted in previous versions.\n\nThis resulted in some shifts in its functionality:\n\n- Any `npm` config value may be provided.\n- To prevent security and user-experience problems from mistyping package\n  names, `npx` prompts before installing anything.  Suppress this\n  prompt with the `-y` or `--yes` option.\n- The `--no-install` option is deprecated, and will be converted to `--no`.\n- Shell fallback functionality is removed, as it is not advisable.\n- The `-p` argument is a shorthand for `--parseable` in npm, but shorthand\n  for `--package` in npx.  This is maintained, but only for the `npx`\n  executable.\n- The `--ignore-existing` option is removed.  Locally installed bins are\n  always present in the executed process `PATH`.\n- The `--npm` option is removed.  `npx` will always use the `npm` it ships\n  with.\n- The `--node-arg` and `-n` options are removed.\n- The `--always-spawn` option is redundant, and thus removed.\n- The `--shell` option is replaced with `--script-shell`, but maintained\n  in the `npx` executable for backwards compatibility.\n\n### See Also\n\n* [npm run-script](/cli/v7/commands/npm-run-script)\n* [npm scripts](/cli/v7/using-npm/scripts)\n* [npm test](/cli/v7/commands/npm-test)\n* [npm start](/cli/v7/commands/npm-start)\n* [npm restart](/cli/v7/commands/npm-restart)\n* [npm stop](/cli/v7/commands/npm-stop)\n* [npm config](/cli/v7/commands/npm-config)\n"},{"id":"c3cdd065-8e5d-57c3-8c93-ffc8c7f2e3df","frontmatter":{"title":"folders"},"rawBody":"---\ntitle: folders\nsection: 5\ndescription: Folder Structures Used by npm\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/configuring-npm/folders.md\n---\n\n### Description\n\nnpm puts various things on your computer.  That's its job.\n\nThis document will tell you what it puts where.\n\n#### tl;dr\n\n* Local install (default): puts stuff in `./node_modules` of the current\n  package root.\n* Global install (with `-g`): puts stuff in /usr/local or wherever node\n  is installed.\n* Install it **locally** if you're going to `require()` it.\n* Install it **globally** if you're going to run it on the command line.\n* If you need both, then install it in both places, or use `npm link`.\n\n#### prefix Configuration\n\nThe `prefix` config defaults to the location where node is installed.\nOn most systems, this is `/usr/local`. On Windows, it's `%AppData%\\npm`.\nOn Unix systems, it's one level up, since node is typically installed at\n`{prefix}/bin/node` rather than `{prefix}/node.exe`.\n\nWhen the `global` flag is set, npm installs things into this prefix.\nWhen it is not set, it uses the root of the current package, or the\ncurrent working directory if not in a package already.\n\n#### Node Modules\n\nPackages are dropped into the `node_modules` folder under the `prefix`.\nWhen installing locally, this means that you can\n`require(\"packagename\")` to load its main module, or\n`require(\"packagename/lib/path/to/sub/module\")` to load other modules.\n\nGlobal installs on Unix systems go to `{prefix}/lib/node_modules`.\nGlobal installs on Windows go to `{prefix}/node_modules` (that is, no\n`lib` folder.)\n\nScoped packages are installed the same way, except they are grouped together\nin a sub-folder of the relevant `node_modules` folder with the name of that\nscope prefix by the @ symbol, e.g. `npm install @myorg/package` would place\nthe package in `{prefix}/node_modules/@myorg/package`. See [`scope`](/cli/v7/using-npm/scope) for more details.\n\nIf you wish to `require()` a package, then install it locally.\n\n#### Executables\n\nWhen in global mode, executables are linked into `{prefix}/bin` on Unix,\nor directly into `{prefix}` on Windows.\n\nWhen in local mode, executables are linked into\n`./node_modules/.bin` so that they can be made available to scripts run\nthrough npm.  (For example, so that a test runner will be in the path\nwhen you run `npm test`.)\n\n#### Man Pages\n\nWhen in global mode, man pages are linked into `{prefix}/share/man`.\n\nWhen in local mode, man pages are not installed.\n\nMan pages are not installed on Windows systems.\n\n#### Cache\n\nSee [`npm cache`](/cli/v7/commands/npm-cache).  Cache files are stored in `~/.npm` on Posix, or\n`%AppData%/npm-cache` on Windows.\n\nThis is controlled by the `cache` configuration param.\n\n#### Temp Files\n\nTemporary files are stored by default in the folder specified by the\n`tmp` config, which defaults to the TMPDIR, TMP, or TEMP environment\nvariables, or `/tmp` on Unix and `c:\\windows\\temp` on Windows.\n\nTemp files are given a unique folder under this root for each run of the\nprogram, and are deleted upon successful exit.\n\n### More Information\n\nWhen installing locally, npm first tries to find an appropriate\n`prefix` folder.  This is so that `npm install foo@1.2.3` will install\nto the sensible root of your package, even if you happen to have `cd`ed\ninto some other folder.\n\nStarting at the $PWD, npm will walk up the folder tree checking for a\nfolder that contains either a `package.json` file, or a `node_modules`\nfolder.  If such a thing is found, then that is treated as the effective\n\"current directory\" for the purpose of running npm commands.  (This\nbehavior is inspired by and similar to git's .git-folder seeking\nlogic when running git commands in a working dir.)\n\nIf no package root is found, then the current folder is used.\n\nWhen you run `npm install foo@1.2.3`, then the package is loaded into\nthe cache, and then unpacked into `./node_modules/foo`.  Then, any of\nfoo's dependencies are similarly unpacked into\n`./node_modules/foo/node_modules/...`.\n\nAny bin files are symlinked to `./node_modules/.bin/`, so that they may\nbe found by npm scripts when necessary.\n\n#### Global Installation\n\nIf the `global` configuration is set to true, then npm will\ninstall packages \"globally\".\n\nFor global installation, packages are installed roughly the same way,\nbut using the folders described above.\n\n#### Cycles, Conflicts, and Folder Parsimony\n\nCycles are handled using the property of node's module system that it\nwalks up the directories looking for `node_modules` folders.  So, at every\nstage, if a package is already installed in an ancestor `node_modules`\nfolder, then it is not installed at the current location.\n\nConsider the case above, where `foo -> bar -> baz`.  Imagine if, in\naddition to that, baz depended on bar, so you'd have:\n`foo -> bar -> baz -> bar -> baz ...`.  However, since the folder\nstructure is: `foo/node_modules/bar/node_modules/baz`, there's no need to\nput another copy of bar into `.../baz/node_modules`, since when it calls\nrequire(\"bar\"), it will get the copy that is installed in\n`foo/node_modules/bar`.\n\nThis shortcut is only used if the exact same\nversion would be installed in multiple nested `node_modules` folders.  It\nis still possible to have `a/node_modules/b/node_modules/a` if the two\n\"a\" packages are different versions.  However, without repeating the\nexact same package multiple times, an infinite regress will always be\nprevented.\n\nAnother optimization can be made by installing dependencies at the\nhighest level possible, below the localized \"target\" folder.\n\n#### Example\n\nConsider this dependency graph:\n\n```bash\nfoo\n+-- blerg@1.2.5\n+-- bar@1.2.3\n|   +-- blerg@1.x (latest=1.3.7)\n|   +-- baz@2.x\n|   |   `-- quux@3.x\n|   |       `-- bar@1.2.3 (cycle)\n|   `-- asdf@*\n`-- baz@1.2.3\n    `-- quux@3.x\n        `-- bar\n```\n\nIn this case, we might expect a folder structure like this:\n\n```bash\nfoo\n+-- node_modules\n    +-- blerg (1.2.5) <---[A]\n    +-- bar (1.2.3) <---[B]\n    |   `-- node_modules\n    |       +-- baz (2.0.2) <---[C]\n    |       |   `-- node_modules\n    |       |       `-- quux (3.2.0)\n    |       `-- asdf (2.3.4)\n    `-- baz (1.2.3) <---[D]\n        `-- node_modules\n            `-- quux (3.2.0) <---[E]\n```\n\nSince foo depends directly on `bar@1.2.3` and `baz@1.2.3`, those are\ninstalled in foo's `node_modules` folder.\n\nEven though the latest copy of blerg is 1.3.7, foo has a specific\ndependency on version 1.2.5.  So, that gets installed at [A].  Since the\nparent installation of blerg satisfies bar's dependency on `blerg@1.x`,\nit does not install another copy under [B].\n\nBar [B] also has dependencies on baz and asdf, so those are installed in\nbar's `node_modules` folder.  Because it depends on `baz@2.x`, it cannot\nre-use the `baz@1.2.3` installed in the parent `node_modules` folder [D],\nand must install its own copy [C].\n\nUnderneath bar, the `baz -> quux -> bar` dependency creates a cycle.\nHowever, because bar is already in quux's ancestry [B], it does not\nunpack another copy of bar into that folder.\n\nUnderneath `foo -> baz` [D], quux's [E] folder tree is empty, because its\ndependency on bar is satisfied by the parent folder copy installed at [B].\n\nFor a graphical breakdown of what is installed where, use `npm ls`.\n\n#### Publishing\n\nUpon publishing, npm will look in the `node_modules` folder.  If any of\nthe items there are not in the `bundledDependencies` array, then they will\nnot be included in the package tarball.\n\nThis allows a package maintainer to install all of their dependencies\n(and dev dependencies) locally, but only re-publish those items that\ncannot be found elsewhere.  See [`package.json`](/cli/v7/configuring-npm/package.json) for more information.\n\n### See also\n\n* [package.json](/cli/v7/configuring-npm/package-json)\n* [npm install](/cli/v7/commands/npm-install)\n* [npm pack](/cli/v7/commands/npm-pack)\n* [npm cache](/cli/v7/commands/npm-cache)\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n* [config](/cli/v7/using-npm/config)\n* [npm publish](/cli/v7/commands/npm-publish)\n"},{"id":"c39a8ccf-31b9-54ad-8ec6-380771444e62","frontmatter":{"title":"Configuring npm"},"rawBody":"---\ntitle: Configuring npm\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/configuring-npm/index.mdx\n---\n\n<Index depth=\"1\" />\n"},{"id":"ac1f7eab-a8a2-596f-bbd5-80f54622556c","frontmatter":{"title":"install"},"rawBody":"---\ntitle: install\nsection: 5\ndescription: Download and install node and npm\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/configuring-npm/install.md\n---\n\n### Description\n\nTo publish and install packages to and from the public npm registry, you must install Node.js and the npm command line interface using either a Node version manager or a Node installer. **We strongly recommend using a Node version manager to install Node.js and npm.** We do not recommend using a Node installer, since the Node installation process installs npm in a directory with local permissions and can cause permissions errors when you run npm packages globally.\n\n### Overview\n\n- [Checking your version of npm and Node.js](#checking-your-version-of-npm-and-node-js)\n- [Using a Node version manager to install Node.js and npm](#using-a-node-version-manager-to-install-node-js-and-npm)\n- [Using a Node installer to install Node.js and npm](#using-a-node-installer-to-install-node-js-and-npm)\n\n### Checking your version of npm and Node.js\n\nTo see if you already have Node.js and npm installed and check the installed version, run the following commands:\n\n```\nnode -v\nnpm -v\n```\n\n### Using a Node version manager to install Node.js and npm\n\nNode version managers allow you to install and switch between multiple versions of Node.js and npm on your system so you can test your applications on multiple versions of npm to ensure they work for users on different versions.\n\n#### OSX or Linux Node version managers\n\n* [nvm](https://github.com/creationix/nvm)\n* [n](https://github.com/tj/n)\n\n#### Windows Node version managers\n\n* [nodist](https://github.com/marcelklehr/nodist)\n* [nvm-windows](https://github.com/coreybutler/nvm-windows)\n\n### Using a Node installer to install Node.js and npm\n\nIf you are unable to use a Node version manager, you can use a Node installer to install both Node.js and npm on your system.\n\n* [Node.js installer](https://nodejs.org/en/download/)\n* [NodeSource installer](https://github.com/nodesource/distributions). If you use Linux, we recommend that you use a NodeSource installer.\n\n#### OS X or Windows Node installers\n\nIf you're using OS X or Windows, use one of the installers from the [Node.js download page](https://nodejs.org/en/download/). Be sure to install the version labeled **LTS**. Other versions have not yet been tested with npm.\n\n#### Linux or other operating systems Node installers\n\nIf you're using Linux or another operating system, use one of the following installers:\n\n- [NodeSource installer](https://github.com/nodesource/distributions) (recommended)\n- One of the installers on the [Node.js download page](https://nodejs.org/en/download/)\n\nOr see [this page](https://nodejs.org/en/download/package-manager/) to install npm for Linux in the way many Linux developers prefer.\n\n\n#### Less-common operating systems\n\nFor more information on installing Node.js on a variety of operating systems, see [this page][pkg-mgr].\n\n\n[pkg-mgr]: https://nodejs.org/en/download/package-manager/\n"},{"id":"2c704256-0af7-555a-9b64-7add3304297d","frontmatter":{"title":"npmrc"},"rawBody":"---\ntitle: npmrc\nsection: 5\ndescription: The npm config files\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/configuring-npm/npmrc.md\n---\n\n### Description\n\nnpm gets its config settings from the command line, environment\nvariables, and `npmrc` files.\n\nThe `npm config` command can be used to update and edit the contents\nof the user and global npmrc files.\n\nFor a list of available configuration options, see [config](/cli/v7/using-npm/config).\n\n### Files\n\nThe four relevant files are:\n\n* per-project config file (/path/to/my/project/.npmrc)\n* per-user config file (~/.npmrc)\n* global config file ($PREFIX/etc/npmrc)\n* npm builtin config file (/path/to/npm/npmrc)\n\nAll npm config files are an ini-formatted list of `key = value`\nparameters.  Environment variables can be replaced using\n`${VARIABLE_NAME}`. For example:\n\n```bash\nprefix = ${HOME}/.npm-packages\n```\n\nEach of these files is loaded, and config options are resolved in\npriority order.  For example, a setting in the userconfig file would\noverride the setting in the globalconfig file.\n\nArray values are specified by adding \"[]\" after the key name. For\nexample:\n\n```bash\nkey[] = \"first value\"\nkey[] = \"second value\"\n```\n\n#### Comments\n\nLines in `.npmrc` files are interpreted as comments when they begin with a `;` or `#` character. `.npmrc` files are parsed by [npm/ini](https://github.com/npm/ini), which specifies this comment syntax.\n\nFor example:\n\n```bash\n# last modified: 01 Jan 2016\n; Set a new registry for a scoped package\n@myscope:registry=https://mycustomregistry.example.org\n```\n\n#### Per-project config file\n\nWhen working locally in a project, a `.npmrc` file in the root of the\nproject (ie, a sibling of `node_modules` and `package.json`) will set\nconfig values specific to this project.\n\nNote that this only applies to the root of the project that you're\nrunning npm in.  It has no effect when your module is published.  For\nexample, you can't publish a module that forces itself to install\nglobally, or in a different location.\n\nAdditionally, this file is not read in global mode, such as when running\n`npm install -g`.\n\n#### Per-user config file\n\n`$HOME/.npmrc` (or the `userconfig` param, if set in the environment\nor on the command line)\n\n#### Global config file\n\n`$PREFIX/etc/npmrc` (or the `globalconfig` param, if set above):\nThis file is an ini-file formatted list of `key = value` parameters.\nEnvironment variables can be replaced as above.\n\n#### Built-in config file\n\n`path/to/npm/itself/npmrc`\n\nThis is an unchangeable \"builtin\" configuration file that npm keeps\nconsistent across updates.  Set fields in here using the `./configure`\nscript that comes with npm.  This is primarily for distribution\nmaintainers to override default configs in a standard and consistent\nmanner.\n\n### See also\n\n* [npm folders](/cli/v7/configuring-npm/folders)\n* [npm config](/cli/v7/commands/npm-config)\n* [config](/cli/v7/using-npm/config)\n* [package.json](/cli/v7/configuring-npm/package-json)\n* [npm](/cli/v7/commands/npm-npm)\n"},{"id":"a5e1ef81-4ddc-54f2-89b8-763371b37501","frontmatter":{"title":"package.json"},"rawBody":"---\ntitle: package.json\nsection: 5\ndescription: Specifics of npm's package.json handling\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/configuring-npm/package-json.md\n---\n\n### Description\n\nThis document is all you need to know about what's required in your package.json\nfile.  It must be actual JSON, not just a JavaScript object literal.\n\nA lot of the behavior described in this document is affected by the config\nsettings described in [`config`](/cli/v7/using-npm/config).\n\n### name\n\nIf you plan to publish your package, the *most* important things in your\npackage.json are the name and version fields as they will be required. The name\nand version together form an identifier that is assumed to be completely unique.\nChanges to the package should come along with changes to the version. If you don't\nplan to publish your package, the name and version fields are optional.\n\nThe name is what your thing is called.\n\nSome rules:\n\n* The name must be less than or equal to 214 characters. This includes the scope for\n  scoped packages.\n* The names of scoped packages can begin with a dot or an underscore. This is not permitted without a scope.\n* New packages must not have uppercase letters in the name.\n* The name ends up being part of a URL, an argument on the command line, and a\n  folder name. Therefore, the name can't contain any non-URL-safe characters.\n\nSome tips:\n\n* Don't use the same name as a core Node module.\n* Don't put \"js\" or \"node\" in the name.  It's assumed that it's js, since you're\n  writing a package.json file, and you can specify the engine using the \"engines\"\n  field.  (See below.)\n* The name will probably be passed as an argument to require(), so it should\n  be something short, but also reasonably descriptive.\n* You may want to check the npm registry to see if there's something by that name\n  already, before you get too attached to it. <https://www.npmjs.com/>\n\nA name can be optionally prefixed by a scope, e.g. `@myorg/mypackage`. See\n[`scope`](/cli/v7/using-npm/scope) for more detail.\n\n### version\n\nIf you plan to publish your package, the *most* important things in your\npackage.json are the name and version fields as they will be required. The name\nand version together form an identifier that is assumed to be completely unique.\nChanges to the package should come along with changes to the version. If you don't\nplan to publish your package, the name and version fields are optional.\n\nVersion must be parseable by\n[node-semver](https://github.com/isaacs/node-semver), which is bundled\nwith npm as a dependency.  (`npm install semver` to use it yourself.)\n\nMore on version numbers and ranges at [semver](/cli/v7/using-npm/semver).\n\n### description\n\nPut a description in it.  It's a string.  This helps people discover your\npackage, as it's listed in `npm search`.\n\n### keywords\n\nPut keywords in it.  It's an array of strings.  This helps people\ndiscover your package as it's listed in `npm search`.\n\n### homepage\n\nThe url to the project homepage.\n\nExample:\n\n```json\n\"homepage\": \"https://github.com/owner/project#readme\"\n```\n\n### bugs\n\nThe url to your project's issue tracker and / or the email address to which\nissues should be reported. These are helpful for people who encounter issues\nwith your package.\n\nIt should look like this:\n\n```json\n{ \"url\" : \"https://github.com/owner/project/issues\"\n, \"email\" : \"project@hostname.com\"\n}\n```\n\nYou can specify either one or both values. If you want to provide only a url,\nyou can specify the value for \"bugs\" as a simple string instead of an object.\n\nIf a url is provided, it will be used by the `npm bugs` command.\n\n### license\n\nYou should specify a license for your package so that people know how they are\npermitted to use it, and any restrictions you're placing on it.\n\nIf you're using a common license such as BSD-2-Clause or MIT, add a\ncurrent SPDX license identifier for the license you're using, like this:\n\n```json\n{ \"license\" : \"BSD-3-Clause\" }\n```\n\nYou can check [the full list of SPDX license IDs](https://spdx.org/licenses/).\nIdeally you should pick one that is\n[OSI](https://opensource.org/licenses/alphabetical) approved.\n\nIf your package is licensed under multiple common licenses, use an [SPDX license\nexpression syntax version 2.0 string](https://www.npmjs.com/package/spdx), like this:\n\n```json\n{ \"license\" : \"(ISC OR GPL-3.0)\" }\n```\nIf you are using a license that hasn't been assigned an SPDX identifier, or if\nyou are using a custom license, use a string value like this one:\n\n```json\n{ \"license\" : \"SEE LICENSE IN <filename>\" }\n```\nThen include a file named `<filename>` at the top level of the package.\n\nSome old packages used license objects or a \"licenses\" property containing an\narray of license objects:\n\n```json\n// Not valid metadata\n{ \"license\" :\n  { \"type\" : \"ISC\"\n  , \"url\" : \"https://opensource.org/licenses/ISC\"\n  }\n}\n\n// Not valid metadata\n{ \"licenses\" :\n  [\n    { \"type\": \"MIT\"\n    , \"url\": \"https://www.opensource.org/licenses/mit-license.php\"\n    }\n  , { \"type\": \"Apache-2.0\"\n    , \"url\": \"https://opensource.org/licenses/apache2.0.php\"\n    }\n  ]\n}\n```\n\nThose styles are now deprecated. Instead, use SPDX expressions, like this:\n\n```json\n{ \"license\": \"ISC\" }\n\n{ \"license\": \"(MIT OR Apache-2.0)\" }\n```\n\nFinally, if you do not wish to grant others the right to use a private or\nunpublished package under any terms:\n\n```json\n{ \"license\": \"UNLICENSED\" }\n```\nConsider also setting `\"private\": true` to prevent accidental publication.\n\n### people fields: author, contributors\n\nThe \"author\" is one person.  \"contributors\" is an array of people.  A \"person\"\nis an object with a \"name\" field and optionally \"url\" and \"email\", like this:\n\n```json\n{ \"name\" : \"Barney Rubble\"\n, \"email\" : \"b@rubble.com\"\n, \"url\" : \"http://barnyrubble.tumblr.com/\"\n}\n```\n\nOr you can shorten that all into a single string, and npm will parse it for you:\n\n```json\n\"Barney Rubble <b@rubble.com> (http://barnyrubble.tumblr.com/)\"\n```\n\nBoth email and url are optional either way.\n\nnpm also sets a top-level \"maintainers\" field with your npm user info.\n\n### funding\n\nYou can specify an object containing an URL that provides up-to-date\ninformation about ways to help fund development of your package, or\na string URL, or an array of these:\n\n    \"funding\": {\n      \"type\" : \"individual\",\n      \"url\" : \"http://example.com/donate\"\n    }\n\n    \"funding\": {\n      \"type\" : \"patreon\",\n      \"url\" : \"https://www.patreon.com/my-account\"\n    }\n\n    \"funding\": \"http://example.com/donate\"\n\n    \"funding\": [\n      {\n        \"type\" : \"individual\",\n        \"url\" : \"http://example.com/donate\"\n      },\n      \"http://example.com/donateAlso\",\n      {\n        \"type\" : \"patreon\",\n        \"url\" : \"https://www.patreon.com/my-account\"\n      }\n    ]\n\n\nUsers can use the `npm fund` subcommand to list the `funding` URLs of all\ndependencies of their project, direct and indirect. A shortcut to visit each\nfunding url is also available when providing the project name such as:\n`npm fund <projectname>` (when there are multiple URLs, the first one will be\nvisited)\n\n### files\n\nThe optional `files` field is an array of file patterns that describes\nthe entries to be included when your package is installed as a\ndependency. File patterns follow a similar syntax to `.gitignore`, but\nreversed: including a file, directory, or glob pattern (`*`, `**/*`, and such)\nwill make it so that file is included in the tarball when it's packed. Omitting\nthe field will make it default to `[\"*\"]`, which means it will include all files.\n\nSome special files and directories are also included or excluded regardless of\nwhether they exist in the `files` array (see below).\n\nYou can also provide a `.npmignore` file in the root of your package or\nin subdirectories, which will keep files from being included. At the\nroot of your package it will not override the \"files\" field, but in\nsubdirectories it will. The `.npmignore` file works just like a\n`.gitignore`. If there is a `.gitignore` file, and `.npmignore` is\nmissing, `.gitignore`'s contents will be used instead.\n\nFiles included with the \"package.json#files\" field _cannot_ be excluded\nthrough `.npmignore` or `.gitignore`.\n\nCertain files are always included, regardless of settings:\n\n* `package.json`\n* `README`\n* `CHANGES` / `CHANGELOG` / `HISTORY`\n* `LICENSE` / `LICENCE`\n* `NOTICE`\n* The file in the \"main\" field\n\n`README`, `CHANGES`, `LICENSE` & `NOTICE` can have any case and extension.\n\nConversely, some files are always ignored:\n\n* `.git`\n* `CVS`\n* `.svn`\n* `.hg`\n* `.lock-wscript`\n* `.wafpickle-N`\n* `.*.swp`\n* `.DS_Store`\n* `._*`\n* `npm-debug.log`\n* `.npmrc`\n* `node_modules`\n* `config.gypi`\n* `*.orig`\n* `package-lock.json` (use shrinkwrap instead)\n\n### main\n\nThe main field is a module ID that is the primary entry point to your program.\nThat is, if your package is named `foo`, and a user installs it, and then does\n`require(\"foo\")`, then your main module's exports object will be returned.\n\nThis should be a module ID relative to the root of your package folder.\n\nFor most modules, it makes the most sense to have a main script and often not\nmuch else.\n\n### browser\n\nIf your module is meant to be used client-side the browser field should be\nused instead of the main field. This is helpful to hint users that it might\nrely on primitives that aren't available in Node.js modules. (e.g. `window`)\n\n### bin\n\nA lot of packages have one or more executable files that they'd like to\ninstall into the PATH. npm makes this pretty easy (in fact, it uses this\nfeature to install the \"npm\" executable.)\n\nTo use this, supply a `bin` field in your package.json which is a map of\ncommand name to local file name. On install, npm will symlink that file into\n`prefix/bin` for global installs, or `./node_modules/.bin/` for local\ninstalls.\n\n\nFor example, myapp could have this:\n\n```json\n{ \"bin\" : { \"myapp\" : \"./cli.js\" } }\n```\n\nSo, when you install myapp, it'll create a symlink from the `cli.js` script to\n`/usr/local/bin/myapp`.\n\nIf you have a single executable, and its name should be the name\nof the package, then you can just supply it as a string.  For example:\n\n```json\n{ \"name\": \"my-program\"\n, \"version\": \"1.2.5\"\n, \"bin\": \"./path/to/program\" }\n```\n\nwould be the same as this:\n\n```json\n{ \"name\": \"my-program\"\n, \"version\": \"1.2.5\"\n, \"bin\" : { \"my-program\" : \"./path/to/program\" } }\n```\n\nPlease make sure that your file(s) referenced in `bin` starts with\n`#!/usr/bin/env node`, otherwise the scripts are started without the node\nexecutable!\n\n### man\n\nSpecify either a single file or an array of filenames to put in place for the\n`man` program to find.\n\nIf only a single file is provided, then it's installed such that it is the\nresult from `man <pkgname>`, regardless of its actual filename.  For example:\n\n```json\n{ \"name\" : \"foo\"\n, \"version\" : \"1.2.3\"\n, \"description\" : \"A packaged foo fooer for fooing foos\"\n, \"main\" : \"foo.js\"\n, \"man\" : \"./man/doc.1\"\n}\n```\n\nwould link the `./man/doc.1` file in such that it is the target for `man foo`\n\nIf the filename doesn't start with the package name, then it's prefixed.\nSo, this:\n\n```json\n{ \"name\" : \"foo\"\n, \"version\" : \"1.2.3\"\n, \"description\" : \"A packaged foo fooer for fooing foos\"\n, \"main\" : \"foo.js\"\n, \"man\" : [ \"./man/foo.1\", \"./man/bar.1\" ]\n}\n```\n\nwill create files to do `man foo` and `man foo-bar`.\n\nMan files must end with a number, and optionally a `.gz` suffix if they are\ncompressed.  The number dictates which man section the file is installed into.\n\n```json\n{ \"name\" : \"foo\"\n, \"version\" : \"1.2.3\"\n, \"description\" : \"A packaged foo fooer for fooing foos\"\n, \"main\" : \"foo.js\"\n, \"man\" : [ \"./man/foo.1\", \"./man/foo.2\" ]\n}\n```\nwill create entries for `man foo` and `man 2 foo`\n\n### directories\n\nThe CommonJS [Packages](http://wiki.commonjs.org/wiki/Packages/1.0) spec details a\nfew ways that you can indicate the structure of your package using a `directories`\nobject. If you look at [npm's package.json](https://registry.npmjs.org/npm/latest),\nyou'll see that it has directories for doc, lib, and man.\n\nIn the future, this information may be used in other creative ways.\n\n#### directories.lib\n\nTell people where the bulk of your library is.  Nothing special is done\nwith the lib folder in any way, but it's useful meta info.\n\n#### directories.bin\n\nIf you specify a `bin` directory in `directories.bin`, all the files in\nthat folder will be added.\n\nBecause of the way the `bin` directive works, specifying both a\n`bin` path and setting `directories.bin` is an error. If you want to\nspecify individual files, use `bin`, and for all the files in an\nexisting `bin` directory, use `directories.bin`.\n\n#### directories.man\n\nA folder that is full of man pages.  Sugar to generate a \"man\" array by\nwalking the folder.\n\n#### directories.doc\n\nPut markdown files in here.  Eventually, these will be displayed nicely,\nmaybe, someday.\n\n#### directories.example\n\nPut example scripts in here.  Someday, it might be exposed in some clever way.\n\n#### directories.test\n\nPut your tests in here. It is currently not exposed, but it might be in the\nfuture.\n\n### repository\n\nSpecify the place where your code lives. This is helpful for people who\nwant to contribute.  If the git repo is on GitHub, then the `npm docs`\ncommand will be able to find you.\n\nDo it like this:\n\n```json\n\"repository\": {\n  \"type\" : \"git\",\n  \"url\" : \"https://github.com/npm/cli.git\"\n}\n\n\"repository\": {\n  \"type\" : \"svn\",\n  \"url\" : \"https://v8.googlecode.com/svn/trunk/\"\n}\n```\n\nThe URL should be a publicly available (perhaps read-only) url that can be handed\ndirectly to a VCS program without any modification.  It should not be a url to an\nhtml project page that you put in your browser.  It's for computers.\n\nFor GitHub, GitHub gist, Bitbucket, or GitLab repositories you can use the same\nshortcut syntax you use for `npm install`:\n\n```json\n\"repository\": \"npm/npm\"\n\n\"repository\": \"github:user/repo\"\n\n\"repository\": \"gist:11081aaa281\"\n\n\"repository\": \"bitbucket:user/repo\"\n\n\"repository\": \"gitlab:user/repo\"\n```\n\nIf the `package.json` for your package is not in the root directory (for example\nif it is part of a monorepo), you can specify the directory in which it lives:\n\n```json\n\"repository\": {\n  \"type\" : \"git\",\n  \"url\" : \"https://github.com/facebook/react.git\",\n  \"directory\": \"packages/react-dom\"\n}\n```\n\n### scripts\n\nThe \"scripts\" property is a dictionary containing script commands that are run\nat various times in the lifecycle of your package.  The key is the lifecycle\nevent, and the value is the command to run at that point.\n\nSee [`scripts`](/cli/v7/using-npm/scripts) to find out more about writing package scripts.\n\n### config\n\nA \"config\" object can be used to set configuration parameters used in package\nscripts that persist across upgrades.  For instance, if a package had the\nfollowing:\n\n```json\n{ \"name\" : \"foo\"\n, \"config\" : { \"port\" : \"8080\" } }\n```\n\nand then had a \"start\" command that then referenced the\n`npm_package_config_port` environment variable, then the user could\noverride that by doing `npm config set foo:port 8001`.\n\nSee [`config`](/cli/v7/using-npm/config) and [`scripts`](/cli/v7/using-npm/scripts) for more on package\nconfigs.\n\n### dependencies\n\nDependencies are specified in a simple object that maps a package name to a\nversion range. The version range is a string which has one or more\nspace-separated descriptors.  Dependencies can also be identified with a\ntarball or git URL.\n\n**Please do not put test harnesses or transpilers in your\n`dependencies` object.**  See `devDependencies`, below.\n\nSee [semver](/cli/v7/using-npm/semver) for more details about specifying version ranges.\n\n* `version` Must match `version` exactly\n* `>version` Must be greater than `version`\n* `>=version` etc\n* `<version`\n* `<=version`\n* `~version` \"Approximately equivalent to version\"  See [semver](/cli/v7/using-npm/semver)\n* `^version` \"Compatible with version\"  See [semver](/cli/v7/using-npm/semver)\n* `1.2.x` 1.2.0, 1.2.1, etc., but not 1.3.0\n* `http://...` See 'URLs as Dependencies' below\n* `*` Matches any version\n* `\"\"` (just an empty string) Same as `*`\n* `version1 - version2` Same as `>=version1 <=version2`.\n* `range1 || range2` Passes if either range1 or range2 are satisfied.\n* `git...` See 'Git URLs as Dependencies' below\n* `user/repo` See 'GitHub URLs' below\n* `tag` A specific version tagged and published as `tag`  See [`npm dist-tag`](/cli/v7/commands/npm-dist-tag)\n* `path/path/path` See [Local Paths](#local-paths) below\n\nFor example, these are all valid:\n\n```json\n{ \"dependencies\" :\n  { \"foo\" : \"1.0.0 - 2.9999.9999\"\n  , \"bar\" : \">=1.0.2 <2.1.2\"\n  , \"baz\" : \">1.0.2 <=2.3.4\"\n  , \"boo\" : \"2.0.1\"\n  , \"qux\" : \"<1.0.0 || >=2.3.1 <2.4.5 || >=2.5.2 <3.0.0\"\n  , \"asd\" : \"http://asdf.com/asdf.tar.gz\"\n  , \"til\" : \"~1.2\"\n  , \"elf\" : \"~1.2.3\"\n  , \"two\" : \"2.x\"\n  , \"thr\" : \"3.3.x\"\n  , \"lat\" : \"latest\"\n  , \"dyl\" : \"file:../dyl\"\n  }\n}\n```\n\n#### URLs as Dependencies\n\nYou may specify a tarball URL in place of a version range.\n\nThis tarball will be downloaded and installed locally to your package at\ninstall time.\n\n#### Git URLs as Dependencies\n\nGit urls are of the form:\n\n```bash\n<protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish> | #semver:<semver>]\n```\n\n`<protocol>` is one of `git`, `git+ssh`, `git+http`, `git+https`, or\n`git+file`.\n\nIf `#<commit-ish>` is provided, it will be used to clone exactly that\ncommit. If the commit-ish has the format `#semver:<semver>`, `<semver>` can\nbe any valid semver range or exact version, and npm will look for any tags\nor refs matching that range in the remote repository, much as it would for a\nregistry dependency. If neither `#<commit-ish>` or `#semver:<semver>` is\nspecified, then `master` is used.\n\nExamples:\n\n```bash\ngit+ssh://git@github.com:npm/cli.git#v1.0.27\ngit+ssh://git@github.com:npm/cli#semver:^5.0\ngit+https://isaacs@github.com/npm/cli.git\ngit://github.com/npm/cli.git#v1.0.27\n```\n\n#### GitHub URLs\n\nAs of version 1.1.65, you can refer to GitHub urls as just \"foo\":\n\"user/foo-project\".  Just as with git URLs, a `commit-ish` suffix can be\nincluded.  For example:\n\n```json\n{\n  \"name\": \"foo\",\n  \"version\": \"0.0.0\",\n  \"dependencies\": {\n    \"express\": \"expressjs/express\",\n    \"mocha\": \"mochajs/mocha#4727d357ea\",\n    \"module\": \"user/repo#feature\\/branch\"\n  }\n}\n```\n\n#### Local Paths\n\nAs of version 2.0.0 you can provide a path to a local directory that contains a\npackage. Local paths can be saved using `npm install -S` or\n`npm install --save`, using any of these forms:\n\n```bash\n../foo/bar\n~/foo/bar\n./foo/bar\n/foo/bar\n```\n\nin which case they will be normalized to a relative path and added to your\n`package.json`. For example:\n\n```json\n{\n  \"name\": \"baz\",\n  \"dependencies\": {\n    \"bar\": \"file:../foo/bar\"\n  }\n}\n```\n\nThis feature is helpful for local offline development and creating\ntests that require npm installing where you don't want to hit an\nexternal server, but should not be used when publishing packages\nto the public registry.\n\n### devDependencies\n\nIf someone is planning on downloading and using your module in their\nprogram, then they probably don't want or need to download and build\nthe external test or documentation framework that you use.\n\nIn this case, it's best to map these additional items in a `devDependencies`\nobject.\n\nThese things will be installed when doing `npm link` or `npm install`\nfrom the root of a package, and can be managed like any other npm\nconfiguration param.  See [`config`](/cli/v7/using-npm/config) for more on the topic.\n\nFor build steps that are not platform-specific, such as compiling\nCoffeeScript or other languages to JavaScript, use the `prepare`\nscript to do this, and make the required package a devDependency.\n\nFor example:\n\n```json\n{ \"name\": \"ethopia-waza\",\n  \"description\": \"a delightfully fruity coffee varietal\",\n  \"version\": \"1.2.3\",\n  \"devDependencies\": {\n    \"coffee-script\": \"~1.6.3\"\n  },\n  \"scripts\": {\n    \"prepare\": \"coffee -o lib/ -c src/waza.coffee\"\n  },\n  \"main\": \"lib/waza.js\"\n}\n```\n\nThe `prepare` script will be run before publishing, so that users\ncan consume the functionality without requiring them to compile it\nthemselves.  In dev mode (ie, locally running `npm install`), it'll\nrun this script as well, so that you can test it easily.\n\n### peerDependencies\n\nIn some cases, you want to express the compatibility of your package with a\nhost tool or library, while not necessarily doing a `require` of this host.\nThis is usually referred to as a *plugin*. Notably, your module may be exposing\na specific interface, expected and specified by the host documentation.\n\nFor example:\n\n```json\n{\n  \"name\": \"tea-latte\",\n  \"version\": \"1.3.5\",\n  \"peerDependencies\": {\n    \"tea\": \"2.x\"\n  }\n}\n```\n\nThis ensures your package `tea-latte` can be installed *along* with the second\nmajor version of the host package `tea` only. `npm install tea-latte` could\npossibly yield the following dependency graph:\n\n```bash\n├── tea-latte@1.3.5\n└── tea@2.2.0\n```\n\n**NOTE: npm versions 1 and 2 will automatically install `peerDependencies` if\nthey are not explicitly depended upon higher in the dependency tree. In the\nnext major version of npm (npm@3), this will no longer be the case. You will\nreceive a warning that the peerDependency is not installed instead.** The\nbehavior in npms 1 & 2 was frequently confusing and could easily put you into\ndependency hell, a situation that npm is designed to avoid as much as possible.\n\nTrying to install another plugin with a conflicting requirement will cause an\nerror. For this reason, make sure your plugin requirement is as broad as\npossible, and not to lock it down to specific patch versions.\n\nAssuming the host complies with [semver](https://semver.org/), only changes in\nthe host package's major version will break your plugin. Thus, if you've worked\nwith every 1.x version of the host package, use `\"^1.0\"` or `\"1.x\"` to express\nthis. If you depend on features introduced in 1.5.2, use `\">= 1.5.2 < 2\"`.\n\n### bundledDependencies\n\nThis defines an array of package names that will be bundled when publishing\nthe package.\n\nIn cases where you need to preserve npm packages locally or have them\navailable through a single file download, you can bundle the packages in a\ntarball file by specifying the package names in the `bundledDependencies`\narray and executing `npm pack`.\n\nFor example:\n\nIf we define a package.json like this:\n\n```json\n{\n  \"name\": \"awesome-web-framework\",\n  \"version\": \"1.0.0\",\n  \"bundledDependencies\": [\n    \"renderized\", \"super-streams\"\n  ]\n}\n```\nwe can obtain `awesome-web-framework-1.0.0.tgz` file by running `npm pack`.\nThis file contains the dependencies `renderized` and `super-streams` which\ncan be installed in a new project by executing `npm install\nawesome-web-framework-1.0.0.tgz`.  Note that the package names do not include\nany versions, as that information is specified in `dependencies`.\n\nIf this is spelled `\"bundleDependencies\"`, then that is also honored.\n\n### optionalDependencies\n\nIf a dependency can be used, but you would like npm to proceed if it cannot be\nfound or fails to install, then you may put it in the `optionalDependencies`\nobject.  This is a map of package name to version or url, just like the\n`dependencies` object.  The difference is that build failures do not cause\ninstallation to fail.  Running `npm install --no-optional` will prevent these\ndependencies from being installed.\n\nIt is still your program's responsibility to handle the lack of the\ndependency.  For example, something like this:\n\n```js\ntry {\n  var foo = require('foo')\n  var fooVersion = require('foo/package.json').version\n} catch (er) {\n  foo = null\n}\nif ( notGoodFooVersion(fooVersion) ) {\n  foo = null\n}\n\n// .. then later in your program ..\n\nif (foo) {\n  foo.doFooThings()\n}\n```\n\nEntries in `optionalDependencies` will override entries of the same name in\n`dependencies`, so it's usually best to only put in one place.\n\n### engines\n\nYou can specify the version of node that your stuff works on:\n\n```json\n{ \"engines\" : { \"node\" : \">=0.10.3 <0.12\" } }\n```\n\nAnd, like with dependencies, if you don't specify the version (or if you\nspecify \"\\*\" as the version), then any version of node will do.\n\nIf you specify an \"engines\" field, then npm will require that \"node\" be\nsomewhere on that list. If \"engines\" is omitted, then npm will just assume\nthat it works on node.\n\nYou can also use the \"engines\" field to specify which versions of npm\nare capable of properly installing your program.  For example:\n\n```json\n{ \"engines\" : { \"npm\" : \"~1.0.20\" } }\n```\n\nUnless the user has set the `engine-strict` config flag, this\nfield is advisory only and will only produce warnings when your package is installed as a dependency.\n\n### engineStrict\n\n**This feature was removed in npm 3.0.0**\n\nPrior to npm 3.0.0, this feature was used to treat this package as if the\nuser had set `engine-strict`. It is no longer used.\n\n### os\n\nYou can specify which operating systems your\nmodule will run on:\n\n```json\n\"os\" : [ \"darwin\", \"linux\" ]\n```\n\nYou can also blacklist instead of whitelist operating systems,\njust prepend the blacklisted os with a '!':\n\n```json\n\"os\" : [ \"!win32\" ]\n```\n\nThe host operating system is determined by `process.platform`\n\nIt is allowed to both blacklist, and whitelist, although there isn't any\ngood reason to do this.\n\n### cpu\n\nIf your code only runs on certain cpu architectures,\nyou can specify which ones.\n\n```json\n\"cpu\" : [ \"x64\", \"ia32\" ]\n```\n\nLike the `os` option, you can also blacklist architectures:\n\n```json\n\"cpu\" : [ \"!arm\", \"!mips\" ]\n```\n\nThe host architecture is determined by `process.arch`\n\n### preferGlobal\n\n**DEPRECATED**\n\nThis option used to trigger an npm warning, but it will no longer warn. It is\npurely there for informational purposes. It is now recommended that you install\nany binaries as local devDependencies wherever possible.\n\n### private\n\nIf you set `\"private\": true` in your package.json, then npm will refuse\nto publish it.\n\nThis is a way to prevent accidental publication of private repositories.  If\nyou would like to ensure that a given package is only ever published to a\nspecific registry (for example, an internal registry), then use the\n`publishConfig` dictionary described below to override the `registry` config\nparam at publish-time.\n\n### publishConfig\n\nThis is a set of config values that will be used at publish-time. It's\nespecially handy if you want to set the tag, registry or access, so that\nyou can ensure that a given package is not tagged with \"latest\", published\nto the global public registry or that a scoped module is private by default.\n\nAny config values can be overridden, but only \"tag\", \"registry\" and \"access\"\nprobably matter for the purposes of publishing.\n\nSee [`config`](/cli/v7/using-npm/config) to see the list of config options that can be\noverridden.\n\n### DEFAULT VALUES\n\nnpm will default some values based on package contents.\n\n* `\"scripts\": {\"start\": \"node server.js\"}`\n\n  If there is a `server.js` file in the root of your package, then npm\n  will default the `start` command to `node server.js`.\n\n* `\"scripts\":{\"install\": \"node-gyp rebuild\"}`\n\n  If there is a `binding.gyp` file in the root of your package and you have not defined an `install` or `preinstall` script, npm will\n  default the `install` command to compile using node-gyp.\n\n* `\"contributors\": [...]`\n\n  If there is an `AUTHORS` file in the root of your package, npm will\n  treat each line as a `Name <email> (url)` format, where email and url\n  are optional.  Lines which start with a `#` or are blank, will be\n  ignored.\n\n### SEE ALSO\n\n* [semver](/cli/v7/using-npm/semver)\n* [npm init](/cli/v7/commands/npm-init)\n* [npm version](/cli/v7/commands/npm-version)\n* [npm config](/cli/v7/commands/npm-config)\n* [npm help](/cli/v7/commands/npm-help)\n* [npm install](/cli/v7/commands/npm-install)\n* [npm publish](/cli/v7/commands/npm-publish)\n* [npm uninstall](/cli/v7/commands/npm-uninstall)\n"},{"id":"a6319cac-d605-58c7-8b74-92fca056d166","frontmatter":{"title":"package-lock.json"},"rawBody":"---\ntitle: package-lock.json\nsection: 5\ndescription: A manifestation of the manifest\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/configuring-npm/package-lock-json.md\n---\n\n### Description\n\n`package-lock.json` is automatically generated for any operations where npm\nmodifies either the `node_modules` tree, or `package.json`. It describes the\nexact tree that was generated, such that subsequent installs are able to\ngenerate identical trees, regardless of intermediate dependency updates.\n\nThis file is intended to be committed into source repositories, and serves\nvarious purposes:\n\n* Describe a single representation of a dependency tree such that teammates, deployments, and continuous integration are guaranteed to install exactly the same dependencies.\n\n* Provide a facility for users to \"time-travel\" to previous states of `node_modules` without having to commit the directory itself.\n\n* To facilitate greater visibility of tree changes through readable source control diffs.\n\n* And optimize the installation process by allowing npm to skip repeated metadata resolutions for previously-installed packages.\n\nOne key detail about `package-lock.json` is that it cannot be published, and it\nwill be ignored if found in any place other than the toplevel package. It shares\na format with [npm-shrinkwrap.json](/cli/v7/configuring-npm/shrinkwrap-json), which is essentially the same file, but\nallows publication. This is not recommended unless deploying a CLI tool or\notherwise using the publication process for producing production packages.\n\nIf both `package-lock.json` and `npm-shrinkwrap.json` are present in the root of\na package, `package-lock.json` will be completely ignored.\n\n\n### File Format\n\n#### name\n\nThe name of the package this is a package-lock for. This must match what's in\n`package.json`.\n\n#### version\n\nThe version of the package this is a package-lock for. This must match what's in\n`package.json`.\n\n#### lockfileVersion\n\nAn integer version, starting at `1` with the version number of this document\nwhose semantics were used when generating this `package-lock.json`.\n\n#### packageIntegrity\n\nThis is a [subresource\nintegrity](https://w3c.github.io/webappsec/specs/subresourceintegrity/) value\ncreated from the `package.json`. No preprocessing of the `package.json` should\nbe done. Subresource integrity strings can be produced by modules like\n[`ssri`](https://www.npmjs.com/package/ssri).\n\n#### preserveSymlinks\n\nIndicates that the install was done with the environment variable\n`NODE_PRESERVE_SYMLINKS` enabled. The installer should insist that the value of\nthis property match that environment variable.\n\n#### dependencies\n\nA mapping of package name to dependency object.  Dependency objects have the\nfollowing properties:\n\n##### version\n\nThis is a specifier that uniquely identifies this package and should be\nusable in fetching a new copy of it.\n\n* bundled dependencies: Regardless of source, this is a version number that is purely for informational purposes.\n* registry sources: This is a version number. (eg, `1.2.3`)\n* git sources: This is a git specifier with resolved committish. (eg, `git+https://example.com/foo/bar#115311855adb0789a0466714ed48a1499ffea97e`)\n* http tarball sources: This is the URL of the tarball. (eg, `https://example.com/example-1.3.0.tgz`)\n* local tarball sources: This is the file URL of the tarball. (eg `file:///opt/storage/example-1.3.0.tgz`)\n* local link sources: This is the file URL of the link. (eg `file:libs/our-module`)\n\n##### integrity\n\nThis is a [Standard Subresource\nIntegrity](https://w3c.github.io/webappsec/specs/subresourceintegrity/) for this\nresource.\n\n* For bundled dependencies this is not included, regardless of source.\n* For registry sources, this is the `integrity` that the registry provided, or if one wasn't provided the SHA1 in `shasum`.\n* For git sources this is the specific commit hash we cloned from.\n* For remote tarball sources this is an integrity based on a SHA512 of\n  the file.\n* For local tarball sources: This is an integrity field based on the SHA512 of the file.\n\n##### resolved\n\n* For bundled dependencies this is not included, regardless of source.\n* For registry sources this is path of the tarball relative to the registry\n  URL.  If the tarball URL isn't on the same server as the registry URL then\n  this is a complete URL.\n\n##### bundled\n\nIf true, this is the bundled dependency and will be installed by the parent\nmodule.  When installing, this module will be extracted from the parent\nmodule during the extract phase, not installed as a separate dependency.\n\n##### dev\n\nIf true then this dependency is either a development dependency ONLY of the\ntop level module or a transitive dependency of one.  This is false for\ndependencies that are both a development dependency of the top level and a\ntransitive dependency of a non-development dependency of the top level.\n\n##### optional\n\nIf true then this dependency is either an optional dependency ONLY of the\ntop level module or a transitive dependency of one.  This is false for\ndependencies that are both an optional dependency of the top level and a\ntransitive dependency of a non-optional dependency of the top level.\n\nAll optional dependencies should be included even if they're uninstallable\non the current platform.\n\n\n##### requires\n\nThis is a mapping of module name to version.  This is a list of everything\nthis module requires, regardless of where it will be installed.  The version\nshould match via normal matching rules a dependency either in our\n`dependencies` or in a level higher than us.\n\n\n##### dependencies\n\nThe dependencies of this dependency, exactly as at the top level.\n\n### See also\n\n* [npm shrinkwrap](/cli/v7/commands/npm-shrinkwrap)\n* [shrinkwrap.json](/cli/v7/configuring-npm/shrinkwrap-json)\n* [package-locks](/cli/v7/configuring-npm/package-locks)\n* [package.json](/cli/v7/configuring-npm/package-json)\n* [npm install](/cli/v7/commands/npm-install)\n"},{"id":"ef9a178d-ceca-5bb2-a9d5-c995d9169015","frontmatter":{"title":"package-locks"},"rawBody":"---\ntitle: package-locks\nsection: 5\ndescription: An explanation of npm lockfiles\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/configuring-npm/package-locks.md\n---\n\n### Description\n\nConceptually, the \"input\" to [`npm install`](/cli/v7/commands/npm-install) is a [package.json](/cli/v7/configuring-npm/package-json), while its\n\"output\" is a fully-formed `node_modules` tree: a representation of the\ndependencies you declared. In an ideal world, npm would work like a pure\nfunction: the same `package.json` should produce the exact same `node_modules`\ntree, any time. In some cases, this is indeed true. But in many others, npm is\nunable to do this. There are multiple reasons for this:\n\n* different versions of npm (or other package managers) may have been used to install a package, each using slightly different installation algorithms.\n\n* a new version of a direct semver-range package may have been published since the last time your packages were installed, and thus a newer version will be used.\n\n* A dependency of one of your dependencies may have published a new version, which will update even if you used pinned dependency specifiers (`1.2.3` instead of `^1.2.3`)\n\n* The registry you installed from is no longer available, or allows mutation of versions (unlike the primary npm registry), and a different version of a package exists under the same version number now.\n\nAs an example, consider package A:\n\n```json\n{\n  \"name\": \"A\",\n  \"version\": \"0.1.0\",\n  \"dependencies\": {\n    \"B\": \"<0.1.0\"\n  }\n}\n```\n\npackage B:\n\n```json\n{\n  \"name\": \"B\",\n  \"version\": \"0.0.1\",\n  \"dependencies\": {\n    \"C\": \"<0.1.0\"\n  }\n}\n```\n\nand package C:\n```json\n{\n  \"name\": \"C\",\n  \"version\": \"0.0.1\"\n}\n```\n\nIf these are the only versions of A, B, and C available in the\nregistry, then a normal `npm install A` will install:\n\n```json\nA@0.1.0\n`-- B@0.0.1\n    `-- C@0.0.1\n```\n\nHowever, if B@0.0.2 is published, then a fresh `npm install A` will\ninstall:\n\n```bash\nA@0.1.0\n`-- B@0.0.2\n    `-- C@0.0.1\n```\n\nassuming the new version did not modify B's dependencies. Of course,\nthe new version of B could include a new version of C and any number\nof new dependencies. If such changes are undesirable, the author of A\ncould specify a dependency on B@0.0.1. However, if A's author and B's\nauthor are not the same person, there's no way for A's author to say\nthat he or she does not want to pull in newly published versions of C\nwhen B hasn't changed at all.\n\nTo prevent this potential issue, npm uses [package-lock.json](/cli/v7/configuring-npm/package-lock-json) or, if present, [npm-shrinkwrap.json](/cli/v7/configuring-npm/shrinkwrap-json). These files are called package locks, or lockfiles.\n\nWhenever you run `npm install`, npm generates or updates your package lock,\nwhich will look something like this:\n\n```json\n{\n  \"name\": \"A\",\n  \"version\": \"0.1.0\",\n  ...metadata fields...\n  \"dependencies\": {\n    \"B\": {\n      \"version\": \"0.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/B/-/B-0.0.1.tgz\",\n      \"integrity\": \"sha512-DeAdb33F+\"\n      \"dependencies\": {\n        \"C\": {\n          \"version\": \"git://github.com/org/C.git#5c380ae319fc4efe9e7f2d9c78b0faa588fd99b4\"\n        }\n      }\n    }\n  }\n}\n```\n\nThis file describes an *exact*, and more importantly *reproducible*\n`node_modules` tree. Once it's present, any future installation will base its\nwork off this file, instead of recalculating dependency versions off\n[package.json](/cli/v7/configuring-npm/package-json).\n\nThe presence of a package lock changes the installation behavior such that:\n\n1. The module tree described by the package lock is reproduced. This means\nreproducing the structure described in the file, using the specific files\nreferenced in \"resolved\" if available, falling back to normal package resolution\nusing \"version\" if one isn't.\n\n2. The tree is walked and any missing dependencies are installed in the usual\nfashion.\n\nIf `preshrinkwrap`, `shrinkwrap` or `postshrinkwrap` are in the `scripts`\nproperty of the `package.json`, they will be executed in order. `preshrinkwrap`\nand `shrinkwrap` are executed before the shrinkwrap, `postshrinkwrap` is\nexecuted afterwards. These scripts run for both `package-lock.json` and\n`npm-shrinkwrap.json`. For example to run some postprocessing on the generated\nfile:\n\n```json\n  \"scripts\": {\n    \"postshrinkwrap\": \"json -I -e \\\"this.myMetadata = $MY_APP_METADATA\\\"\"\n  }\n```\n\n#### Using locked packages\n\nUsing a locked package is no different than using any package without a package\nlock: any commands that update `node_modules` and/or `package.json`'s\ndependencies will automatically sync the existing lockfile. This includes `npm\ninstall`, `npm rm`, `npm update`, etc. To prevent this update from happening,\nyou can use the `--no-save` option to prevent saving altogether, or\n`--no-shrinkwrap` to allow `package.json` to be updated while leaving\n`package-lock.json` or `npm-shrinkwrap.json` intact.\n\nIt is highly recommended you commit the generated package lock to source\ncontrol: this will allow anyone else on your team, your deployments, your\nCI/continuous integration, and anyone else who runs `npm install` in your\npackage source to get the exact same dependency tree that you were developing\non. Additionally, the diffs from these changes are human-readable and will\ninform you of any changes npm has made to your `node_modules`, so you can notice\nif any transitive dependencies were updated, hoisted, etc.\n\n#### Resolving lockfile conflicts\n\nOccasionally, two separate npm install will create package locks that cause\nmerge conflicts in source control systems. As of `npm@5.7.0`, these conflicts\ncan be resolved by manually fixing any `package.json` conflicts, and then\nrunning `npm install [--package-lock-only]` again. npm will automatically\nresolve any conflicts for you and write a merged package lock that includes all\nthe dependencies from both branches in a reasonable tree. If\n`--package-lock-only` is provided, it will do this without also modifying your\nlocal `node_modules/`.\n\nTo make this process seamless on git, consider installing\n[`npm-merge-driver`](https://npm.im/npm-merge-driver), which will teach git how\nto do this itself without any user interaction. In short: `$ npx\nnpm-merge-driver install -g` will let you do this, and even works with\npre-`npm@5.7.0` versions of npm 5, albeit a bit more noisily. Note that if\n`package.json` itself conflicts, you will have to resolve that by hand and run\n`npm install` manually, even with the merge driver.\n\n### See Also\n\n* https://medium.com/@sdboyer/so-you-want-to-write-a-package-manager-4ae9c17d9527\n* [package.json](/cli/v7/configuring-npm/package-json)\n* [package-lock.json](/cli/v7/configuring-npm/package-lock-json)\n* [shrinkwrap.json](/cli/v7/configuring-npm/shrinkwrap-json)\n* [npm shrinkwrap](/cli/v7/commands/npm-shrinkwrap)\n"},{"id":"6b2204cb-13f5-5afc-9ccc-cb49936866a8","frontmatter":{"title":"shrinkwrap.json"},"rawBody":"---\ntitle: shrinkwrap.json\nsection: 5\ndescription: A publishable lockfile\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/configuring-npm/shrinkwrap-json.md\n---\n\n### Description\n\n`npm-shrinkwrap.json` is a file created by [`npm shrinkwrap`](/cli/v7/commands/npm-shrinkwrap). It is identical to\n`package-lock.json`, with one major caveat: Unlike `package-lock.json`,\n`npm-shrinkwrap.json` may be included when publishing a package.\n\nThe recommended use-case for `npm-shrinkwrap.json` is applications deployed\nthrough the publishing process on the registry: for example, daemons and\ncommand-line tools intended as global installs or `devDependencies`. It's\nstrongly discouraged for library authors to publish this file, since that would\nprevent end users from having control over transitive dependency updates.\n\nAdditionally, if both `package-lock.json` and `npm-shrinkwrap.json` are present\nin a package root, `package-lock.json` will be ignored in favor of this file.\n\nFor full details and description of the `npm-shrinkwrap.json` file format, refer\nto the manual page for [package-lock.json](/cli/v7/configuring-npm/package-lock-json).\n\n### See also\n\n* [npm shrinkwrap](/cli/v7/commands/npm-shrinkwrap)\n* [package-lock.json](/cli/v7/configuring-npm/package-lock-json)\n* [package.json](/cli/v7/configuring-npm/package-json)\n* [npm install](/cli/v7/commands/npm-install)\n"},{"id":"37e8c8d2-e100-5dd8-be22-072bd9b82ec0","frontmatter":{"title":"config"},"rawBody":"---\ntitle: config\nsection: 7\ndescription: More than you probably want to know about npm configuration\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/using-npm/config.md\n---\n\n### Description\n\nnpm gets its configuration values from the following sources, sorted by priority:\n\n#### Command Line Flags\n\nPutting `--foo bar` on the command line sets the `foo` configuration\nparameter to `\"bar\"`.  A `--` argument tells the cli parser to stop\nreading flags.  Using `--flag` without specifying any value will set\nthe value to `true`.\n\nExample: `--flag1 --flag2` will set both configuration parameters\nto `true`, while `--flag1 --flag2 bar` will set `flag1` to `true`,\nand `flag2` to `bar`.  Finally, `--flag1 --flag2 -- bar` will set\nboth configuration parameters to `true`, and the `bar` is taken\nas a command argument.\n\n#### Environment Variables\n\nAny environment variables that start with `npm_config_` will be\ninterpreted as a configuration parameter.  For example, putting\n`npm_config_foo=bar` in your environment will set the `foo`\nconfiguration parameter to `bar`.  Any environment configurations that\nare not given a value will be given the value of `true`.  Config\nvalues are case-insensitive, so `NPM_CONFIG_FOO=bar` will work the\nsame. However, please note that inside [`scripts`](/cli/v7/using-npm/scripts)\nnpm will set its own environment variables and Node will prefer\nthose lowercase versions over any uppercase ones that you might set.\nFor details see [this issue](https://github.com/npm/npm/issues/14528).\n\nNotice that you need to use underscores instead of dashes, so `--allow-same-version`\nwould become `npm_config_allow_same_version=true`.\n\n#### npmrc Files\n\nThe four relevant files are:\n\n* per-project configuration file (`/path/to/my/project/.npmrc`)\n* per-user configuration file (defaults to `$HOME/.npmrc`; configurable via CLI\n  option `--userconfig` or environment variable `$NPM_CONFIG_USERCONFIG`)\n* global configuration file (defaults to `$PREFIX/etc/npmrc`; configurable via\n  CLI option `--globalconfig` or environment variable `$NPM_CONFIG_GLOBALCONFIG`)\n* npm's built-in configuration file (`/path/to/npm/npmrc`)\n\nSee [npmrc](/cli/v7/configuring-npm/npmrc) for more details.\n\n#### Default Configs\n\nRun `npm config ls -l` to see a set of configuration parameters that are\ninternal to npm, and are defaults if nothing else is specified.\n\n### Shorthands and Other CLI Niceties\n\nThe following shorthands are parsed on the command-line:\n\n* `-v`: `--version`\n* `-h`, `-?`, `--help`, `-H`: `--usage`\n* `-s`, `--silent`: `--loglevel silent`\n* `-q`, `--quiet`: `--loglevel warn`\n* `-d`: `--loglevel info`\n* `-dd`, `--verbose`: `--loglevel verbose`\n* `-ddd`: `--loglevel silly`\n* `-g`: `--global`\n* `-C`: `--prefix`\n* `-l`: `--long`\n* `-m`: `--message`\n* `-p`, `--porcelain`: `--parseable`\n* `-reg`: `--registry`\n* `-f`: `--force`\n* `-desc`: `--description`\n* `-S`: `--save`\n* `-P`: `--save-prod`\n* `-D`: `--save-dev`\n* `-O`: `--save-optional`\n* `-B`: `--save-bundle`\n* `-E`: `--save-exact`\n* `-y`: `--yes`\n* `-n`: `--yes false`\n* `ll` and `la` commands: `ls --long`\n\nIf the specified configuration param resolves unambiguously to a known\nconfiguration parameter, then it is expanded to that configuration\nparameter.  For example:\n\n```bash\nnpm ls --par\n# same as:\nnpm ls --parseable\n```\n\nIf multiple single-character shorthands are strung together, and the\nresulting combination is unambiguously not some other configuration\nparam, then it is expanded to its various component pieces.  For\nexample:\n\n```bash\nnpm ls -gpld\n# same as:\nnpm ls --global --parseable --long --loglevel info\n```\n\n### Per-Package Config Settings\n\nWhen running scripts (see [`scripts`](/cli/v7/using-npm/scripts)) the package.json \"config\"\nkeys are overwritten in the environment if there is a config param of\n`<name>[@<version>]:<key>`.  For example, if the package.json has\nthis:\n\n```json\n{ \"name\" : \"foo\"\n, \"config\" : { \"port\" : \"8080\" }\n, \"scripts\" : { \"start\" : \"node server.js\" } }\n```\n\nand the server.js is this:\n\n```javascript\nhttp.createServer(...).listen(process.env.npm_package_config_port)\n```\n\nthen the user could change the behavior by doing:\n\n```bash\nnpm config set foo:port 80\n```\n\nSee [package.json](/cli/v7/configuring-npm/package-json) for more information.\n\n### Config Settings\n\n#### access\n\n* Default: `restricted`\n* Type: Access\n\nWhen publishing scoped packages, the access level defaults to `restricted`.  If\nyou want your scoped package to be publicly viewable (and installable) set\n`--access=public`. The only valid values for `access` are `public` and\n`restricted`. Unscoped packages _always_ have an access level of `public`.\n\n#### all\n\n* Default: `false`\n* Type: Boolean\n\nWhen running `npm outdated` and `npm ls`, setting `--all` will show all\noutdated or installed packages, rather than only those directly depended\nupon by the current project.\n\n#### allow-same-version\n\n* Default: false\n* Type: Boolean\n\nPrevents throwing an error when `npm version` is used to set the new version\nto the same value as the current version.\n\n#### always-auth\n\n* Default: false\n* Type: Boolean\n\nForce npm to always require authentication when accessing the registry,\neven for `GET` requests.\n\n#### also\n\n* Default: null\n* Type: String\n\nWhen \"dev\" or \"development\" and running local `npm shrinkwrap`,\n`npm outdated`, or `npm update`, is an alias for `--dev`.\n\n#### audit\n\n* Default: true\n* Type: Boolean\n\nWhen \"true\" submit audit reports alongside `npm install` runs to the default\nregistry and all registries configured for scopes.  See the documentation\nfor [`npm audit`](/cli/v7/commands/npm-audit) for details on what is submitted.\n\n#### audit-level\n\n* Default: `\"low\"`\n* Type: `'low'`, `'moderate'`, `'high'`, `'critical'`\n\nThe minimum level of vulnerability for `npm audit` to exit with\na non-zero exit code.\n\n#### auth-type\n\n* Default: `'legacy'`\n* Type: `'legacy'`, `'sso'`, `'saml'`, `'oauth'`\n\nWhat authentication strategy to use with `adduser`/`login`.\n\n#### before\n\n* Alias: enjoy-by\n* Default: null\n* Type: Date\n\nIf passed to `npm install`, will rebuild the npm tree such that only versions\nthat were available **on or before** the `--before` time get installed.\nIf there's no versions available for the current set of direct dependencies, the\ncommand will error.\n\nIf the requested version is a `dist-tag` and the given tag does not pass the\n`--before` filter, the most recent version less than or equal to that tag will\nbe used. For example, `foo@latest` might install `foo@1.2` even though `latest`\nis `2.0`.\n\n#### bin-links\n\n* Default: `true`\n* Type: Boolean\n\nTells npm to create symlinks (or `.cmd` shims on Windows) for package\nexecutables.\n\nSet to false to have it not do this.  This can be used to work around\nthe fact that some file systems don't support symlinks, even on\nostensibly Unix systems.\n\n#### browser\n\n* Default: OS X: `\"open\"`, Windows: `\"start\"`, Others: `\"xdg-open\"`\n* Type: String or Boolean\n\nThe browser that is called by npm commands to open websites.\n\nSet to `false` to suppress browser behavior and instead print urls to\nterminal.\n\nSet to `true` to use default system URL opener.\n\n#### ca\n\n* Default: The npm CA certificate\n* Type: String, Array or null\n\nThe Certificate Authority signing certificate that is trusted for SSL\nconnections to the registry. Values should be in PEM format (Windows calls it \"Base-64 encoded X.509 (.CER)\") with newlines\nreplaced by the string \"\\n\". For example:\n\n```bash\nca=\"-----BEGIN CERTIFICATE-----\\nXXXX\\nXXXX\\n-----END CERTIFICATE-----\"\n```\n\nSet to `null` to only allow \"known\" registrars, or to a specific CA cert\nto trust only that specific signing authority.\n\nMultiple CAs can be trusted by specifying an array of certificates:\n\n```bash\nca[]=\"...\"\nca[]=\"...\"\n```\n\nSee also the `strict-ssl` config.\n\n#### cafile\n\n* Default: `null`\n* Type: path\n\nA path to a file containing one or multiple Certificate Authority signing\ncertificates. Similar to the `ca` setting, but allows for multiple CA's, as\nwell as for the CA information to be stored in a file on disk.\n\n#### cache\n\n* Default: Windows: `%AppData%\\npm-cache`, Posix: `~/.npm`\n* Type: path\n\nThe location of npm's cache directory.  See [`npm cache`](/cli/v7/commands/npm-cache)\n\n#### cache-lock-stale\n\n* Default: 60000 (1 minute)\n* Type: Number\n\nThe number of ms before cache folder lockfiles are considered stale.\n\n#### cache-lock-retries\n\n* Default: 10\n* Type: Number\n\nNumber of times to retry to acquire a lock on cache folder lockfiles.\n\n#### cache-lock-wait\n\n* Default: 10000 (10 seconds)\n* Type: Number\n\nNumber of ms to wait for cache lock files to expire.\n\n#### cache-max\n\n* Default: Infinity\n* Type: Number\n\n**DEPRECATED**: This option has been deprecated in favor of `--prefer-online`.\n\n`--cache-max=0` is an alias for `--prefer-online`.\n\n#### cache-min\n\n* Default: 10\n* Type: Number\n\n**DEPRECATED**: This option has been deprecated in favor of `--prefer-offline`.\n\n`--cache-min=9999 (or bigger)` is an alias for `--prefer-offline`.\n\n#### cert\n\n* Default: `null`\n* Type: String\n\nA client certificate to pass when accessing the registry.  Values should be in\nPEM format (Windows calls it \"Base-64 encoded X.509 (.CER)\") with newlines replaced by the string \"\\n\". For example:\n\n```bash\ncert=\"-----BEGIN CERTIFICATE-----\\nXXXX\\nXXXX\\n-----END CERTIFICATE-----\"\n```\n\nIt is _not_ the path to a certificate file (and there is no \"certfile\" option).\n\n#### cidr\n\n* Default: `null`\n* Type: String, Array, null\n\nThis is a list of CIDR address to be used when configuring limited access tokens with the `npm token create` command.\n\n#### color\n\n* Default: true\n* Type: Boolean or `\"always\"`\n\nIf false, never shows colors.  If `\"always\"` then always shows colors.\nIf true, then only prints color codes for tty file descriptors.\n\nThis option can also be changed using the environment: colors are\ndisabled when the environment variable `NO_COLOR` is set to any value.\n\n#### depth\n\n* Default: 0\n* Type: Number\n\nThe depth to go when recursing packages for `npm ls`.\n\nTo make this default to `Infinity` instead of `0`, set `--all`.\n\n#### description\n\n* Default: true\n* Type: Boolean\n\nShow the description in `npm search`\n\n#### dev\n\n* Default: false\n* Type: Boolean\n\nInstall `dev-dependencies` along with packages.\n\n#### dry-run\n\n* Default: false\n* Type: Boolean\n\nIndicates that you don't want npm to make any changes and that it should\nonly report what it would have done.  This can be passed into any of the\ncommands that modify your local installation, eg, `install`, `update`,\n`dedupe`, `uninstall`.  This is NOT currently honored by some network related\ncommands, eg `dist-tags`, `owner`, etc.\n\n#### editor\n\n* Default: `EDITOR` environment variable if set, or `\"vi\"` on Posix,\n  or `\"notepad\"` on Windows.\n* Type: path\n\nThe command to run for `npm edit` or `npm config edit`.\n\n#### engine-strict\n\n* Default: false\n* Type: Boolean\n\nIf set to true, then npm will stubbornly refuse to install (or even\nconsider installing) any package that claims to not be compatible with\nthe current Node.js version.\n\n#### force\n\n* Default: false\n* Type: Boolean\n\nRemoves various protections against unfortunate side effects, common\nmistakes, unnecessary performance degradation, and malicious input.\n\n* Allow clobbering non-npm files in global installs.\n* Allow the `npm version` command to work on an unclean git repository.\n* Allow deleting the cache folder with `npm cache clean`.\n* Allow installing packages that have an `engines` declaration requiring a\n  different version of npm.\n* Allow installing packages that have an `engines` declaration requiring a\n  different version of `node`, even if `--engines-strict` is enabled.\n* Allow `npm audit fix` to install modules outside your stated dependency\n  range (including SemVer-major changes).\n* Allow a module to be installed as a direct dependency of itself.\n* Allow unpublishing all versions of a published package.\n\nIf you don't have a clear idea of what you want to do, it is strongly\nrecommended that you do not use this option!\n\n#### format-package-lock\n\n* Default: true\n* Type: Boolean\n\nFormat `package-lock.json` or `npm-shrinkwrap.json` as a human readable file.\n\n#### fetch-retries\n\n* Default: 2\n* Type: Number\n\nThe \"retries\" config for the `retry` module to use when fetching\npackages from the registry.\n\n#### fetch-retry-factor\n\n* Default: 10\n* Type: Number\n\nThe \"factor\" config for the `retry` module to use when fetching\npackages.\n\n#### fetch-retry-mintimeout\n\n* Default: 10000 (10 seconds)\n* Type: Number\n\nThe \"minTimeout\" config for the `retry` module to use when fetching\npackages.\n\n#### fetch-retry-maxtimeout\n\n* Default: 60000 (1 minute)\n* Type: Number\n\nThe \"maxTimeout\" config for the `retry` module to use when fetching\npackages.\n\n#### fund\n\n* Default: true\n* Type: Boolean\n\nWhen \"true\" displays the message at the end of each `npm install`\naknowledging the number of dependencies looking for funding.\nSee [`npm fund`](/cli/v7/commands/npm-fund) for details.\n\n#### git\n\n* Default: `\"git\"`\n* Type: String\n\nThe command to use for git commands.  If git is installed on the\ncomputer, but is not in the `PATH`, then set this to the full path to\nthe git binary.\n\n#### git-tag-version\n\n* Default: `true`\n* Type: Boolean\n\nTag the commit when using the `npm version` command.\n\n#### commit-hooks\n\n* Default: `true`\n* Type: Boolean\n\nRun git commit hooks when using the `npm version` command.\n\n#### global\n\n* Default: false\n* Type: Boolean\n\nOperates in \"global\" mode, so that packages are installed into the\n`prefix` folder instead of the current working directory.  See\n[folders](/cli/v7/configuring-npm/folders) for more on the differences in behavior.\n\n* packages are installed into the `{prefix}/lib/node_modules` folder, instead of the\n  current working directory.\n* bin files are linked to `{prefix}/bin`\n* man pages are linked to `{prefix}/share/man`\n\n#### globalconfig\n\n* Default: {prefix}/etc/npmrc\n* Type: path\n\nThe config file to read for global config options.\n\n#### global-style\n\n* Default: false\n* Type: Boolean\n\nCauses npm to install the package into your local `node_modules` folder with\nthe same layout it uses with the global `node_modules` folder.  Only your\ndirect dependencies will show in `node_modules` and everything they depend\non will be flattened in their `node_modules` folders.  This obviously will\neliminate some deduping. If used with `legacy-bundling`, `legacy-bundling` will be\npreferred.\n\n#### group\n\n* Default: GID of the current process\n* Type: String or Number\n\nThe group to use when running package scripts in global mode as the root\nuser.\n\n#### heading\n\n* Default: `\"npm\"`\n* Type: String\n\nThe string that starts all the debugging log output.\n\n#### https-proxy\n\n* Default: null\n* Type: url\n\nA proxy to use for outgoing https requests. If the `HTTPS_PROXY` or\n`https_proxy` or `HTTP_PROXY` or `http_proxy` environment variables are set,\nproxy settings will be honored by the underlying `request` library.\n\n#### if-present\n\n* Default: false\n* Type: Boolean\n\nIf true, npm will not exit with an error code when `run-script` is invoked for\na script that isn't defined in the `scripts` section of `package.json`. This\noption can be used when it's desirable to optionally run a script when it's\npresent and fail if the script fails. This is useful, for example, when running\nscripts that may only apply for some builds in an otherwise generic CI setup.\n\n#### ignore-prepublish\n\n* Default: false\n* Type: Boolean\n\nIf true, npm will not run `prepublish` scripts.\n\n#### ignore-scripts\n\n* Default: false\n* Type: Boolean\n\nIf true, npm does not run scripts specified in package.json files.\n\n#### init-module\n\n* Default: ~/.npm-init.js\n* Type: path\n\nA module that will be loaded by the `npm init` command.  See the\ndocumentation for the\n[init-package-json](https://github.com/isaacs/init-package-json) module\nfor more information, or [npm init](/cli/v7/commands/npm-init).\n\n#### init-author-name\n\n* Default: \"\"\n* Type: String\n\nThe value `npm init` should use by default for the package author's name.\n\n#### init-author-email\n\n* Default: \"\"\n* Type: String\n\nThe value `npm init` should use by default for the package author's email.\n\n#### init-author-url\n\n* Default: \"\"\n* Type: String\n\nThe value `npm init` should use by default for the package author's homepage.\n\n#### init-license\n\n* Default: \"ISC\"\n* Type: String\n\nThe value `npm init` should use by default for the package license.\n\n#### init-version\n\n* Default: \"1.0.0\"\n* Type: semver\n\nThe value that `npm init` should use by default for the package\nversion number, if not already set in package.json.\n\n#### json\n\n* Default: false\n* Type: Boolean\n\nWhether or not to output JSON data, rather than the normal output.\n\nThis feature is currently experimental, and the output data structures for many\ncommands is either not implemented in JSON yet, or subject to change.  Only the\noutput from `npm ls --json` and `npm search --json` are currently valid.\n\n#### key\n\n* Default: `null`\n* Type: String\n\nA client key to pass when accessing the registry.  Values should be in PEM\nformat with newlines replaced by the string \"\\n\". For example:\n\n```json\nkey=\"-----BEGIN PRIVATE KEY-----\\nXXXX\\nXXXX\\n-----END PRIVATE KEY-----\"\n```\n\nIt is _not_ the path to a key file (and there is no \"keyfile\" option).\n\n#### legacy-bundling\n\n* Default: false\n* Type: Boolean\n\nCauses npm to install the package such that versions of npm prior to 1.4,\nsuch as the one included with node 0.8, can install the package.  This\neliminates all automatic deduping. If used with `global-style` this option\nwill be preferred.\n\n#### legacy-peer-deps\n\n* Default: false\n* Type: Boolean\n\nCauses npm to completely ignore `peerDependencies` when building a package\ntree, as in npm versions 3 through 6.\n\nIf a package cannot be installed because of overly strict\n`peerDependencies` that collide, it provides a way to move forward\nresolving the situation.\n\nThis differs from `--omit=peer`, in that `--omit=peer` will avoid unpacking\n`peerDependencies` on disk, but will still design a tree such that\n`peerDependencies` _could_ be unpacked in a correct place.\n\nUse of `legacy-peer-deps` is not recommended, as it will not enforce the\n`peerDependencies` contract that meta-dependencies may rely on.\n\n#### link\n\n* Default: false\n* Type: Boolean\n\nIf true, then local installs will link if there is a suitable globally\ninstalled package.\n\nNote that this means that local installs can cause things to be\ninstalled into the global space at the same time.  The link is only done\nif one of the two conditions are met:\n\n* The package is not already installed globally, or\n* the globally installed version is identical to the version that is\n  being installed locally.\n\n#### local-address\n\n* Default: undefined\n* Type: IP Address\n\nThe IP address of the local interface to use when making connections\nto the npm registry.  Must be IPv4 in versions of Node prior to 0.12.\n\n#### loglevel\n\n* Default: \"notice\"\n* Type: String\n* Values: \"silent\", \"error\", \"warn\", \"notice\", \"http\", \"timing\", \"info\",\n  \"verbose\", \"silly\"\n\nWhat level of logs to report.  On failure, *all* logs are written to\n`npm-debug.log` in the current working directory.\n\nAny logs of a higher level than the setting are shown. The default is \"notice\".\n\n#### logs-max\n\n* Default: 10\n* Type: Number\n\nThe maximum number of log files to store.\n\n#### long\n\n* Default: false\n* Type: Boolean\n\nShow extended information in `npm ls` and `npm search`.\n\n#### maxsockets\n\n* Default: 50\n* Type: Number\n\nThe maximum number of connections to use per origin (protocol/host/port\ncombination). Passed to the `http` `Agent` used to make the request.\n\n#### message\n\n* Default: \"%s\"\n* Type: String\n\nCommit message which is used by `npm version` when creating version commit.\n\nAny \"%s\" in the message will be replaced with the version number.\n\n#### metrics-registry\n\n* Default: The value of  `registry` (which defaults to \"https://registry.npmjs.org/\")\n* Type: String\n\nThe registry you want to send cli metrics to if `send-metrics` is true.\n\n#### node-options\n\n* Default: null\n* Type: String\n\nOptions to pass through to Node.js via the `NODE_OPTIONS` environment\nvariable.  This does not impact how npm itself is executed but it does\nimpact how lifecycle scripts are called.\n\n#### node-version\n\n* Default: process.version\n* Type: semver or false\n\nThe node version to use when checking a package's `engines` map.\n\n#### noproxy\n\n* Default: null\n* Type: String or Array\n\nA comma-separated string or an array of domain extensions that a proxy should not be used for.\n\n#### offline\n\n* Default: false\n* Type: Boolean\n\nForce offline mode: no network requests will be done during install. To allow\nthe CLI to fill in missing cache data, see `--prefer-offline`.\n\n#### only\n\n* Default: null\n* Type: String\n\nWhen \"dev\" or \"development\" and running local `npm install` without any\narguments, only devDependencies (and their dependencies) are installed.\n\nWhen \"dev\" or \"development\" and running local `npm ls`, `npm outdated`, or\n`npm update`, is an alias for `--dev`.\n\nWhen \"prod\" or \"production\" and running local `npm install` without any\narguments, only non-devDependencies (and their dependencies) are\ninstalled.\n\nWhen \"prod\" or \"production\" and running local `npm ls`, `npm outdated`, or\n`npm update`, is an alias for `--production`.\n\n#### optional\n\n* Default: true\n* Type: Boolean\n\nAttempt to install packages in the `optionalDependencies` object.  Note\nthat if these packages fail to install, the overall installation\nprocess is not aborted.\n\n#### otp\n\n* Default: null\n* Type: Number\n\nThis is a one-time password from a two-factor authenticator.  It's needed\nwhen publishing or changing package permissions with `npm access`.\n\n#### package-lock\n\n* Default: true\n* Type: Boolean\n\nIf set to false, then ignore `package-lock.json` files when installing. This\nwill also prevent _writing_ `package-lock.json` if `save` is true.\n\nWhen package package-locks are disabled, automatic pruning of extraneous\nmodules will also be disabled.  To remove extraneous modules with\npackage-locks disabled use `npm prune`.\n\nThis option is an alias for `--shrinkwrap`.\n\n#### package-lock-only\n\n* Default: false\n* Type: Boolean\n\nIf set to true, it will update only the `package-lock.json`,\ninstead of checking `node_modules` and downloading dependencies.\n\n#### parseable\n\n* Default: false\n* Type: Boolean\n\nOutput parseable results from commands that write to\nstandard output. For `npm search`, this will be tab-separated table format.\n\n#### prefer-offline\n\n* Default: false\n* Type: Boolean\n\nIf true, staleness checks for cached data will be bypassed, but missing data\nwill be requested from the server. To force full offline mode, use `--offline`.\n\nThis option is effectively equivalent to `--cache-min=9999999`.\n\n#### prefer-online\n\n* Default: false\n* Type: Boolean\n\nIf true, staleness checks for cached data will be forced, making the CLI look\nfor updates immediately even for fresh package data.\n\n#### prefix\n\n* Default: see [folders](/cli/v7/configuring-npm/folders)\n* Type: path\n\nThe location to install global items.  If set on the command line, then\nit forces non-global commands to run in the specified folder.\n\n#### preid\n\n* Default: \"\"\n* Type: String\n\nThe \"prerelease identifier\" to use as a prefix for the \"prerelease\" part of a\nsemver. Like the `rc` in `1.2.0-rc.8`.\n\n#### production\n\n* Default: false\n* Type: Boolean\n\nSet to true to run in \"production\" mode.\n\n1. devDependencies are not installed at the topmost level when running\n   local `npm install` without any arguments.\n2. Set the NODE_ENV=\"production\" for lifecycle scripts.\n\n#### progress\n\n* Default: true, unless TRAVIS or CI env vars set.\n* Type: Boolean\n\nWhen set to `true`, npm will display a progress bar during time intensive\noperations, if `process.stderr` is a TTY.\n\nSet to `false` to suppress the progress bar.\n\n#### proxy\n\n* Default: null\n* Type: url\n\nA proxy to use for outgoing http requests. If the `HTTP_PROXY` or\n`http_proxy` environment variables are set, proxy settings will be\nhonored by the underlying `request` library.\n\n#### read-only\n\n* Default: false\n* Type: Boolean\n\nThis is used to mark a token as unable to publish when configuring limited access tokens with the `npm token create` command.\n\n#### rebuild-bundle\n\n* Default: true\n* Type: Boolean\n\nRebuild bundled dependencies after installation.\n\n#### registry\n\n* Default: https://registry.npmjs.org/\n* Type: url\n\nThe base URL of the npm package registry.\n\n#### rollback\n\n* Default: true\n* Type: Boolean\n\nRemove failed installs.\n\n#### save\n\n* Default: true\n* Type: Boolean\n\nSave installed packages to a package.json file as dependencies.\n\nWhen used with the `npm rm` command, it removes it from the `dependencies`\nobject.\n\nOnly works if there is already a package.json file present.\n\n#### save-bundle\n\n* Default: false\n* Type: Boolean\n\nIf a package would be saved at install time by the use of `--save`,\n`--save-dev`, or `--save-optional`, then also put it in the\n`bundleDependencies` list.\n\nWhen used with the `npm rm` command, it removes it from the\nbundledDependencies list.\n\n#### save-prod\n\n* Default: false\n* Type: Boolean\n\nMakes sure that a package will be saved into `dependencies` specifically. This\nis useful if a package already exists in `devDependencies` or\n`optionalDependencies`, but you want to move it to be a production dep. This is\nalso the default behavior if `--save` is true, and neither `--save-dev` or\n`--save-optional` are true.\n\n#### save-dev\n\n* Default: false\n* Type: Boolean\n\nSave installed packages to a package.json file as `devDependencies`.\n\nWhen used with the `npm rm` command, it removes it from the\n`devDependencies` object.\n\nOnly works if there is already a package.json file present.\n\n#### save-exact\n\n* Default: false\n* Type: Boolean\n\nDependencies saved to package.json using `--save`, `--save-dev` or\n`--save-optional` will be configured with an exact version rather than\nusing npm's default semver range operator.\n\n#### save-optional\n\n* Default: false\n* Type: Boolean\n\nSave installed packages to a package.json file as\noptionalDependencies.\n\nWhen used with the `npm rm` command, it removes it from the\n`devDependencies` object.\n\nOnly works if there is already a package.json file present.\n\n#### save-prefix\n\n* Default: '^'\n* Type: String\n\nConfigure how versions of packages installed to a package.json file via\n`--save` or `--save-dev` get prefixed.\n\nFor example if a package has version `1.2.3`, by default its version is\nset to `^1.2.3` which allows minor upgrades for that package, but after\n`npm config set save-prefix='~'` it would be set to `~1.2.3` which only allows\npatch upgrades.\n\n#### scope\n\n* Default: the scope of the current project, if any, or \"\"\n* Type: String\n\nAssociate an operation with a scope for a scoped registry. Useful when logging\nin to a private registry for the first time:\n`npm login --scope=@organization --registry=registry.organization.com`, which\nwill cause `@organization` to be mapped to the registry for future installation\nof packages specified according to the pattern `@organization/package`.\n\n#### script-shell\n\n* Default: `null`\n* Type: path\n\nThe shell to use for scripts run with the `npm run` command.\n\n#### scripts-prepend-node-path\n\n* Default: \"warn-only\"\n* Type: Boolean, `\"auto\"` or `\"warn-only\"`\n\nIf set to `true`, add the directory in which the current `node` executable\nresides to the `PATH` environment variable when running scripts,\neven if that means that `npm` will invoke a different `node` executable than\nthe one which it is running.\n\nIf set to `false`, never modify `PATH` with that.\n\nIf set to `\"warn-only\"`, never modify `PATH` but print a warning if `npm` thinks\nthat you may want to run it with `true`, e.g. because the `node` executable\nin the `PATH` is not the one `npm` was invoked with.\n\nIf set to `auto`, only add that directory to the `PATH` environment variable\nif the `node` executable with which `npm` was invoked and the one that is found\nfirst on the `PATH` are different.\n\n#### searchexclude\n\n* Default: \"\"\n* Type: String\n\nSpace-separated options that limit the results from search.\n\n#### searchopts\n\n* Default: \"\"\n* Type: String\n\nSpace-separated options that are always passed to search.\n\n#### searchlimit\n\n* Default: 20\n* Type: Number\n\nNumber of items to limit search results to. Will not apply at all to legacy\nsearches.\n\n#### searchstaleness\n\n* Default: 900 (15 minutes)\n* Type: Number\n\nThe age of the cache, in seconds, before another registry request is made if\nusing legacy search endpoint.\n\n#### send-metrics\n\n* Default: false\n* Type: Boolean\n\nIf true, success/failure metrics will be reported to the registry stored in\n`metrics-registry`.  These requests contain the number of successful and\nfailing runs of the npm CLI and the time period overwhich those counts were\ngathered. No identifying information is included in these requests.\n\n#### shell\n\n* Default: SHELL environment variable, or \"bash\" on Posix, or \"cmd\" on\n  Windows\n* Type: path\n\nThe shell to run for the `npm explore` command.\n\n#### shrinkwrap\n\n* Default: true\n* Type: Boolean\n\nIf set to false, then ignore `npm-shrinkwrap.json` files when installing. This\nwill also prevent _writing_ `npm-shrinkwrap.json` if `save` is true.\n\nThis option is an alias for `--package-lock`.\n\n#### sign-git-commit\n\n* Default: false\n* Type: Boolean\n\nIf set to true, then the `npm version` command will commit the new package\nversion using `-S` to add a signature.\n\nNote that git requires you to have set up GPG keys in your git configs\nfor this to work properly.\n\n#### sign-git-tag\n\n* Default: false\n* Type: Boolean\n\nIf set to true, then the `npm version` command will tag the version\nusing `-s` to add a signature.\n\nNote that git requires you to have set up GPG keys in your git configs\nfor this to work properly.\n\n#### sso-poll-frequency\n\n* Default: 500\n* Type: Number\n\nWhen used with SSO-enabled `auth-type`s, configures how regularly the registry\nshould be polled while the user is completing authentication.\n\n#### sso-type\n\n* Default: 'oauth'\n* Type: 'oauth', 'saml', or null\n\nIf `--auth-type=sso`, the type of SSO type to use.\n\n#### strict-ssl\n\n* Default: true\n* Type: Boolean\n\nWhether or not to do SSL key validation when making requests to the\nregistry via https.\n\nSee also the `ca` config.\n\n#### tag\n\n* Default: latest\n* Type: String\n\nIf you ask npm to install a package and don't tell it a specific version, then\nit will install the specified tag.\n\nAlso the tag that is added to the package@version specified by the `npm\ntag` command, if no explicit tag is given.\n\n#### tag-version-prefix\n\n* Default: `\"v\"`\n* Type: String\n\nIf set, alters the prefix used when tagging a new version when performing a\nversion increment using  `npm-version`. To remove the prefix altogether, set it\nto the empty string: `\"\"`.\n\nBecause other tools may rely on the convention that npm version tags look like\n`v1.0.0`, _only use this property if it is absolutely necessary_. In\nparticular, use care when overriding this setting for public packages.\n\n#### timing\n\n* Default: `false`\n* Type: Boolean\n\nIf true, writes an `npm-debug` log to `_logs` and timing information to\n`_timing.json`, both in your cache.  `_timing.json` is a newline delimited\nlist of JSON objects.  You can quickly view it with this\n[json](https://www.npmjs.com/package/json) command line:\n`json -g < ~/.npm/_timing.json`.\n\n#### tmp\n\n* Default: TMPDIR environment variable, or \"/tmp\"\n* Type: path\n\nWhere to store temporary files and folders.  All temp files are deleted\non success, but left behind on failure for forensic purposes.\n\n#### unicode\n\n* Default: false on windows, true on mac/unix systems with a unicode locale\n* Type: Boolean\n\nWhen set to true, npm uses unicode characters in the tree output.  When\nfalse, it uses ascii characters to draw trees.\n\n#### unsafe-perm\n\n* Default: false if running as root, true otherwise\n* Type: Boolean\n\nSet to true to suppress the UID/GID switching when running package\nscripts.  If set explicitly to false, then installing as a non-root user\nwill fail.\n\n#### update-notifier\n\n* Default: true\n* Type: Boolean\n\nSet to false to suppress the update notification when using an older\nversion of npm than the latest.\n\n#### usage\n\n* Default: false\n* Type: Boolean\n\nSet to show short usage output (like the -H output)\ninstead of complete help when doing [`npm help`](/cli/v7/commands/npm-help).\n\n#### user\n\n* Default: \"nobody\"\n* Type: String or Number\n\nThe UID to set to when running package scripts as root.\n\n#### userconfig\n\n* Default: ~/.npmrc\n* Type: path\n\nThe location of user-level configuration settings.\n\n#### umask\n\n* Default: 022\n* Type: Octal numeric string in range 0000..0777 (0..511)\n\nThe \"umask\" value to use when setting the file creation mode on files\nand folders.\n\nFolders and executables are given a mode which is `0777` masked against\nthis value.  Other files are given a mode which is `0666` masked against\nthis value.  Thus, the defaults are `0755` and `0644` respectively.\n\n#### user-agent\n\n* Default: node/{process.version} {process.platform} {process.arch}\n* Type: String\n\nSets a User-Agent to the request header\n\n#### version\n\n* Default: false\n* Type: boolean\n\nIf true, output the npm version and exit successfully.\n\nOnly relevant when specified explicitly on the command line.\n\n#### versions\n\n* Default: false\n* Type: boolean\n\nIf true, output the npm version as well as node's `process.versions` map, and\nexit successfully.\n\nOnly relevant when specified explicitly on the command line.\n\n#### viewer\n\n* Default: \"man\" on Posix, \"browser\" on Windows\n* Type: path\n\nThe program to use to view help content.\n\nSet to `\"browser\"` to view html help content in the default web browser.\n\n### See also\n\n* [npm config](/cli/v7/commands/npm-config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n* [npm scripts](/cli/v7/using-npm/scripts)\n* [npm folders](/cli/v7/configuring-npm/folders)\n* [npm](/cli/v7/commands/npm-npm)\n"},{"id":"a5d1b33b-39ab-5eed-85eb-5b47a6bed611","frontmatter":{"title":"developers"},"rawBody":"---\ntitle: developers\nsection: 7\ndescription: Developer Guide\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/using-npm/developers.md\n---\n\n### Description\n\nSo, you've decided to use npm to develop (and maybe publish/deploy)\nyour project.\n\nFantastic!\n\nThere are a few things that you need to do above the simple steps\nthat your users will do to install your program.\n\n### About These Documents\n\nThese are man pages.  If you install npm, you should be able to\nthen do `man npm-thing` to get the documentation on a particular\ntopic, or `npm help thing` to see the same information.\n\n### What is a package\n\nA package is:\n\n* a) a folder containing a program described by a package.json file\n* b) a gzipped tarball containing (a)\n* c) a url that resolves to (b)\n* d) a `<name>@<version>` that is published on the registry with (c)\n* e) a `<name>@<tag>` that points to (d)\n* f) a `<name>` that has a \"latest\" tag satisfying (e)\n* g) a `git` url that, when cloned, results in (a).\n\nEven if you never publish your package, you can still get a lot of\nbenefits of using npm if you just want to write a node program (a), and\nperhaps if you also want to be able to easily install it elsewhere\nafter packing it up into a tarball (b).\n\nGit urls can be of the form:\n\n```bash\ngit://github.com/user/project.git#commit-ish\ngit+ssh://user@hostname:project.git#commit-ish\ngit+http://user@hostname/project/blah.git#commit-ish\ngit+https://user@hostname/project/blah.git#commit-ish\n```\n\nThe `commit-ish` can be any tag, sha, or branch which can be supplied as\nan argument to `git checkout`.  The default is `master`.\n\n### The package.json File\n\nYou need to have a `package.json` file in the root of your project to do\nmuch of anything with npm.  That is basically the whole interface.\n\nSee [`package.json`](/cli/v7/configuring-npm/package-json) for details about what goes in that file.  At the very\nleast, you need:\n\n* name:\n  This should be a string that identifies your project.  Please do not\n  use the name to specify that it runs on node, or is in JavaScript.\n  You can use the \"engines\" field to explicitly state the versions of\n  node (or whatever else) that your program requires, and it's pretty\n  well assumed that it's JavaScript.\n\n  It does not necessarily need to match your github repository name.\n\n  So, `node-foo` and `bar-js` are bad names.  `foo` or `bar` are better.\n\n* version:\n  A semver-compatible version.\n\n* engines:\n  Specify the versions of node (or whatever else) that your program\n  runs on.  The node API changes a lot, and there may be bugs or new\n  functionality that you depend on.  Be explicit.\n\n* author:\n  Take some credit.\n\n* scripts:\n  If you have a special compilation or installation script, then you\n  should put it in the `scripts` object.  You should definitely have at\n  least a basic smoke-test command as the \"scripts.test\" field.\n  See [scripts](/cli/v7/using-npm/scripts).\n\n* main:\n  If you have a single module that serves as the entry point to your\n  program (like what the \"foo\" package gives you at require(\"foo\")),\n  then you need to specify that in the \"main\" field.\n\n* directories:\n  This is an object mapping names to folders.  The best ones to include are\n  \"lib\" and \"doc\", but if you use \"man\" to specify a folder full of man pages,\n  they'll get installed just like these ones.\n\nYou can use `npm init` in the root of your package in order to get you\nstarted with a pretty basic package.json file.  See [`npm init`](/cli/v7/commands/npm-npm-init) for\nmore info.\n\n### Keeping files *out* of your package\n\nUse a `.npmignore` file to keep stuff out of your package.  If there's\nno `.npmignore` file, but there *is* a `.gitignore` file, then npm will\nignore the stuff matched by the `.gitignore` file.  If you *want* to\ninclude something that is excluded by your `.gitignore` file, you can\ncreate an empty `.npmignore` file to override it. Like `git`, `npm` looks\nfor `.npmignore` and `.gitignore` files in all subdirectories of your\npackage, not only the root directory.\n\n`.npmignore` files follow the [same pattern rules](https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository#Ignoring-Files)\nas `.gitignore` files:\n\n* Blank lines or lines starting with `#` are ignored.\n* Standard glob patterns work.\n* You can end patterns with a forward slash `/` to specify a directory.\n* You can negate a pattern by starting it with an exclamation point `!`.\n\nBy default, the following paths and files are ignored, so there's no\nneed to add them to `.npmignore` explicitly:\n\n* `.*.swp`\n* `._*`\n* `.DS_Store`\n* `.git`\n* `.hg`\n* `.npmrc`\n* `.lock-wscript`\n* `.svn`\n* `.wafpickle-*`\n* `config.gypi`\n* `CVS`\n* `npm-debug.log`\n\nAdditionally, everything in `node_modules` is ignored, except for\nbundled dependencies. npm automatically handles this for you, so don't\nbother adding `node_modules` to `.npmignore`.\n\nThe following paths and files are never ignored, so adding them to\n`.npmignore` is pointless:\n\n* `package.json`\n* `README` (and its variants)\n* `CHANGELOG` (and its variants)\n* `LICENSE` / `LICENCE`\n\nIf, given the structure of your project, you find `.npmignore` to be a\nmaintenance headache, you might instead try populating the `files`\nproperty of `package.json`, which is an array of file or directory names\nthat should be included in your package. Sometimes a whitelist is easier\nto manage than a blacklist.\n\n#### Testing whether your `.npmignore` or `files` config works\n\nIf you want to double check that your package will include only the files\nyou intend it to when published, you can run the `npm pack` command locally\nwhich will generate a tarball in the working directory, the same way it\ndoes for publishing.\n\n### Link Packages\n\n`npm link` is designed to install a development package and see the\nchanges in real time without having to keep re-installing it.  (You do\nneed to either re-link or `npm rebuild -g` to update compiled packages,\nof course.)\n\nMore info at [`npm link`](/cli/v7/commands/npm-npm-link).\n\n### Before Publishing: Make Sure Your Package Installs and Works\n\n**This is important.**\n\nIf you can not install it locally, you'll have\nproblems trying to publish it.  Or, worse yet, you'll be able to\npublish it, but you'll be publishing a broken or pointless package.\nSo don't do that.\n\nIn the root of your package, do this:\n\n```bash\nnpm install . -g\n```\n\nThat'll show you that it's working.  If you'd rather just create a symlink\npackage that points to your working directory, then do this:\n\n```bash\nnpm link\n```\n\nUse `npm ls -g` to see if it's there.\n\nTo test a local install, go into some other folder, and then do:\n\n```bash\ncd ../some-other-folder\nnpm install ../my-package\n```\n\nto install it locally into the node_modules folder in that other place.\n\nThen go into the node-repl, and try using require(\"my-thing\") to\nbring in your module's main module.\n\n### Create a User Account\n\nCreate a user with the adduser command.  It works like this:\n\n```bash\nnpm adduser\n```\n\nand then follow the prompts.\n\nThis is documented better in [npm adduser](/cli/v7/commands/npm-npm-adduser).\n\n### Publish your package\n\nThis part's easy.  In the root of your folder, do this:\n\n```bash\nnpm publish\n```\n\nYou can give publish a url to a tarball, or a filename of a tarball,\nor a path to a folder.\n\nNote that pretty much **everything in that folder will be exposed**\nby default.  So, if you have secret stuff in there, use a\n`.npmignore` file to list out the globs to ignore, or publish\nfrom a fresh checkout.\n\n### Brag about it\n\nSend emails, write blogs, blab in IRC.\n\nTell the world how easy it is to install your program!\n\n### See also\n\n* [npm](/cli/v7/commands/npm-npm)\n* [npm init](/cli/v7/commands/npm-npm-init)\n* [package.json](/cli/v7/configuring-npm/package-json)\n* [npm scripts](/cli/v7/using-npm/scripts)\n* [npm publish](/cli/v7/commands/npm-npm-publish)\n* [npm adduser](/cli/v7/commands/npm-npm-adduser)\n* [npm registry](/cli/v7/using-npm/registry)\n"},{"id":"66019b56-d322-54c9-88c7-eab97a553f21","frontmatter":{"title":"disputes"},"rawBody":"---\ntitle: disputes\nsection: 7\ndescription: Handling Module Name Disputes\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/using-npm/disputes.md\n---\n\nThis document describes the steps that you should take to resolve module name\ndisputes with other npm publishers. It also describes special steps you should\ntake about names you think infringe your trademarks.\n\nThis document is a clarification of the acceptable behavior outlined in the\n[npm Code of Conduct](https://www.npmjs.com/policies/conduct), and nothing in\nthis document should be interpreted to contradict any aspect of the npm Code of\nConduct.\n\n### TL;DR\n\n1. Get the author email with `npm owner ls <pkgname>`\n2. Email the author, CC <support@npmjs.com>\n3. After a few weeks, if there's no resolution, we'll sort it out.\n\nDon't squat on package names.  Publish code or move out of the way.\n\n### Description\n\nThere sometimes arise cases where a user publishes a module, and then later,\nsome other user wants to use that name. Here are some common ways that happens\n(each of these is based on actual events.)\n\n1. Alice writes a JavaScript module `foo`, which is not node-specific. Alice\n   doesn't use node at all. Yusuf wants to use `foo` in node, so he wraps it in\n   an npm module. Some time later, Alice starts using node, and wants to take\n   over management of her program.\n2. Yusuf writes an npm module `foo`, and publishes it. Perhaps much later, Alice\n   finds a bug in `foo`, and fixes it. She sends a pull request to Yusuf, but\n   Yusuf doesn't have the time to deal with it, because he has a new job and a\n   new baby and is focused on his new Erlang project, and kind of not involved\n   with node any more. Alice would like to publish a new `foo`, but can't,\n   because the name is taken.\n3. Yusuf writes a 10-line flow-control library, and calls it `foo`, and\n   publishes it to the npm registry. Being a simple little thing, it never\n   really has to be updated. Alice works for Foo Inc, the makers of the\n   critically acclaimed and widely-marketed `foo` JavaScript toolkit framework.\n   They publish it to npm as `foojs`, but people are routinely confused when\n   `npm install foo` is some different thing.\n4. Yusuf writes a parser for the widely-known `foo` file format, because he\n   needs it for work. Then, he gets a new job, and never updates the prototype.\n   Later on, Alice writes a much more complete `foo` parser, but can't publish,\n   because Yusuf's `foo` is in the way.\n\n1. `npm owner ls foo`. This will tell Alice the email address of the owner\n   (Yusuf).\n2. Alice emails Yusuf, explaining the situation **as respectfully as possible**,\n   and what she would like to do with the module name. She adds the npm support\n   staff <support@npmjs.com> to the CC list of the email. Mention in the email\n   that Yusuf can run npm owner `add alice foo` to add Alice as an owner of the\n   foo package.\n3. After a reasonable amount of time, if Yusuf has not responded, or if Yusuf\n   and Alice can't come to any sort of resolution, email support\n   <support@npmjs.com> and we'll sort it out. (\"Reasonable\" is usually at least\n   4 weeks.)\n\n### Reasoning\n\nIn almost every case so far, the parties involved have been able to reach an\namicable resolution without any major intervention. Most people really do want\nto be reasonable, and are probably not even aware that they're in your way.\n\nModule ecosystems are most vibrant and powerful when they are as self-directed\nas possible. If an admin one day deletes something you had worked on, then that\nis going to make most people quite upset, regardless of the justification. When\nhumans solve their problems by talking to other humans with respect, everyone\nhas the chance to end up feeling good about the interaction.\n\n### Exceptions\n\nSome things are not allowed, and will be removed without discussion if they are\nbrought to the attention of the npm registry admins, including but not limited\nto:\n\n1. Malware (that is, a package designed to exploit or harm the machine on which\n   it is installed).\n2. Violations of copyright or licenses (for example, cloning an MIT-licensed\n   program, and then removing or changing the copyright and license statement).\n3. Illegal content.\n4. \"Squatting\" on a package name that you plan to use, but aren't actually\n   using. Sorry, I don't care how great the name is, or how perfect a fit it is\n   for the thing that someday might happen. If someone wants to use it today,\n   and you're just taking up space with an empty tarball, you're going to be\n   evicted.\n5. Putting empty packages in the registry. Packages must have SOME\n   functionality. It can be silly, but it can't be nothing. (See also:\n   squatting.)\n6. Doing weird things with the registry, like using it as your own personal\n   application database or otherwise putting non-packagey things into it.\n7. Other things forbidden by the npm\n   [Code of Conduct](https://www.npmjs.com/policies/conduct) such as hateful\n   language, pornographic content, or harassment.\n\nIf you see bad behavior like this, please report it to <abuse@npmjs.com> right\naway. **You are never expected to resolve abusive behavior on your own. We are\nhere to help.**\n\n### Trademarks\n\nIf you think another npm publisher is infringing your trademark, such as by\nusing a confusingly similar package name, email <abuse@npmjs.com> with a link to\nthe package or user account on [https://www.npmjs.com/](https://www.npmjs.com/).\nAttach a copy of your trademark registration certificate.\n\nIf we see that the package's publisher is intentionally misleading others by\nmisusing your registered mark without permission, we will transfer the package\nname to you. Otherwise, we will contact the package publisher and ask them to\nclear up any confusion with changes to their package's `README` file or\nmetadata.\n\n### Changes\n\nThis is a living document and may be updated from time to time. Please refer to\nthe [git history for this document](https://github.com/npm/cli/commits/latest/doc/misc/npm-disputes.md)\nto view the changes.\n\n### License\n\nCopyright (C) npm, Inc., All rights reserved\n\nThis document may be reused under a Creative Commons Attribution-ShareAlike\nLicense.\n\n### See also\n\n* [npm registry](/cli/v7/using-npm/registry)\n* [npm owner](/cli/v7/commands/npm-owner)\n"},{"id":"164ebdc3-0327-5e83-a3eb-eb7c7ece7890","frontmatter":{"title":"Using npm"},"rawBody":"---\ntitle: Using npm\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/using-npm/index.mdx\n---\n\n<Index depth=\"1\" />\n"},{"id":"69ffd118-9ebd-5bbf-89a2-e2a06aab83f8","frontmatter":{"title":"orgs"},"rawBody":"---\ntitle: orgs\nsection: 7\ndescription: Working with Teams & Orgs\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/using-npm/orgs.md\n---\n\n### Description\n\nThere are three levels of org users:\n\n1. Super admin, controls billing & adding people to the org.\n2. Team admin, manages team membership & package access.\n3. Developer, works on packages they are given access to.  \n\nThe super admin is the only person who can add users to the org because it impacts the monthly bill. The super admin will use the website to manage membership. Every org has a `developers` team that all users are automatically added to.\n\nThe team admin is the person who manages team creation, team membership, and package access for teams. The team admin grants package access to teams, not individuals.\n\nThe developer will be able to access packages based on the teams they are on. Access is either read-write or read-only.\n\nThere are two main commands:\n\n1. `npm team` see [npm team](/cli/v7/commands/npm-team) for more details\n2. `npm access` see [npm access](/cli/v7/commands/npm-access) for more details\n\n### Team Admins create teams\n\n* Check who you’ve added to your org:\n\n```bash\nnpm team ls <org>:developers\n```\n\n* Each org is automatically given a `developers` team, so you can see the whole list of team members in your org. This team automatically gets read-write access to all packages, but you can change that with the `access` command.\n\n* Create a new team:\n\n```bash\nnpm team create <org:team>\n```\n\n* Add members to that team:\n\n```bash\nnpm team add <org:team> <user>\n```\n\n### Publish a package and adjust package access\n\n* In package directory, run\n\n```bash\nnpm init --scope=<org>\n```\nto scope it for your org & publish as usual\n\n* Grant access:  \n\n```bash\nnpm access grant <read-only|read-write> <org:team> [<package>]\n```\n\n* Revoke access:\n\n```bash\nnpm access revoke <org:team> [<package>]\n```\n\n### Monitor your package access\n\n* See what org packages a team member can access:\n\n```bash\nnpm access ls-packages <org> <user>\n```\n\n* See packages available to a specific team:\n\n```bash\nnpm access ls-packages <org:team>\n```\n\n* Check which teams are collaborating on a package:\n\n```bash\nnpm access ls-collaborators <pkg>\n```\n\n### See also\n\n* [npm team](/cli/v7/commands/npm-team)\n* [npm access](/cli/v7/commands/npm-access)\n* [npm scope](/cli/v7/using-npm/scope)\n"},{"id":"6e5f4e6c-c2cd-5a18-8afb-8822b2510cac","frontmatter":{"title":"registry"},"rawBody":"---\ntitle: registry\nsection: 7\ndescription: The JavaScript Package Registry\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/using-npm/registry.md\n---\n\n### Description\n\nTo resolve packages by name and version, npm talks to a registry website\nthat implements the CommonJS Package Registry specification for reading\npackage info.\n\nnpm is configured to use npm, Inc.'s public registry at\n<https://registry.npmjs.org> by default. Use of the npm public registry is\nsubject to terms of use available at <https://www.npmjs.com/policies/terms>.\n\nYou can configure npm to use any compatible registry you like, and even run\nyour own registry. Use of someone else's registry may be governed by their\nterms of use.\n\nnpm's package registry implementation supports several\nwrite APIs as well, to allow for publishing packages and managing user\naccount information.\n\nThe npm public registry is powered by a CouchDB database,\nof which there is a public mirror at\n<https://skimdb.npmjs.com/registry>.  The code for the couchapp is\navailable at <https://github.com/npm/npm-registry-couchapp>.\n\nThe registry URL used is determined by the scope of the package (see\n[`scope`](/cli/v7/using-npm/scope). If no scope is specified, the default registry is used, which is\nsupplied by the `registry` config parameter.  See [`npm config`](/cli/v7/commands/npm-config),\n[`npmrc`](/cli/v7/configuring-npm/npmrc), and [`config`](/cli/v7/using-npm/config) for more on managing npm's configuration.\n\n### Does npm send any information about me back to the registry?\n\nYes.\n\nWhen making requests of the registry npm adds two headers with information\nabout your environment:\n\n* `Npm-Scope` – If your project is scoped, this header will contain its\n  scope. In the future npm hopes to build registry features that use this\n  information to allow you to customize your experience for your\n  organization.\n* `Npm-In-CI` – Set to \"true\" if npm believes this install is running in a\n  continuous integration environment, \"false\" otherwise. This is detected by\n  looking for the following environment variables: `CI`, `TDDIUM`,\n  `JENKINS_URL`, `bamboo.buildKey`. If you'd like to learn more you may find\n  the [original PR](https://github.com/npm/npm-registry-client/pull/129)\n  interesting.\n  This is used to gather better metrics on how npm is used by humans, versus\n  build farms.\n\nThe npm registry does not try to correlate the information in these headers\nwith any authenticated accounts that may be used in the same requests.\n\n### Can I run my own private registry?\n\nYes!\n\nThe easiest way is to replicate the couch database, and use the same (or\nsimilar) design doc to implement the APIs.\n\nIf you set up continuous replication from the official CouchDB, and then\nset your internal CouchDB as the registry config, then you'll be able\nto read any published packages, in addition to your private ones, and by\ndefault will only publish internally. \n\nIf you then want to publish a package for the whole world to see, you can\nsimply override the `--registry` option for that `publish` command.\n\n### I don't want my package published in the official registry. It's private.\n\nSet `\"private\": true` in your package.json to prevent it from being\npublished at all, or\n`\"publishConfig\":{\"registry\":\"http://my-internal-registry.local\"}`\nto force it to be published only to your internal registry.\n\nSee [`package.json`](/cli/v7/configuring-npm/package-json) for more info on what goes in the package.json file.\n\n### Will you replicate from my registry into the public one?\n\nNo.  If you want things to be public, then publish them into the public\nregistry using npm.  What little security there is would be for nought\notherwise.\n\n### Do I have to use couchdb to build a registry that npm can talk to?\n\nNo, but it's way easier.  Basically, yes, you do, or you have to\neffectively implement the entire CouchDB API anyway.\n\n### Is there a website or something to see package docs and such?\n\nYes, head over to <https://www.npmjs.com/>\n\n### See also\n\n* [npm config](/cli/v7/commands/npm-config)\n* [config](/cli/v7/using-npm/config)\n* [npmrc](/cli/v7/configuring-npm/npmrc)\n* [npm developers](/cli/v7/using-npm/developers)\n* [npm disputes](/cli/v7/using-npm/disputes)\n"},{"id":"ebb1f7c2-3f53-5025-afd4-4ad0d15d5e09","frontmatter":{"title":"removal"},"rawBody":"---\ntitle: removal\nsection: 7\ndescription: Cleaning the Slate\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/using-npm/removal.md\n---\n\n### Synopsis\n\nSo sad to see you go.\n\n```bash\nsudo npm uninstall npm -g\n```\n\nOr, if that fails, get the npm source code, and do:\n\n```bash\nsudo make uninstall\n```\n\n### More Severe Uninstalling\n\nUsually, the above instructions are sufficient.  That will remove\nnpm, but leave behind anything you've installed.\n\nIf that doesn't work, or if you require more drastic measures,\ncontinue reading.\n\nNote that this is only necessary for globally-installed packages.  Local\ninstalls are completely contained within a project's `node_modules`\nfolder.  Delete that folder, and everything is gone less a package's\ninstall script is particularly ill-behaved).\n\nThis assumes that you installed node and npm in the default place.  If\nyou configured node with a different `--prefix`, or installed npm with a\ndifferent prefix setting, then adjust the paths accordingly, replacing\n`/usr/local` with your install prefix.\n\nTo remove everything npm-related manually:\n\n```bash\nrm -rf /usr/local/{lib/node{,/.npm,_modules},bin,share/man}/npm*\n```\n\nIf you installed things *with* npm, then your best bet is to uninstall\nthem with npm first, and then install them again once you have a\nproper install.  This can help find any symlinks that are lying\naround:\n\n```bash\nls -laF /usr/local/{lib/node{,/.npm},bin,share/man} | grep npm\n```\n\nPrior to version 0.3, npm used shim files for executables and node\nmodules.  To track those down, you can do the following:\n\n```bash\nfind /usr/local/{lib/node,bin} -exec grep -l npm \\{\\} \\; ;\n```\n\n(This is also in the README file.)\n\n### See also\n\n* [npm uninstall](/cli/v7/commands/npm-uninstall)\n* [npm prune](/cli/v7/commands/npm-prune)\n"},{"id":"c44adc73-8011-526b-96ac-ab542498101a","frontmatter":{"title":"scope"},"rawBody":"---\ntitle: scope\nsection: 7\ndescription: Scoped packages\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/using-npm/scope.md\n---\n\n### Description\n\nAll npm packages have a name. Some package names also have a scope. A scope\nfollows the usual rules for package names (URL-safe characters, no leading dots\nor underscores). When used in package names, scopes are preceded by an `@` symbol\nand followed by a slash, e.g.\n\n```bash\n@somescope/somepackagename\n```\n\nScopes are a way of grouping related packages together, and also affect a few\nthings about the way npm treats the package.\n\nEach npm user/organization has their own scope, and only you can add packages\nin your scope. This means you don't have to worry about someone taking your\npackage name ahead of you. Thus it is also a good way to signal official packages\nfor organizations.\n\nScoped packages can be published and installed as of `npm@2` and are supported\nby the primary npm registry. Unscoped packages can depend on scoped packages and\nvice versa. The npm client is backwards-compatible with unscoped registries,\nso it can be used to work with scoped and unscoped registries at the same time.\n\n### Installing scoped packages\n\nScoped packages are installed to a sub-folder of the regular installation\nfolder, e.g. if your other packages are installed in `node_modules/packagename`,\nscoped modules will be installed in `node_modules/@myorg/packagename`. The scope\nfolder (`@myorg`) is simply the name of the scope preceded by an `@` symbol, and can\ncontain any number of scoped packages.\n\nA scoped package is installed by referencing it by name, preceded by an\n`@` symbol, in `npm install`:\n\n```bash\nnpm install @myorg/mypackage\n```\n\nOr in `package.json`:\n\n```json\n\"dependencies\": {\n  \"@myorg/mypackage\": \"^1.3.0\"\n}\n```\n\nNote that if the `@` symbol is omitted, in either case, npm will instead attempt to\ninstall from GitHub; see [`npm install`](/cli/v7/commands/npm-install).\n\n### Requiring scoped packages\n\nBecause scoped packages are installed into a scope folder, you have to\ninclude the name of the scope when requiring them in your code, e.g.\n\n```javascript\nrequire('@myorg/mypackage')\n```\n\nThere is nothing special about the way Node treats scope folders. This\nsimply requires the `mypackage` module in the folder named `@myorg`.\n\n### Publishing scoped packages\n\nScoped packages can be published from the CLI as of `npm@2` and can be\npublished to any registry that supports them, including the primary npm\nregistry.\n\n(As of 2015-04-19, and with npm 2.0 or better, the primary npm registry\n**does** support scoped packages.)\n\nIf you wish, you may associate a scope with a registry; see below.\n\n#### Publishing public scoped packages to the primary npm registry\n\nTo publish a public scoped package, you must specify `--access public` with\nthe initial publication. This will publish the package and set access\nto `public` as if you had run `npm access public` after publishing.\n\n#### Publishing private scoped packages to the npm registry\n\nTo publish a private scoped package to the npm registry, you must have\nan [npm Private Modules](https://docs.npmjs.com/private-modules/intro)\naccount.\n\nYou can then publish the module with `npm publish` or `npm publish\n--access restricted`, and it will be present in the npm registry, with\nrestricted access. You can then change the access permissions, if\ndesired, with `npm access` or on the npmjs.com website.\n\n### Associating a scope with a registry\n\nScopes can be associated with a separate registry. This allows you to\nseamlessly use a mix of packages from the primary npm registry and one or more\nprivate registries, such as npm Enterprise.\n\nYou can associate a scope with a registry at login, e.g.\n\n```bash\nnpm login --registry=http://reg.example.com --scope=@myco\n```\n\nScopes have a many-to-one relationship with registries: one registry can\nhost multiple scopes, but a scope only ever points to one registry.\n\nYou can also associate a scope with a registry using `npm config`:\n\n```bash\nnpm config set @myco:registry http://reg.example.com\n```\n\nOnce a scope is associated with a registry, any `npm install` for a package\nwith that scope will request packages from that registry instead. Any\n`npm publish` for a package name that contains the scope will be published to\nthat registry instead.\n\n### See also\n\n* [npm install](/cli/v7/commands/npm-install)\n* [npm publish](/cli/v7/commands/npm-publish)\n* [npm access](/cli/v7/commands/npm-access)\n* [npm registry](/cli/v7/using-npm/registry)\n"},{"id":"89e71711-8ca2-5444-9e80-3009de874c75","frontmatter":{"title":"scripts"},"rawBody":"---\ntitle: scripts\nsection: 7\ndescription: How npm handles the \"scripts\" field\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/using-npm/scripts.md\n---\n\n### Description\n\nThe `\"scripts\"` property of of your `package.json` file supports a number of built-in scripts and their preset life cycle events as well as arbitrary scripts. These all can be executed by running `npm run-script <stage>` or `npm run <stage>` for short. *Pre* and *post* commands with matching names will be run for those as well (e.g. `premyscript`, `myscript`, `postmyscript`). Scripts from dependencies can be run with `npm explore <pkg> -- npm run <stage>`.\n\n### Pre & Post Scripts\n\nTo create \"pre\" or \"post\" scripts for any scripts defined in the `\"scripts\"` section of the `package.json`, simply create another script *with a matching name* and add \"pre\" or \"post\" to the beginning of them.\n\n```json\n{\n  \"scripts\": {\n    \"precompress\": \"{{ executes BEFORE the `compress` script }}\",\n    \"compress\": \"{{ run command to compress files }}\",\n    \"postcompress\": \"{{ executes AFTER `compress` script }}\"\n  }\n}\n```\n\n### Life Cycle Scripts\n\nThere are some special life cycle scripts that happen only in certain situations. These scripts happen in addtion to the \"pre\" and \"post\" script.\n* `prepare`, `prepublish`, `prepublishOnly`, `prepack`, `postpack`\n\n**prepare** (since `npm@4.0.0`)\n* Runs BEFORE the package is packed\n* Runs BEFORE the package is published\n* Runs on local `npm install` without any arguments\n* Run AFTER `prepublish`, but BEFORE `prepublishOnly`\n* NOTE: If a package being installed through git contains a `prepare` script, its `dependencies` and `devDependencies` will be installed, and the prepare script will be run, before the package is packaged and installed.\n\n**prepublish** (DEPRECATED)\n* Same as `prepare`\n\n**prepublishOnly**\n* Runs BEFORE the package is prepared and packed, ONLY on `npm publish`.\n\n**prepack**\n* Runs BEFORE a tarball is packed (on \"`npm pack`\", \"`npm publish`\", and when installing a git dependencies).\n* NOTE: \"`npm run pack`\" is NOT the same as \"`npm pack`\". \"`npm run pack`\" is an arbitrary user defined script name, where as, \"`npm pack`\" is a CLI defined command.\n\n**postpack**\n* Runs AFTER the tarball has been generated and moved to its final destination.\n\n#### Prepare and Prepublish\n\n**Deprecation Note: prepublish**\n\nSince `npm@1.1.71`, the npm CLI has run the `prepublish` script for both `npm publish` and `npm install`, because it's a convenient way to prepare a package for use (some common use cases are described in the section below).  It has also turned out to be, in practice, [very confusing](https://github.com/npm/npm/issues/10074).  As of `npm@4.0.0`, a new event has been introduced, `prepare`, that preserves this existing behavior. A _new_ event, `prepublishOnly` has been added as a transitional strategy to allow users to avoid the confusing behavior of existing npm versions and only run on `npm publish` (for instance, running the tests one last time to ensure they're in good shape).\n\nSee <https://github.com/npm/npm/issues/10074> for a much lengthier justification, with further reading, for this change.\n\n**Use Cases**\n\nIf you need to perform operations on your package before it is used, in a way that is not dependent on the operating system or architecture of the target system, use a `prepublish` script. This includes tasks such as:\n\n* Compiling CoffeeScript source code into JavaScript.\n* Creating minified versions of JavaScript source code.\n* Fetching remote resources that your package will use.\n\nThe advantage of doing these things at `prepublish` time is that they can be done once, in a single place, thus reducing complexity and variability. Additionally, this means that:\n\n* You can depend on `coffee-script` as a `devDependency`, and thus\n  your users don't need to have it installed.\n* You don't need to include minifiers in your package, reducing\n  the size for your users.\n* You don't need to rely on your users having `curl` or `wget` or\n  other system tools on the target machines.\n\n### Life Cycle Operation Order\n\n#### [`npm publish`](/cli/v7/commands/npm-publish)\n\n* `prepublishOnly`\n* `prepare`\n* `prepublish`\n* `publish`\n* `postpublish`\n\n#### [`npm pack`](/cli/v7/commands/npm-pack)\n\n* `prepack`\n* `postpack`\n\n#### [`npm install`](/cli/v7/commands/npm-install)\n\n* `preinstall`\n* `install`\n* `postinstall`\n\nAlso triggers\n\n* `prepublish` (when on local)\n* `prepare` (when on local)\n\n#### [`npm start`](/cli/v7/commands/npm-start)\n\n`npm run start` has an `npm start` shorthand.\n\n* `prestart`\n* `start`\n* `poststart`\n\n### Default Values\nnpm will default some script values based on package contents.\n\n* `\"start\": \"node server.js\"`:\n\n  If there is a `server.js` file in the root of your package, then npm\n  will default the `start` command to `node server.js`.\n\n* `\"install\": \"node-gyp rebuild\"`:\n\n  If there is a `binding.gyp` file in the root of your package and you\n  haven't defined your own `install` or `preinstall` scripts, npm will\n  default the `install` command to compile using node-gyp.\n\n### User\n\nIf npm was invoked with root privileges, then it will change the uid\nto the user account or uid specified by the `user` config, which\ndefaults to `nobody`.  Set the `unsafe-perm` flag to run scripts with\nroot privileges.\n\n### Environment\n\nPackage scripts run in an environment where many pieces of information\nare made available regarding the setup of npm and the current state of\nthe process.\n\n\n#### path\n\nIf you depend on modules that define executable scripts, like test\nsuites, then those executables will be added to the `PATH` for\nexecuting the scripts.  So, if your package.json has this:\n\n```json\n{ \n  \"name\" : \"foo\", \n  \"dependencies\" : { \n    \"bar\" : \"0.1.x\" \n  }, \n  \"scripts\": { \n    \"start\" : \"bar ./test\" \n  } \n}\n```\n\nthen you could run `npm start` to execute the `bar` script, which is\nexported into the `node_modules/.bin` directory on `npm install`.\n\n#### package.json vars\n\nThe package.json fields are tacked onto the `npm_package_` prefix. So,\nfor instance, if you had `{\"name\":\"foo\", \"version\":\"1.2.5\"}` in your\npackage.json file, then your package scripts would have the\n`npm_package_name` environment variable set to \"foo\", and the\n`npm_package_version` set to \"1.2.5\".  You can access these variables \nin your code with `process.env.npm_package_name` and \n`process.env.npm_package_version`, and so on for other fields.\n\n#### configuration\n\nConfiguration parameters are put in the environment with the\n`npm_config_` prefix. For instance, you can view the effective `root`\nconfig by checking the `npm_config_root` environment variable.\n\n#### Special: package.json \"config\" object\n\nThe package.json \"config\" keys are overwritten in the environment if\nthere is a config param of `<name>[@<version>]:<key>`.  For example,\nif the package.json has this:\n\n```json\n{ \n  \"name\" : \"foo\", \n  \"config\" : { \n    \"port\" : \"8080\" \n  }, \n  \"scripts\" : { \n    \"start\" : \"node server.js\" \n  } \n}\n```\n\nand the server.js is this:\n\n```javascript\nhttp.createServer(...).listen(process.env.npm_package_config_port)\n```\n\nthen the user could change the behavior by doing:\n\n```bash\n  npm config set foo:port 80\n  ```\n\n#### current lifecycle event\n\nLastly, the `npm_lifecycle_event` environment variable is set to\nwhichever stage of the cycle is being executed. So, you could have a\nsingle script used for different parts of the process which switches\nbased on what's currently happening.\n\nObjects are flattened following this format, so if you had\n`{\"scripts\":{\"install\":\"foo.js\"}}` in your package.json, then you'd\nsee this in the script:\n\n```bash\nprocess.env.npm_package_scripts_install === \"foo.js\"\n```\n\n### Examples\n\nFor example, if your package.json contains this:\n\n```json\n{ \n  \"scripts\" : { \n    \"install\" : \"scripts/install.js\", \n    \"postinstall\" : \"scripts/install.js\", \n    \"uninstall\" : \"scripts/uninstall.js\"\n  }\n}\n```\n\nthen `scripts/install.js` will be called for the install\nand post-install stages of the lifecycle, and `scripts/uninstall.js`\nwill be called when the package is uninstalled.  Since\n`scripts/install.js` is running for two different phases, it would\nbe wise in this case to look at the `npm_lifecycle_event` environment\nvariable.\n\nIf you want to run a make command, you can do so.  This works just\nfine:\n\n```json\n{ \n  \"scripts\" : { \n    \"preinstall\" : \"./configure\", \n    \"install\" : \"make && make install\", \n    \"test\" : \"make test\"\n  }\n}\n```\n\n### Exiting\n\nScripts are run by passing the line as a script argument to `sh`.\n\nIf the script exits with a code other than 0, then this will abort the\nprocess.\n\nNote that these script files don't have to be nodejs or even\njavascript programs. They just have to be some kind of executable\nfile.\n\n### Hook Scripts\n\nIf you want to run a specific script at a specific lifecycle event for\nALL packages, then you can use a hook script.\n\nPlace an executable file at `node_modules/.hooks/{eventname}`, and\nit'll get run for all packages when they are going through that point\nin the package lifecycle for any packages installed in that root.\n\nHook scripts are run exactly the same way as package.json scripts.\nThat is, they are in a separate child process, with the env described\nabove.\n\n### Best Practices\n\n* Don't exit with a non-zero error code unless you *really* mean it.\n  Except for uninstall scripts, this will cause the npm action to\n  fail, and potentially be rolled back.  If the failure is minor or\n  only will prevent some optional features, then it's better to just\n  print a warning and exit successfully.\n* Try not to use scripts to do what npm can do for you.  Read through\n  [`package.json`](/cli/v7/configuring-npm/package-json) to see all the things that you can specify and enable\n  by simply describing your package appropriately.  In general, this\n  will lead to a more robust and consistent state.\n* Inspect the env to determine where to put things.  For instance, if\n  the `npm_config_binroot` environment variable is set to `/home/user/bin`, then\n  don't try to install executables into `/usr/local/bin`.  The user\n  probably set it up that way for a reason.\n* Don't prefix your script commands with \"sudo\".  If root permissions\n  are required for some reason, then it'll fail with that error, and\n  the user will sudo the npm command in question.\n* Don't use `install`. Use a `.gyp` file for compilation, and `prepublish`\n  for anything else. You should almost never have to explicitly set a\n  preinstall or install script. If you are doing this, please consider if\n  there is another option. The only valid use of `install` or `preinstall`\n  scripts is for compilation which must be done on the target architecture.\n\n### See Also\n\n* [npm run-script](/cli/v7/commands/npm-run-script)\n* [package.json](/cli/v7/configuring-npm/package-json)\n* [npm developers](/cli/v7/using-npm/developers)\n* [npm install](/cli/v7/commands/npm-install)\n"},{"id":"f63123e0-4819-53cb-9921-1ff27c6c99c4","frontmatter":{"title":"semver"},"rawBody":"---\ntitle: semver\nsection: 7\ndescription: The semantic versioner for npm\ngithub_repo: npm/cli\ngithub_branch: release/v7.0.0-beta\ngithub_path: docs/content/using-npm/semver.md\n---\n\n## Install\n\n```bash\nnpm install --save semver\n````\n\n## Usage\n\nAs a node module:\n\n```js\nconst semver = require('semver')\n\nsemver.valid('1.2.3') // '1.2.3'\nsemver.valid('a.b.c') // null\nsemver.clean('  =v1.2.3   ') // '1.2.3'\nsemver.satisfies('1.2.3', '1.x || >=2.5.0 || 5.0.0 - 7.2.3') // true\nsemver.gt('1.2.3', '9.8.7') // false\nsemver.lt('1.2.3', '9.8.7') // true\nsemver.minVersion('>=1.0.0') // '1.0.0'\nsemver.valid(semver.coerce('v2')) // '2.0.0'\nsemver.valid(semver.coerce('42.6.7.9.3-alpha')) // '42.6.7'\n```\n\nAs a command-line utility:\n\n```\n$ semver -h\n\nA JavaScript implementation of the https://semver.org/ specification\nCopyright Isaac Z. Schlueter\n\nUsage: semver [options] <version> [<version> [...]]\nPrints valid versions sorted by SemVer precedence\n\nOptions:\n-r --range <range>\n        Print versions that match the specified range.\n\n-i --increment [<level>]\n        Increment a version by the specified level.  Level can\n        be one of: major, minor, patch, premajor, preminor,\n        prepatch, or prerelease.  Default level is 'patch'.\n        Only one version may be specified.\n\n--preid <identifier>\n        Identifier to be used to prefix premajor, preminor,\n        prepatch or prerelease version increments.\n\n-l --loose\n        Interpret versions and ranges loosely\n\n-p --include-prerelease\n        Always include prerelease versions in range matching\n\n-c --coerce\n        Coerce a string into SemVer if possible\n        (does not imply --loose)\n\nProgram exits successfully if any valid version satisfies\nall supplied ranges, and prints all satisfying versions.\n\nIf no satisfying versions are found, then exits failure.\n\nVersions are printed in ascending order, so supplying\nmultiple versions to the utility will just sort them.\n```\n\n## Versions\n\nA \"version\" is described by the `v2.0.0` specification found at\n<https://semver.org/>.\n\nA leading `\"=\"` or `\"v\"` character is stripped off and ignored.\n\n## Ranges\n\nA `version range` is a set of `comparators` which specify versions\nthat satisfy the range.\n\nA `comparator` is composed of an `operator` and a `version`.  The set\nof primitive `operators` is:\n\n* `<` Less than\n* `<=` Less than or equal to\n* `>` Greater than\n* `>=` Greater than or equal to\n* `=` Equal.  If no operator is specified, then equality is assumed,\n  so this operator is optional, but MAY be included.\n\nFor example, the comparator `>=1.2.7` would match the versions\n`1.2.7`, `1.2.8`, `2.5.3`, and `1.3.9`, but not the versions `1.2.6`\nor `1.1.0`.\n\nComparators can be joined by whitespace to form a `comparator set`,\nwhich is satisfied by the **intersection** of all of the comparators\nit includes.\n\nA range is composed of one or more comparator sets, joined by `||`.  A\nversion matches a range if and only if every comparator in at least\none of the `||`-separated comparator sets is satisfied by the version.\n\nFor example, the range `>=1.2.7 <1.3.0` would match the versions\n`1.2.7`, `1.2.8`, and `1.2.99`, but not the versions `1.2.6`, `1.3.0`,\nor `1.1.0`.\n\nThe range `1.2.7 || >=1.2.9 <2.0.0` would match the versions `1.2.7`,\n`1.2.9`, and `1.4.6`, but not the versions `1.2.8` or `2.0.0`.\n\n### Prerelease Tags\n\nIf a version has a prerelease tag (for example, `1.2.3-alpha.3`) then\nit will only be allowed to satisfy comparator sets if at least one\ncomparator with the same `[major, minor, patch]` tuple also has a\nprerelease tag.\n\nFor example, the range `>1.2.3-alpha.3` would be allowed to match the\nversion `1.2.3-alpha.7`, but it would *not* be satisfied by\n`3.4.5-alpha.9`, even though `3.4.5-alpha.9` is technically \"greater\nthan\" `1.2.3-alpha.3` according to the SemVer sort rules.  The version\nrange only accepts prerelease tags on the `1.2.3` version.  The\nversion `3.4.5` *would* satisfy the range, because it does not have a\nprerelease flag, and `3.4.5` is greater than `1.2.3-alpha.7`.\n\nThe purpose for this behavior is twofold.  First, prerelease versions\nfrequently are updated very quickly, and contain many breaking changes\nthat are (by the author's design) not yet fit for public consumption.\nTherefore, by default, they are excluded from range matching\nsemantics.\n\nSecond, a user who has opted into using a prerelease version has\nclearly indicated the intent to use *that specific* set of\nalpha/beta/rc versions.  By including a prerelease tag in the range,\nthe user is indicating that they are aware of the risk.  However, it\nis still not appropriate to assume that they have opted into taking a\nsimilar risk on the *next* set of prerelease versions.\n\nNote that this behavior can be suppressed (treating all prerelease\nversions as if they were normal versions, for the purpose of range\nmatching) by setting the `includePrerelease` flag on the options\nobject to any\n[functions](https://github.com/npm/node-semver#functions) that do\nrange matching.\n\n#### Prerelease Identifiers\n\nThe method `.inc` takes an additional `identifier` string argument that\nwill append the value of the string as a prerelease identifier:\n\n```javascript\nsemver.inc('1.2.3', 'prerelease', 'beta')\n// '1.2.4-beta.0'\n```\n\ncommand-line example:\n\n```bash\n$ semver 1.2.3 -i prerelease --preid beta\n1.2.4-beta.0\n```\n\nWhich then can be used to increment further:\n\n```bash\n$ semver 1.2.4-beta.0 -i prerelease\n1.2.4-beta.1\n```\n\n### Advanced Range Syntax\n\nAdvanced range syntax desugars to primitive comparators in\ndeterministic ways.\n\nAdvanced ranges may be combined in the same way as primitive\ncomparators using white space or `||`.\n\n#### Hyphen Ranges `X.Y.Z - A.B.C`\n\nSpecifies an inclusive set.\n\n* `1.2.3 - 2.3.4` := `>=1.2.3 <=2.3.4`\n\nIf a partial version is provided as the first version in the inclusive\nrange, then the missing pieces are replaced with zeroes.\n\n* `1.2 - 2.3.4` := `>=1.2.0 <=2.3.4`\n\nIf a partial version is provided as the second version in the\ninclusive range, then all versions that start with the supplied parts\nof the tuple are accepted, but nothing that would be greater than the\nprovided tuple parts.\n\n* `1.2.3 - 2.3` := `>=1.2.3 <2.4.0`\n* `1.2.3 - 2` := `>=1.2.3 <3.0.0`\n\n#### X-Ranges `1.2.x` `1.X` `1.2.*` `*`\n\nAny of `X`, `x`, or `*` may be used to \"stand in\" for one of the\nnumeric values in the `[major, minor, patch]` tuple.\n\n* `*` := `>=0.0.0` (Any version satisfies)\n* `1.x` := `>=1.0.0 <2.0.0` (Matching major version)\n* `1.2.x` := `>=1.2.0 <1.3.0` (Matching major and minor versions)\n\nA partial version range is treated as an X-Range, so the special\ncharacter is in fact optional.\n\n* `\"\"` (empty string) := `*` := `>=0.0.0`\n* `1` := `1.x.x` := `>=1.0.0 <2.0.0`\n* `1.2` := `1.2.x` := `>=1.2.0 <1.3.0`\n\n#### Tilde Ranges `~1.2.3` `~1.2` `~1`\n\nAllows patch-level changes if a minor version is specified on the\ncomparator.  Allows minor-level changes if not.\n\n* `~1.2.3` := `>=1.2.3 <1.(2+1).0` := `>=1.2.3 <1.3.0`\n* `~1.2` := `>=1.2.0 <1.(2+1).0` := `>=1.2.0 <1.3.0` (Same as `1.2.x`)\n* `~1` := `>=1.0.0 <(1+1).0.0` := `>=1.0.0 <2.0.0` (Same as `1.x`)\n* `~0.2.3` := `>=0.2.3 <0.(2+1).0` := `>=0.2.3 <0.3.0`\n* `~0.2` := `>=0.2.0 <0.(2+1).0` := `>=0.2.0 <0.3.0` (Same as `0.2.x`)\n* `~0` := `>=0.0.0 <(0+1).0.0` := `>=0.0.0 <1.0.0` (Same as `0.x`)\n* `~1.2.3-beta.2` := `>=1.2.3-beta.2 <1.3.0` Note that prereleases in\n  the `1.2.3` version will be allowed, if they are greater than or\n  equal to `beta.2`.  So, `1.2.3-beta.4` would be allowed, but\n  `1.2.4-beta.2` would not, because it is a prerelease of a\n  different `[major, minor, patch]` tuple.\n\n#### Caret Ranges `^1.2.3` `^0.2.5` `^0.0.4`\n\nAllows changes that do not modify the left-most non-zero digit in the\n`[major, minor, patch]` tuple.  In other words, this allows patch and\nminor updates for versions `1.0.0` and above, patch updates for\nversions `0.X >=0.1.0`, and *no* updates for versions `0.0.X`.\n\nMany authors treat a `0.x` version as if the `x` were the major\n\"breaking-change\" indicator.\n\nCaret ranges are ideal when an author may make breaking changes\nbetween `0.2.4` and `0.3.0` releases, which is a common practice.\nHowever, it presumes that there will *not* be breaking changes between\n`0.2.4` and `0.2.5`.  It allows for changes that are presumed to be\nadditive (but non-breaking), according to commonly observed practices.\n\n* `^1.2.3` := `>=1.2.3 <2.0.0`\n* `^0.2.3` := `>=0.2.3 <0.3.0`\n* `^0.0.3` := `>=0.0.3 <0.0.4`\n* `^1.2.3-beta.2` := `>=1.2.3-beta.2 <2.0.0` Note that prereleases in\n  the `1.2.3` version will be allowed, if they are greater than or\n  equal to `beta.2`.  So, `1.2.3-beta.4` would be allowed, but\n  `1.2.4-beta.2` would not, because it is a prerelease of a\n  different `[major, minor, patch]` tuple.\n* `^0.0.3-beta` := `>=0.0.3-beta <0.0.4`  Note that prereleases in the\n  `0.0.3` version *only* will be allowed, if they are greater than or\n  equal to `beta`.  So, `0.0.3-pr.2` would be allowed.\n\nWhen parsing caret ranges, a missing `patch` value desugars to the\nnumber `0`, but will allow flexibility within that value, even if the\nmajor and minor versions are both `0`.\n\n* `^1.2.x` := `>=1.2.0 <2.0.0`\n* `^0.0.x` := `>=0.0.0 <0.1.0`\n* `^0.0` := `>=0.0.0 <0.1.0`\n\nA missing `minor` and `patch` values will desugar to zero, but also\nallow flexibility within those values, even if the major version is\nzero.\n\n* `^1.x` := `>=1.0.0 <2.0.0`\n* `^0.x` := `>=0.0.0 <1.0.0`\n\n### Range Grammar\n\nPutting all this together, here is a Backus-Naur grammar for ranges,\nfor the benefit of parser authors:\n\n```bnf\nrange-set  ::= range ( logical-or range ) *\nlogical-or ::= ( ' ' ) * '||' ( ' ' ) *\nrange      ::= hyphen | simple ( ' ' simple ) * | ''\nhyphen     ::= partial ' - ' partial\nsimple     ::= primitive | partial | tilde | caret\nprimitive  ::= ( '<' | '>' | '>=' | '<=' | '=' ) partial\npartial    ::= xr ( '.' xr ( '.' xr qualifier ? )? )?\nxr         ::= 'x' | 'X' | '*' | nr\nnr         ::= '0' | ['1'-'9'] ( ['0'-'9'] ) *\ntilde      ::= '~' partial\ncaret      ::= '^' partial\nqualifier  ::= ( '-' pre )? ( '+' build )?\npre        ::= parts\nbuild      ::= parts\nparts      ::= part ( '.' part ) *\npart       ::= nr | [-0-9A-Za-z]+\n```\n\n## Functions\n\nAll methods and classes take a final `options` object argument.  All\noptions in this object are `false` by default.  The options supported\nare:\n\n- `loose`  Be more forgiving about not-quite-valid semver strings.\n  (Any resulting output will always be 100% strict compliant, of\n  course.)  For backwards compatibility reasons, if the `options`\n  argument is a boolean value instead of an object, it is interpreted\n  to be the `loose` param.\n- `includePrerelease`  Set to suppress the [default\n  behavior](https://github.com/npm/node-semver#prerelease-tags) of\n  excluding prerelease tagged versions from ranges unless they are\n  explicitly opted into.\n\nStrict-mode Comparators and Ranges will be strict about the SemVer\nstrings that they parse.\n\n* `valid(v)`: Return the parsed version, or null if it's not valid.\n* `inc(v, release)`: Return the version incremented by the release\n  type (`major`,   `premajor`, `minor`, `preminor`, `patch`,\n  `prepatch`, or `prerelease`), or null if it's not valid\n  * `premajor` in one call will bump the version up to the next major\n    version and down to a prerelease of that major version.\n    `preminor`, and `prepatch` work the same way.\n  * If called from a non-prerelease version, the `prerelease` will work the\n    same as `prepatch`. It increments the patch version, then makes a\n    prerelease. If the input version is already a prerelease it simply\n    increments it.\n* `prerelease(v)`: Returns an array of prerelease components, or null\n  if none exist. Example: `prerelease('1.2.3-alpha.1') -> ['alpha', 1]`\n* `major(v)`: Return the major version number.\n* `minor(v)`: Return the minor version number.\n* `patch(v)`: Return the patch version number.\n* `intersects(r1, r2, loose)`: Return true if the two supplied ranges\n  or comparators intersect.\n* `parse(v)`: Attempt to parse a string as a semantic version, returning either\n  a `SemVer` object or `null`.\n\n### Comparison\n\n* `gt(v1, v2)`: `v1 > v2`\n* `gte(v1, v2)`: `v1 >= v2`\n* `lt(v1, v2)`: `v1 < v2`\n* `lte(v1, v2)`: `v1 <= v2`\n* `eq(v1, v2)`: `v1 == v2` This is true if they're logically equivalent,\n  even if they're not the exact same string.  You already know how to\n  compare strings.\n* `neq(v1, v2)`: `v1 != v2` The opposite of `eq`.\n* `cmp(v1, comparator, v2)`: Pass in a comparison string, and it'll call\n  the corresponding function above.  `\"===\"` and `\"!==\"` do simple\n  string comparison, but are included for completeness.  Throws if an\n  invalid comparison string is provided.\n* `compare(v1, v2)`: Return `0` if `v1 == v2`, or `1` if `v1` is greater, or `-1` if\n  `v2` is greater.  Sorts in ascending order if passed to `Array.sort()`.\n* `rcompare(v1, v2)`: The reverse of compare.  Sorts an array of versions\n  in descending order when passed to `Array.sort()`.\n* `diff(v1, v2)`: Returns difference between two versions by the release type\n  (`major`, `premajor`, `minor`, `preminor`, `patch`, `prepatch`, or `prerelease`),\n  or null if the versions are the same.\n\n### Comparators\n\n* `intersects(comparator)`: Return true if the comparators intersect\n\n### Ranges\n\n* `validRange(range)`: Return the valid range or null if it's not valid\n* `satisfies(version, range)`: Return true if the version satisfies the\n  range.\n* `maxSatisfying(versions, range)`: Return the highest version in the list\n  that satisfies the range, or `null` if none of them do.\n* `minSatisfying(versions, range)`: Return the lowest version in the list\n  that satisfies the range, or `null` if none of them do.\n* `minVersion(range)`: Return the lowest version that can possibly match\n  the given range.\n* `gtr(version, range)`: Return `true` if version is greater than all the\n  versions possible in the range.\n* `ltr(version, range)`: Return `true` if version is less than all the\n  versions possible in the range.\n* `outside(version, range, hilo)`: Return true if the version is outside\n  the bounds of the range in either the high or low direction.  The\n  `hilo` argument must be either the string `'>'` or `'<'`.  (This is\n  the function called by `gtr` and `ltr`.)\n* `intersects(range)`: Return true if any of the ranges comparators intersect\n\nNote that, since ranges may be non-contiguous, a version might not be\ngreater than a range, less than a range, *or* satisfy a range!  For\nexample, the range `1.2 <1.2.9 || >2.0.0` would have a hole from `1.2.9`\nuntil `2.0.0`, so the version `1.2.10` would not be greater than the\nrange (because `2.0.1` satisfies, which is higher), nor less than the\nrange (since `1.2.8` satisfies, which is lower), and it also does not\nsatisfy the range.\n\nIf you want to know if a version satisfies or does not satisfy a\nrange, use the `satisfies(version, range)` function.\n\n### Coercion\n\n* `coerce(version)`: Coerces a string to semver if possible\n\nThis aims to provide a very forgiving translation of a non-semver string to\nsemver. It looks for the first digit in a string, and consumes all\nremaining characters which satisfy at least a partial semver (e.g., `1`,\n`1.2`, `1.2.3`) up to the max permitted length (256 characters).  Longer\nversions are simply truncated (`4.6.3.9.2-alpha2` becomes `4.6.3`).  All\nsurrounding text is simply ignored (`v3.4 replaces v3.3.1` becomes\n`3.4.0`).  Only text which lacks digits will fail coercion (`version one`\nis not valid).  The maximum  length for any semver component considered for\ncoercion is 16 characters; longer components will be ignored\n(`10000000000000000.4.7.4` becomes `4.7.4`).  The maximum value for any\nsemver component is `Number.MAX_SAFE_INTEGER || (2**53 - 1)`; higher value\ncomponents are invalid (`9999999999999999.4.7.4` is likely invalid).\n"},{"id":"522d1fa1-fe39-5e2e-941e-e24cdc81f4a3","frontmatter":{"title":"Searching for and choosing packages to download"},"rawBody":"---\ntitle: Searching for and choosing packages to download\nredirect_from:\n  - /getting-started/searching-for-packages\n---\n\nYou can use the npm search bar to find packages to use in your projects. npm search uses npms and the npms analyzer; for more information on both, see https://npms.io/about.\n\n## Searching for a package\n\n1. In the search bar, type a search term and press **Enter**. As you type, possible choices will appear.\n\n   <Screenshot src=\"/packages-and-modules/getting-packages-from-the-registry/search-qr.png\" alt=\"Screenshot of a search text box\" />\n   <Screenshot src=\"/packages-and-modules/getting-packages-from-the-registry/search-qr-results.png\" alt=\"Screenshot of the search text box and search results\" />\n\n2. To list packages ranked according to [package search rank criteria](#package-search-rank-criteria), in the left sidebar, under \"Sort packages\", click the criterion. For example, to sort packages by popularity, click \"Popularity\".\n\n3. In the package search results list, click the name of the package.\n\n## Package search rank criteria\n\nOften, there are dozens or even hundreds of packages with similar names and/or similar purposes. To help you decide the best ones to explore, each package has been ranked according to four criteria using the npms analyzer:\n\n### Popularity\n\nPopularity indicates how many times the package has been downloaded. This is a strong indicator of packages that others have found to be useful.\n\n### Quality\n\nQuality includes considerations such as the presence of a README file, stability, tests, up-to-date dependencies, custom website, and code complexity.\n\n### Maintenance\n\nMaintenance ranks packages according to the attention they are given by developers. More frequently maintained packages are more likely to work well with the current or upcoming versions of the npm CLI, for example.\n\n### Optimal\n\nOptimal combines the other three criteria (popularity, quality, maintenance) into one score in a meaningful way.\n"},{"id":"7d9d9535-012a-567c-8176-6c7b94ff4266","frontmatter":{"title":"Uninstalling packages and dependencies"},"rawBody":"---\ntitle: Uninstalling packages and dependencies\nredirect_from:\n  - /getting-started/uninstalling-local-packages\n  - /getting-started/uninstalling-global-packages\n---\n\nIf you no longer need to use a package in your code, we recommend uninstalling it and removing it from your project's dependencies.\n\n## Uninstalling local packages\n\n### Removing a local package from your node_modules directory\n\nTo remove a package from your node_modules directory, on the command line, use the [`uninstall` command][cli-uninstall]. Include the scope if the package is scoped.\n\n#### Unscoped package\n\n```\nnpm uninstall <package_name>\n\n```\n\n#### Scoped package\n\n```\nnpm uninstall <@scope/package_name>\n```\n\n### Example\n\n```\nnpm uninstall lodash\n```\n\n### Removing a local package from the `package.json` dependencies\n\nTo remove a package from the dependencies in `package.json`, use the `--save` flag. Include the scope if the package is scoped.\n\n#### Unscoped package\n\n```\nnpm uninstall --save <package_name>\n```\n\n#### Scoped package\n\n```\nnpm uninstall --save <@scope/package_name>\n```\n\n#### Example\n\n```\nnpm uninstall --save lodash\n```\n\n<Note>\n\n**Note:** If you installed a package as a \"devDependency\" (i.e. with `--save-dev`), use `--save-dev` to uninstall it:\n\n```\nnpm uninstall --save-dev package_name\n```\n\n</Note>\n\n### Confirming local package uninstallation\n\nTo confirm that `npm uninstall` worked correctly, check that the `node_modules` directory no longer contains a directory for the uninstalled package(s).\n\n- Unix system (such as OSX): `ls node_modules`\n- Windows systems: `dir node_modules`\n\n## Uninstalling global packages\n\nTo uninstall an unscoped global package, on the command line, use the `uninstall` command with the `-g` flag. Include the scope if the package is scoped.\n\n### Unscoped package\n\n```\nnpm uninstall -g <package_name>\n```\n\n### Scoped package\n\n```\nnpm uninstall -g <@scope/package_name>\n```\n\n### Example\n\nFor example, to uninstall a package called `jshint`, run:\n\n```\nnpm uninstall -g jshint\n```\n\n## Resources\n\n### Uninstalling local packages\n\n<iframe src=\"https://www.youtube.com/embed/Z-BpYj6cSoQ\" frameborder=\"0\" allowfullscreen></iframe>\n\n### Uninstalling global packages\n\n<iframe src=\"https://www.youtube.com/embed/XbvjZxUZJGg\" frameborder=\"0\" allowfullscreen></iframe>\n\n\n[cli-uninstall]: /cli/uninstall\n"},{"id":"390e337e-8228-5443-a962-b4ef05b9c599","frontmatter":{"title":"Updating packages downloaded from the registry"},"rawBody":"---\ntitle: Updating packages downloaded from the registry\nredirect_from:\n  - /getting-started/updating-local-packages\n  - /getting-started/updating-global-packages\n---\n\nUpdating local and global packages you downloaded from the registry helps keep your code and tools stable, usable, and secure.\n\n## Updating local packages\n\nWe recommend regularly updating the local packages your project depends on to improve your code as improvements to its dependencies are made.\n\n1. Navigate to the root directory of your project and ensure it contains a `package.json` file:\n\n   ```\n   cd /path/to/project\n   ```\n\n2. In your project root directory, run the [`update` command][npm-update]:\n\n   ```\n   npm update\n   ```\n\n3. To test the update, run the [`outdated` command][npm-outdated]. There should not be any output.\n\n   ```\n   npm outdated\n   ```\n\n## Updating globally-installed packages\n\n<Note>\n\n**Note:** If you are using npm version 2.6.0 or less, run [this script](https://gist.github.com/othiym23/4ac31155da23962afd0e) to update all outdated global packages.\n\nHowever, please consider upgrading to the latest version of npm:\n\n```\nnpm install npm@latest -g\n```\n\n</Note>\n\n### Determining which global packages need updating\n\nTo see which global packages need to be updated, on the command line, run:\n\n```\nnpm outdated -g --depth=0\n```\n\n### Updating a single global package\n\nTo update a single global package, on the command line, run:\n\n```\nnpm update -g <package_name>\n```\n\n### Updating all globally-installed packages\n\nTo update all global packages, on the command line, run:\n\n```\nnpm update -g\n```\n\n## Resources\n\n<iframe src=\"https://www.youtube.com/embed/HRudtPGcOt4\" frameborder=\"0\" allowfullscreen></iframe>\n\n### CLI commands\n\n- [npm-update](/cli/update)\n- [npm-outdated](/cli/outdated)\n\n\n[npm-update]: /cli/update\n[npm-outdated]: /cli/outdated\n"}]},"allSitePage":{"nodes":[{"path":"/dev-404-page/","context":null},{"path":"/","context":{"mdxId":"b1d3cb34-c318-586b-9266-222d028078c6"}},{"path":"/purchasing-or-removing-seats","context":{"mdxId":"8a909138-f3e0-5a37-8cbc-33347a70dea6"}},{"path":"/updating-billing-information","context":{"mdxId":"5f525218-d271-5a8b-b4a8-ca7d5a6d1276"}},{"path":"/migrating-from-an-existing-enterprise-instance","context":{"mdxId":"c874c484-a127-5a65-bdcd-e4a5d4a15503"}},{"path":"/migrating-from-an-organization-on-the-public-registry","context":{"mdxId":"ad7f7036-1297-537a-877d-1005b5caaf90"}},{"path":"/configuring-an-authentication-provider","context":{"mdxId":"3d961e9e-72fa-508c-ac67-419cdc3bf3a3"}},{"path":"/defining-security-policy","context":{"mdxId":"082be80b-9e2a-5afa-be6d-89dcb43a2132"}},{"path":"/getting-started-with-npm-enterprise","context":{"mdxId":"a2154393-8382-5812-a154-bda6575687f3"}},{"path":"/sunsetting-npm-enterprise","context":{"mdxId":"2ec69b9e-1f4f-577f-a6e0-2536382a3475"}},{"path":"/about-the-enterprise-admin-user","context":{"mdxId":"7ba6a68f-16fd-5385-98a9-32f86eb9693a"}},{"path":"/creating-and-managing-organizations-and-teams","context":{"mdxId":"cec6043a-f815-520e-b5e6-b1c6e591e5b8"}},{"path":"/demoting-an-admin-to-a-non-admin-user","context":{"mdxId":"66a624ce-3bd4-5545-a120-07a8f0ac5035"}},{"path":"/managing-user-security","context":{"mdxId":"8ac8e0c7-d788-5ada-86f4-91b0c48a1161"}},{"path":"/npm-enterprise-roles-and-permissions","context":{"mdxId":"b1f2eddf-6b11-549a-a556-89965c1c45b6"}},{"path":"/permanently-deleting-a-user","context":{"mdxId":"5c03ac7b-844a-5be9-90ed-f1c4490e8201"}},{"path":"/promoting-a-non-admin-user-to-admin","context":{"mdxId":"8e63553f-a893-5735-98ba-f5ad711bc98a"}},{"path":"/viewing-deactivating-and-reactivating-users","context":{"mdxId":"29a67ba4-f2be-5a26-a543-8b7379bbc944"}},{"path":"/about-npm-versions","context":{"mdxId":"e76706a2-24c0-5973-8df1-57d96ab264c9"}},{"path":"/configuring-your-registry-settings-as-an-npm-enterprise-user","context":{"mdxId":"70ed15c8-fb9b-54d6-bd3f-e683b63729f6"}},{"path":"/downloading-and-installing-node-js-and-npm","context":{"mdxId":"578fd137-ccf1-5a39-ac65-dc1b61e4552d"}},{"path":"/logging-in-to-an-npm-enterprise-registry-from-the-command-line","context":{"mdxId":"bd1bfca2-2a86-59b0-ace2-91898b372f5d"}},{"path":"/changing-your-npm-username","context":{"mdxId":"e317af43-c1dc-5eaa-b2ff-670f443fe466"}},{"path":"/deleting-your-npm-user-account","context":{"mdxId":"422eb896-23dc-5cdc-869a-0399d18eabd7"}},{"path":"/managing-your-profile-settings","context":{"mdxId":"e37b4024-bb00-5906-9fd6-5dd28afd9438"}},{"path":"/downgrading-to-a-free-user-account-plan","context":{"mdxId":"7cc320ea-bfc9-518f-812a-45547039cc5f"}},{"path":"/updating-user-account-billing-settings","context":{"mdxId":"f4c7df46-ea19-5170-aa87-9739c39c6d49"}},{"path":"/upgrading-to-a-paid-user-account-plan","context":{"mdxId":"13c754b6-7b70-529c-a1a8-c540b1ef50bb"}},{"path":"/viewing-downloading-and-emailing-receipts-for-your-user-account","context":{"mdxId":"77f08661-8284-5820-9d8a-aa0bff904c38"}},{"path":"/about-two-factor-authentication","context":{"mdxId":"5cd676bc-96f5-503a-9801-5c4f47c906d9"}},{"path":"/configuring-two-factor-authentication","context":{"mdxId":"d5a9a1bb-509b-5d30-8793-2167b550a5b7"}},{"path":"/creating-a-new-npm-user-account","context":{"mdxId":"e0e794c3-ad30-5e3a-98b1-0b4611178d1c"}},{"path":"/creating-a-strong-password","context":{"mdxId":"d4778273-0d95-5d86-a2ef-432443c2a492"}},{"path":"/recovering-your-2fa-enabled-account","context":{"mdxId":"19a60933-a190-5116-9334-a0093ff6349c"}},{"path":"/common-errors","context":{"mdxId":"bf88e123-0fc5-597b-8001-0c977af5a301"}},{"path":"/generating-and-locating-npm-debug.log-files","context":{"mdxId":"728d2f8c-08fe-5d94-b9ba-f029e904181f"}},{"path":"/try-the-latest-stable-version-of-node","context":{"mdxId":"bf4d8650-4fae-5004-bc1c-10de995e4dbd"}},{"path":"/try-the-latest-stable-version-of-npm","context":{"mdxId":"54c189d4-d5c0-57ce-9dbf-333004affc02"}},{"path":"/about-access-tokens","context":{"mdxId":"73230f6f-837a-5a6d-ae9f-6a3c66a0df72"}},{"path":"/creating-and-viewing-access-tokens","context":{"mdxId":"ab943f5c-9522-5170-b650-4a2c712fcce0"}},{"path":"/docker-and-private-modules","context":{"mdxId":"4028a386-ce9f-58ff-9ce1-ae63d4fef4f9"}},{"path":"/revoking-access-tokens","context":{"mdxId":"1a77b656-d6e2-5c82-b605-a9fb2901af2b"}},{"path":"/using-private-packages-in-a-ci-cd-workflow","context":{"mdxId":"38a1db2a-8775-530e-af4a-2084d7b321e9"}},{"path":"/converting-your-user-account-to-an-organization","context":{"mdxId":"af579523-b207-5f66-b328-d841acb14eb9"}},{"path":"/creating-an-organization","context":{"mdxId":"c26dd8cb-d09b-5374-8278-86bcdedf1fc7"}},{"path":"/deleting-an-organization","context":{"mdxId":"fc3923fc-2a45-5416-b332-41c36214a8ac"}},{"path":"/renaming-an-organization","context":{"mdxId":"98af0755-217e-5c3a-a443-878e4a3cb391"}},{"path":"/accepting-or-rejecting-an-organization-invitation","context":{"mdxId":"a0b76b5e-8310-5a26-a80e-6ba39f6a6784"}},{"path":"/adding-members-to-your-organization","context":{"mdxId":"5592b863-7d90-54ce-b872-bc866088d468"}},{"path":"/managing-organization-permissions","context":{"mdxId":"8de562ce-23cc-51fd-8fdf-29c8255e1d40"}},{"path":"/organization-roles-and-permissions","context":{"mdxId":"311e83f9-33b7-5ef6-a86a-ebcab4c8792e"}},{"path":"/removing-members-from-your-organization","context":{"mdxId":"de5339a9-3038-5170-a2f2-ac0e6b79b810"}},{"path":"/about-organization-scopes-and-packages","context":{"mdxId":"ad80dfe0-f4ce-5304-88c1-7be7046eb2a1"}},{"path":"/configuring-your-npm-client-with-your-organization-settings","context":{"mdxId":"410b1d1f-113d-5a9d-b51a-a143b47c1219"}},{"path":"/creating-and-publishing-an-organization-scoped-package","context":{"mdxId":"42049605-d20b-57e0-b6e5-901b695177b8"}},{"path":"/about-developers-team","context":{"mdxId":"0e6abf6a-6ccd-522d-8c83-605eac25a31b"}},{"path":"/adding-organization-members-to-teams","context":{"mdxId":"83ff3b0d-be27-5293-a77d-765fd2f17bd0"}},{"path":"/creating-teams","context":{"mdxId":"48b5e3fe-2c84-5193-abd3-65be51db12e5"}},{"path":"/managing-team-access-to-organization-packages","context":{"mdxId":"f27144fd-023e-545d-a1e3-640f5b9ee816"}},{"path":"/removing-organization-members-from-teams","context":{"mdxId":"6f6baa2e-2974-5df7-91d2-46847cdcddab"}},{"path":"/removing-teams","context":{"mdxId":"bcbee485-e2c6-5f28-8ad3-c3ccdbeee37c"}},{"path":"/downgrading-to-a-free-organization-plan","context":{"mdxId":"dfbb9935-c3da-54aa-a03a-891778f6783d"}},{"path":"/updating-organization-billing-settings","context":{"mdxId":"79fdf7de-32a8-542e-b0e9-88e3695eb5f6"}},{"path":"/upgrading-to-a-paid-organization-plan","context":{"mdxId":"06bb4353-e17b-5c5d-b577-db71e9a34ea8"}},{"path":"/viewing-downloading-and-emailing-receipts-for-your-organization","context":{"mdxId":"a3cbc79d-ee49-59d2-9f06-00bf77f93421"}},{"path":"/about-package-readme-files","context":{"mdxId":"65a6d61d-d38c-5a38-8775-942c9a4d510f"}},{"path":"/about-semantic-versioning","context":{"mdxId":"d8839df6-a5ec-5f20-a850-732b11b9585b"}},{"path":"/adding-dist-tags-to-packages","context":{"mdxId":"37558650-3014-5356-a5e5-fd38dac4e8a6"}},{"path":"/creating-a-package-json-file","context":{"mdxId":"233012ba-94cb-56c7-bd1e-2fe6e89c78a1"}},{"path":"/creating-and-publishing-private-packages","context":{"mdxId":"d99e4216-f95b-5f5c-ad70-73e79e1e12ac"}},{"path":"/creating-and-publishing-scoped-public-packages","context":{"mdxId":"f60de04f-5cf2-5aa6-88f3-99d8c030e19e"}},{"path":"/creating-and-publishing-unscoped-public-packages","context":{"mdxId":"eabc01d0-cc01-5360-a41a-b7c5b9b5da7b"}},{"path":"/creating-node-js-modules","context":{"mdxId":"fdcd1921-0305-52ea-8756-68aee89ea71e"}},{"path":"/package-name-guidelines","context":{"mdxId":"7649271c-dacc-5c62-9a3d-a0b654eae11a"}},{"path":"/specifying-dependencies-and-devdependencies-in-a-package-json-file","context":{"mdxId":"431e9df4-2a18-51a9-9f1b-84cb07f0d2ff"}},{"path":"/downloading-and-installing-packages-globally","context":{"mdxId":"86f67d67-59ed-5978-91b8-2abb00bd0462"}},{"path":"/downloading-and-installing-packages-locally","context":{"mdxId":"731d5d33-7975-5aa7-80b1-7c30eefbf445"}},{"path":"/resolving-eacces-permissions-errors-when-installing-packages-globally","context":{"mdxId":"33219d4f-238c-5066-a1fe-8fb3d957961b"}},{"path":"/using-deprecated-packages","context":{"mdxId":"a2a0ad87-15c1-533a-b4b9-da7c74650bd0"}},{"path":"/using-npm-packages-in-your-projects","context":{"mdxId":"9d2d08dd-753e-5630-8adb-cbce90506ae8"}},{"path":"/about-packages-and-modules","context":{"mdxId":"7ae02fc8-d625-545d-b259-c93500eb9ee0"}},{"path":"/about-private-packages","context":{"mdxId":"25144378-3db6-5cce-bd22-6683b13abe00"}},{"path":"/about-public-packages","context":{"mdxId":"f2d08035-ab85-5ded-8de9-7c5379e530b3"}},{"path":"/about-scopes","context":{"mdxId":"fe6412d3-c106-5594-9a4f-cfec15480ace"}},{"path":"/about-the-public-npm-registry","context":{"mdxId":"a2192793-60a8-5837-9b0d-2ed914761f97"}},{"path":"/package-scope-access-level-and-visibility","context":{"mdxId":"18e92413-ebe9-5c75-8443-2e1fd1061b53"}},{"path":"/about-audit-reports","context":{"mdxId":"d1e4838e-50e0-5cc8-a0ac-dd7f44423237"}},{"path":"/about-pgp-signatures-for-packages-in-the-public-registry","context":{"mdxId":"5c502cd6-8abd-5a51-a247-d7dc53560527"}},{"path":"/auditing-package-dependencies-for-security-vulnerabilities","context":{"mdxId":"09c9e0ae-17d2-5e46-a753-97df56082d3a"}},{"path":"/reporting-a-vulnerability-in-an-npm-package","context":{"mdxId":"0ced2fb0-c82d-54b1-b518-ce662882b687"}},{"path":"/requiring-2fa-for-package-publishing-and-settings-modification","context":{"mdxId":"a3757046-836d-539b-8aff-c744bd263483"}},{"path":"/verifying-the-pgp-signature-for-a-package-from-the-npm-public-registry","context":{"mdxId":"b0617300-f370-5245-8e18-7b3f074ec5ad"}},{"path":"/adding-collaborators-to-private-packages-owned-by-a-user-account","context":{"mdxId":"1265aeaa-28ed-5446-9fb3-e272db6bd62b"}},{"path":"/changing-package-visibility","context":{"mdxId":"a6083216-2841-536c-aaa7-7148adf05d82"}},{"path":"/deprecating-and-undeprecating-packages-or-package-versions","context":{"mdxId":"ee828cfa-7b56-5963-8ded-42c3abc81e10"}},{"path":"/transferring-a-package-from-a-user-account-to-another-user-account","context":{"mdxId":"f436305c-225a-5ed4-b464-fdb7f7d9b8c5"}},{"path":"/unpublishing-packages-from-the-registry","context":{"mdxId":"8d1238b7-7bde-59b2-b084-f731213b0bad"}},{"path":"/updating-your-published-package-version-number","context":{"mdxId":"9b5f2016-386b-5b39-9579-da42ffe62e33"}},{"path":"/cli/v6/commands/npm-access","context":{"mdxId":"d624a318-4150-5c8a-aaa2-69946b51e041"}},{"path":"/cli/v6/commands/npm-adduser","context":{"mdxId":"56282ba5-718f-58fe-8c4e-7c079f7ddff2"}},{"path":"/cli/v6/commands/npm-audit","context":{"mdxId":"ce51fb4a-50b8-5d03-8a87-920dbd121e84"}},{"path":"/cli/v6/commands/npm-bin","context":{"mdxId":"35860864-7510-556a-a070-acf9316b0cb9"}},{"path":"/cli/v6/commands/npm-bugs","context":{"mdxId":"86ad796b-f3f9-55ab-a183-fecd20583d05"}},{"path":"/cli/v6/commands/npm-build","context":{"mdxId":"1b580263-503b-5bc5-bf2b-76aef1a83d85"}},{"path":"/cli/v6/commands/npm-bundle","context":{"mdxId":"3f229705-f996-5169-8477-94818e3c2515"}},{"path":"/cli/v6/commands/npm-ci","context":{"mdxId":"ca93a0a3-f79b-5d9a-a468-01605ba7ea46"}},{"path":"/cli/v6/commands/npm-completion","context":{"mdxId":"84cd9146-af0d-58f8-a84a-5680ca3b515d"}},{"path":"/cli/v6/commands/npm-config","context":{"mdxId":"70ca1a7f-b780-512e-a4b1-8040b72d3f81"}},{"path":"/cli/v6/commands/npm-dedupe","context":{"mdxId":"bfda055d-b160-52c2-9b5d-675ce3cdd0db"}},{"path":"/cli/v6/commands/npm-deprecate","context":{"mdxId":"9ea5feb3-b5a3-538e-9b9b-60d12f632e4b"}},{"path":"/cli/v6/commands/npm-dist-tag","context":{"mdxId":"288265f9-aebc-5ec1-bb41-cd8121edff9f"}},{"path":"/cli/v6/commands/npm-docs","context":{"mdxId":"fe5d9c8f-e7c5-5811-9fd2-410e277affde"}},{"path":"/cli/v6/commands/npm-doctor","context":{"mdxId":"b3646d42-771c-5781-8be1-d53d236233a9"}},{"path":"/cli/v6/commands/npm-edit","context":{"mdxId":"af6fd056-420d-53f4-af8e-3e7fb91d1a54"}},{"path":"/cli/v6/commands/npm-explore","context":{"mdxId":"0ffc3b3a-0889-58a4-9dcf-ebdb4092ac09"}},{"path":"/cli/v6/commands/npm-fund","context":{"mdxId":"5a1649c3-6819-5495-8548-7e6ec06e1024"}},{"path":"/cli/v6/commands/npm-cache","context":{"mdxId":"679734a4-84cd-5487-9280-1e027d8d83e0"}},{"path":"/cli/v6/commands/npm-help-search","context":{"mdxId":"d6d78c2a-5d49-5b55-86d1-c413aa42af84"}},{"path":"/cli/v6/commands/npm-help","context":{"mdxId":"1270eeff-8112-5ea4-8e99-789b5bca14d5"}},{"path":"/cli/v6/commands/npm-hook","context":{"mdxId":"06052cc6-757b-5f1f-8c99-ceace6591a1c"}},{"path":"/cli/v6/commands/npm-init","context":{"mdxId":"5cfa054f-6585-5be3-8a46-1263832cdbb9"}},{"path":"/cli/v6/commands/npm-install-ci-test","context":{"mdxId":"bf34eb7d-55a3-53d7-a9f8-54e074fd85db"}},{"path":"/cli/v6/commands/npm-install-test","context":{"mdxId":"8216c32a-ac02-5fa8-b76c-9afe9950119e"}},{"path":"/cli/v6/commands/npm-install","context":{"mdxId":"a378dccc-31e1-5f0e-9857-b4cf1261f588"}},{"path":"/cli/v6/commands/npm-link","context":{"mdxId":"57053709-f65f-5087-83bf-3443b5393051"}},{"path":"/cli/v6/commands/npm-logout","context":{"mdxId":"ec8a7031-474f-5f89-9b10-95183c10cae6"}},{"path":"/cli/v6/commands/npm-ls","context":{"mdxId":"a2a0f1ed-134e-5d4c-8d19-aa3f690a9800"}},{"path":"/cli/v6/commands/npm-org","context":{"mdxId":"7245ecf4-c02e-546f-bd49-cd8ceb106be1"}},{"path":"/cli/v6/commands/npm-outdated","context":{"mdxId":"637f8b33-2498-5d4c-a2e9-2430efb92643"}},{"path":"/cli/v6/commands/npm-owner","context":{"mdxId":"0294d076-5dce-5e94-a194-f4b968bc74a3"}},{"path":"/cli/v6/commands/npm-pack","context":{"mdxId":"17bb6002-5dfc-5b11-959f-e7d2130888c4"}},{"path":"/cli/v6/commands/npm-ping","context":{"mdxId":"7e64f0c2-7987-50a4-b5c9-c06836b448de"}},{"path":"/cli/v6/commands/npm-prefix","context":{"mdxId":"9cd88fad-47fb-5196-8690-2c60865a65e0"}},{"path":"/cli/v6/commands/npm-profile","context":{"mdxId":"24128289-0ed1-5e42-b9dc-01e90fe59769"}},{"path":"/cli/v6/commands/npm-prune","context":{"mdxId":"9a2f0496-4fae-53c5-8420-831106edf963"}},{"path":"/cli/v6/commands/npm-publish","context":{"mdxId":"8afb49dc-0d92-5acb-b8c6-4310c9726c7d"}},{"path":"/cli/v6/commands/npm-rebuild","context":{"mdxId":"4a8c15d0-dccb-5730-90f3-a5cb22dba3e1"}},{"path":"/cli/v6/commands/npm-repo","context":{"mdxId":"840db68c-c9c6-5e32-8954-7344d64fe0b8"}},{"path":"/cli/v6/commands/npm-restart","context":{"mdxId":"0daa3321-8d5d-5da2-8780-7ad105aef4fe"}},{"path":"/cli/v6/commands/npm-root","context":{"mdxId":"b968b4f2-5fcb-572a-8c77-5bc352403476"}},{"path":"/cli/v6/commands/npm-run-script","context":{"mdxId":"b063697b-6a4b-5d72-90b7-4d18eff43f77"}},{"path":"/cli/v6/commands/npm-search","context":{"mdxId":"e79bbd7e-191b-5c47-875b-5ca3af28cdc4"}},{"path":"/cli/v6/commands/npm-shrinkwrap","context":{"mdxId":"633fd5e1-e70b-52ca-8375-efa184a06714"}},{"path":"/cli/v6/commands/npm-star","context":{"mdxId":"3619520d-6774-5055-89fc-8e41110d643a"}},{"path":"/cli/v6/commands/npm-stars","context":{"mdxId":"4098b30d-0d4a-55b9-9ba5-eb7e0aade040"}},{"path":"/cli/v6/commands/npm-start","context":{"mdxId":"26cb4d18-2f3e-5d48-85b6-271fa5894a1c"}},{"path":"/cli/v6/commands/npm-stop","context":{"mdxId":"3cf224b5-f524-5dac-aba3-bfecc11b6f0c"}},{"path":"/cli/v6/commands/npm-team","context":{"mdxId":"0b327ca1-dada-5201-806e-64dd01ea9fdb"}},{"path":"/cli/v6/commands/npm-test","context":{"mdxId":"021e7073-2dd1-512c-a5a6-cc9571d5bee9"}},{"path":"/cli/v6/commands/npm-token","context":{"mdxId":"e44e5acb-ee4f-5c38-a922-31f086d35008"}},{"path":"/cli/v6/commands/npm-uninstall","context":{"mdxId":"ba9e47c4-ad68-5b3a-b518-ff375548c7d4"}},{"path":"/cli/v6/commands/npm-unpublish","context":{"mdxId":"5b2f6aef-4e61-5491-96cb-3e9a54f4e0b5"}},{"path":"/cli/v6/commands/npm-update","context":{"mdxId":"a9c99e3c-9a93-52ea-9525-8a54fbebd786"}},{"path":"/cli/v6/commands/npm-version","context":{"mdxId":"13138266-9a85-55ce-ae81-b3b00eff4d85"}},{"path":"/cli/v6/commands/npm-view","context":{"mdxId":"acd08402-c0e8-5aea-8655-ffd66d670b8c"}},{"path":"/cli/v6/commands/npm-whoami","context":{"mdxId":"fbf976e5-8765-596a-9b9a-28f2efd4acd3"}},{"path":"/cli/v6/commands/npm","context":{"mdxId":"cd1669d9-2598-5763-861f-0fce7ba1b4c1"}},{"path":"/cli/v6/configuring-npm/folders","context":{"mdxId":"1202a20e-a5d9-5d80-96e6-070e2c716bc3"}},{"path":"/cli/v6/configuring-npm/install","context":{"mdxId":"00b0c6ef-dcfc-5f0a-8586-7cf872054577"}},{"path":"/cli/v6/configuring-npm/npmrc","context":{"mdxId":"a22ab565-3e28-5a40-b4df-e12a9dcd1df9"}},{"path":"/cli/v6/configuring-npm/package-json","context":{"mdxId":"568a6fc8-febd-5105-8934-904fabeee747"}},{"path":"/cli/v6/configuring-npm/package-lock-json","context":{"mdxId":"16d9c3d5-46db-5161-b5d9-0ab0e248c348"}},{"path":"/cli/v6/configuring-npm/package-locks","context":{"mdxId":"1e23fd8f-c55b-587b-b99d-adf5980cfcd9"}},{"path":"/cli/v6/configuring-npm/shrinkwrap-json","context":{"mdxId":"ee207d02-c9f4-5e99-af8a-744309bf59c7"}},{"path":"/cli/v6/using-npm/config","context":{"mdxId":"b0af0d0d-c719-5cbf-a739-401713a5712b"}},{"path":"/cli/v6/using-npm/developers","context":{"mdxId":"16fb165c-4f16-5bd4-a775-1883e045389c"}},{"path":"/cli/v6/using-npm/disputes","context":{"mdxId":"1a023bbf-5bd4-5683-9fdd-543e2441b8cc"}},{"path":"/cli/v6/using-npm/orgs","context":{"mdxId":"5a5e55a6-af1b-51d5-bd52-89f1fe3f0181"}},{"path":"/cli/v6/using-npm/registry","context":{"mdxId":"460bacc9-db51-579e-9c7e-878cb76764b1"}},{"path":"/cli/v6/using-npm/removal","context":{"mdxId":"5b0cb7b5-9273-5a83-9253-6caedb7e5827"}},{"path":"/cli/v6/using-npm/scope","context":{"mdxId":"24f378eb-e5b7-5cd7-8466-270b73332a88"}},{"path":"/cli/v6/using-npm/scripts","context":{"mdxId":"670b3c4b-f44f-5740-a765-2174f54f48d8"}},{"path":"/cli/v6/using-npm/semver","context":{"mdxId":"accf5699-ba99-5edf-854a-9c3278cc9060"}},{"path":"/cli/v7/commands/npm-access","context":{"mdxId":"e7ff7e32-1d85-5725-9344-f82c87d91237"}},{"path":"/cli/v7/commands/npm-adduser","context":{"mdxId":"6fa754d5-9546-5dec-91a0-9f9c5c96aac5"}},{"path":"/cli/v7/commands/npm-audit","context":{"mdxId":"88386370-e4e7-5fc8-b6c7-36ee74311a49"}},{"path":"/cli/v7/commands/npm-bin","context":{"mdxId":"a2eff430-640c-5131-91f2-8dac3e3bdb37"}},{"path":"/cli/v7/commands/npm-bugs","context":{"mdxId":"16798f51-b3aa-52b8-9604-f38adc6df9cf"}},{"path":"/cli/v7/commands/npm-bundle","context":{"mdxId":"44f3fb5d-68d3-5f27-9b1e-529c496464ff"}},{"path":"/cli/v7/commands/npm-cache","context":{"mdxId":"bf47804f-c926-52d4-9304-cf146d1690f6"}},{"path":"/cli/v7/commands/npm-ci","context":{"mdxId":"8c392cf6-6b2c-5370-ae04-df70c70f41a1"}},{"path":"/cli/v7/commands/npm-completion","context":{"mdxId":"a249fbaa-4dd0-519e-9bbd-20f1f29e5a94"}},{"path":"/cli/v7/commands/npm-config","context":{"mdxId":"bebab92e-bf96-517b-8e2a-dd88a933261b"}},{"path":"/cli/v7/commands/npm-dedupe","context":{"mdxId":"cb6b0576-5045-5a6b-bc08-b0caf9523c34"}},{"path":"/cli/v7/commands/npm-deprecate","context":{"mdxId":"6dd5d1dd-08db-5610-b55e-27782d6315c9"}},{"path":"/cli/v7/commands/npm-dist-tag","context":{"mdxId":"a8fd44d5-1bc6-588f-9224-312e3af277ce"}},{"path":"/cli/v7/commands/npm-docs","context":{"mdxId":"09ad20e2-83c1-52df-a8c1-1c31b3638add"}},{"path":"/cli/v7/commands/npm-doctor","context":{"mdxId":"2d4abb52-a5c3-5075-ac4a-bb3904d99346"}},{"path":"/cli/v7/commands/npm-edit","context":{"mdxId":"d1878e1c-89d7-5a5b-a5ba-62b5753fd8cd"}},{"path":"/cli/v7/commands/npm-exec","context":{"mdxId":"a7da0e25-1e11-5b69-9b6f-ef073561e496"}},{"path":"/cli/v7/commands/npm-explain","context":{"mdxId":"7084f298-b09e-5777-9e51-535f7a5c5922"}},{"path":"/cli/v7/commands/npm-explore","context":{"mdxId":"f82da848-6eb9-5def-924f-d6f0001679ec"}},{"path":"/cli/v7/commands/npm-fund","context":{"mdxId":"31cd2341-b960-58f2-ba0b-2ba16bc02768"}},{"path":"/cli/v7/commands/npm-help-search","context":{"mdxId":"a3c74a66-d65a-57b6-bd74-1caebce4ac24"}},{"path":"/cli/v7/commands/npm-help","context":{"mdxId":"b457fa52-cbbf-5daf-8c17-1c0ccf2936f9"}},{"path":"/cli/v7/commands/npm-hook","context":{"mdxId":"ff51f4c0-bed8-5cf5-a8a6-f4fc78a0b569"}},{"path":"/cli/v7/commands/npm-init","context":{"mdxId":"5f028df4-d395-54de-a625-f56a459bd808"}},{"path":"/cli/v7/commands/npm-install-ci-test","context":{"mdxId":"c17fa124-8c80-50d6-84e8-f229dea529d2"}},{"path":"/cli/v7/commands/npm-install-test","context":{"mdxId":"161607ef-dbf8-5446-b9a5-d7663006a53e"}},{"path":"/cli/v7/commands/npm-install","context":{"mdxId":"61fac420-dca8-51aa-8b3c-a071623a42ef"}},{"path":"/cli/v7/commands/npm-link","context":{"mdxId":"92e3e89d-7f22-5c8c-9620-87a1ffa782ad"}},{"path":"/cli/v7/commands/npm-logout","context":{"mdxId":"4a34b301-60e9-5e2c-98c9-e947c9c556b6"}},{"path":"/cli/v7/commands/npm-ls","context":{"mdxId":"4af5ca60-bb04-5463-9403-3fca0b0f73b3"}},{"path":"/cli/v7/commands/npm-org","context":{"mdxId":"c8b0e66a-af1d-5858-830e-0a4cdbbe44d2"}},{"path":"/cli/v7/commands/npm-outdated","context":{"mdxId":"9beb317a-26e0-5015-be47-f4ee9420dbfd"}},{"path":"/cli/v7/commands/npm-owner","context":{"mdxId":"00d38971-3902-5c37-8bc5-7de956c879a3"}},{"path":"/cli/v7/commands/npm-pack","context":{"mdxId":"464f419c-d9f4-57e7-b345-8f04bbbacbd9"}},{"path":"/cli/v7/commands/npm-ping","context":{"mdxId":"0e4d156e-c5ad-59ba-8c39-277157e4d8ee"}},{"path":"/cli/v7/commands/npm-prefix","context":{"mdxId":"a47600b4-6983-5f75-af01-f17a8383d648"}},{"path":"/cli/v7/commands/npm-profile","context":{"mdxId":"8eb922d0-525e-5d5d-9267-8881ee5e4274"}},{"path":"/cli/v7/commands/npm-prune","context":{"mdxId":"2b7c3fe7-6405-5a9e-892d-4ff8cea7eb9c"}},{"path":"/cli/v7/commands/npm-publish","context":{"mdxId":"a743a29a-5b4f-559b-912f-7f05f7f26137"}},{"path":"/cli/v7/commands/npm-rebuild","context":{"mdxId":"3824ff58-799e-594e-bca9-776510c14b93"}},{"path":"/cli/v7/commands/npm-repo","context":{"mdxId":"887969cc-7751-57a7-a5b5-9c462c18636a"}},{"path":"/cli/v7/commands/npm-restart","context":{"mdxId":"6c79b87e-77d5-5aad-baed-567fddc64d8e"}},{"path":"/cli/v7/commands/npm-root","context":{"mdxId":"b39fa7c0-63f8-5144-847a-6c4e6aa8d8ae"}},{"path":"/cli/v7/commands/npm-run-script","context":{"mdxId":"5c327b30-18ac-51da-bf25-edc965ba69d3"}},{"path":"/cli/v7/commands/npm-search","context":{"mdxId":"836e67e5-a647-5aa9-87e8-27f56cfdf2e8"}},{"path":"/cli/v7/commands/npm-shrinkwrap","context":{"mdxId":"5920d16a-49e2-5581-8060-e9503d34982b"}},{"path":"/cli/v7/commands/npm-star","context":{"mdxId":"6f29e981-b6f6-5362-b0d4-3352d9ea8e05"}},{"path":"/cli/v7/commands/npm-stars","context":{"mdxId":"1d6acaae-7a38-5903-a434-336385d928f4"}},{"path":"/cli/v7/commands/npm-start","context":{"mdxId":"c3f4e901-ffcb-54cc-a011-42dc3067d44b"}},{"path":"/cli/v7/commands/npm-stop","context":{"mdxId":"1420fb3a-5e96-5216-a957-9c7aa4c1b1f9"}},{"path":"/cli/v7/commands/npm-team","context":{"mdxId":"71e84cf3-4495-5f0d-bf37-f3eaaa6feb95"}},{"path":"/cli/v7/commands/npm-test","context":{"mdxId":"7462132d-117d-5537-bba0-863d414bae64"}},{"path":"/cli/v7/commands/npm-token","context":{"mdxId":"6c462675-8461-5cf4-8193-807919c74acb"}},{"path":"/cli/v7/commands/npm-uninstall","context":{"mdxId":"320ab1bd-2f0c-541e-ab61-7cf375bea282"}},{"path":"/cli/v7/commands/npm-unpublish","context":{"mdxId":"5baa5b13-d638-524f-96bc-51147bf7f43d"}},{"path":"/cli/v7/commands/npm-update","context":{"mdxId":"81ab79d5-0d7d-58a5-8dbf-a967653433a5"}},{"path":"/cli/v7/commands/npm-version","context":{"mdxId":"68679a7c-6822-5f52-a542-2dd03dd9f9b7"}},{"path":"/cli/v7/commands/npm-view","context":{"mdxId":"51fdf0d7-98e6-5e39-a5ed-72589974fcf4"}},{"path":"/cli/v7/commands/npm-whoami","context":{"mdxId":"9a411c16-6bdf-5624-86c4-530ad73d8737"}},{"path":"/cli/v7/commands/npm","context":{"mdxId":"c67d2d8a-d4d7-5914-a105-b11284989c63"}},{"path":"/cli/v7/commands/npx","context":{"mdxId":"4951d9e9-e6f0-515f-919b-3b241a4a77df"}},{"path":"/cli/v7/configuring-npm/folders","context":{"mdxId":"c3cdd065-8e5d-57c3-8c93-ffc8c7f2e3df"}},{"path":"/cli/v7/configuring-npm/install","context":{"mdxId":"ac1f7eab-a8a2-596f-bbd5-80f54622556c"}},{"path":"/cli/v7/configuring-npm/npmrc","context":{"mdxId":"2c704256-0af7-555a-9b64-7add3304297d"}},{"path":"/cli/v7/configuring-npm/package-json","context":{"mdxId":"a5e1ef81-4ddc-54f2-89b8-763371b37501"}},{"path":"/cli/v7/configuring-npm/package-lock-json","context":{"mdxId":"a6319cac-d605-58c7-8b74-92fca056d166"}},{"path":"/cli/v7/configuring-npm/package-locks","context":{"mdxId":"ef9a178d-ceca-5bb2-a9d5-c995d9169015"}},{"path":"/cli/v7/configuring-npm/shrinkwrap-json","context":{"mdxId":"6b2204cb-13f5-5afc-9ccc-cb49936866a8"}},{"path":"/cli/v7/using-npm/config","context":{"mdxId":"37e8c8d2-e100-5dd8-be22-072bd9b82ec0"}},{"path":"/cli/v7/using-npm/developers","context":{"mdxId":"a5d1b33b-39ab-5eed-85eb-5b47a6bed611"}},{"path":"/cli/v7/using-npm/disputes","context":{"mdxId":"66019b56-d322-54c9-88c7-eab97a553f21"}},{"path":"/cli/v7/using-npm/orgs","context":{"mdxId":"69ffd118-9ebd-5bbf-89a2-e2a06aab83f8"}},{"path":"/cli/v7/using-npm/registry","context":{"mdxId":"6e5f4e6c-c2cd-5a18-8afb-8822b2510cac"}},{"path":"/cli/v7/using-npm/removal","context":{"mdxId":"ebb1f7c2-3f53-5025-afd4-4ad0d15d5e09"}},{"path":"/cli/v7/using-npm/scope","context":{"mdxId":"c44adc73-8011-526b-96ac-ab542498101a"}},{"path":"/cli/v7/using-npm/scripts","context":{"mdxId":"89e71711-8ca2-5444-9e80-3009de874c75"}},{"path":"/cli/v7/using-npm/semver","context":{"mdxId":"f63123e0-4819-53cb-9921-1ff27c6c99c4"}},{"path":"/searching-for-and-choosing-packages-to-download","context":{"mdxId":"522d1fa1-fe39-5e2e-941e-e24cdc81f4a3"}},{"path":"/uninstalling-packages-and-dependencies","context":{"mdxId":"7d9d9535-012a-567c-8176-6c7b94ff4266"}},{"path":"/updating-packages-downloaded-from-the-registry","context":{"mdxId":"390e337e-8228-5443-a962-b4ef05b9c599"}},{"path":"/about-npm","context":{"mdxId":"ca8a760e-3a4c-5184-a59d-d2242e27efcb"}},{"path":"/enterprise","context":{"mdxId":"028ebb4b-3500-54d5-bf3f-b8a1f287451c"}},{"path":"/getting-started","context":{"mdxId":"04274fc7-1338-5e10-b60b-7be57c867f00"}},{"path":"/integrations","context":{"mdxId":"d7674a58-c742-5bc8-bafe-b9e142e0d57d"}},{"path":"/organizations","context":{"mdxId":"e0c85eb9-b9f8-5c9a-819b-1a7880d33b12"}},{"path":"/packages-and-modules","context":{"mdxId":"eccb2d02-faa7-565b-8b28-d64a7a57d101"}},{"path":"/cli/v6","context":{"mdxId":"b6b595e6-dd79-5408-8a15-e0f1eb23f2f2"}},{"path":"/cli/v7","context":{"mdxId":"cf3d1260-5cde-50ba-b9a5-7020064b4026"}},{"path":"/enterprise/billing-and-seat-management","context":{"mdxId":"7792add3-b60c-598e-a5a6-6f1340a1770a"}},{"path":"/enterprise/migration","context":{"mdxId":"f5c0e49d-2fdc-5bfe-9a73-ce1f78ea99dd"}},{"path":"/enterprise/setup-and-configuration","context":{"mdxId":"ad22bcc4-9203-5889-84d8-226f7176df31"}},{"path":"/enterprise/sunset","context":{"mdxId":"0dc80599-24eb-56b4-9b04-ae0c17482c9a"}},{"path":"/enterprise/user-management","context":{"mdxId":"be7e8db0-14fe-58a9-b964-132644ffdb70"}},{"path":"/getting-started/configuring-your-local-environment","context":{"mdxId":"79ab481a-0efa-5b4f-b2c4-f82b9ae653d9"}},{"path":"/getting-started/managing-your-npm-user-account","context":{"mdxId":"79918654-ea33-5d1b-93ed-9deccb835597"}},{"path":"/getting-started/paying-for-your-npm-user-account","context":{"mdxId":"6c308500-2421-504c-95c4-32388d387e13"}},{"path":"/getting-started/setting-up-your-npm-user-account","context":{"mdxId":"84f0a524-25f4-5345-bc50-a418eb566be7"}},{"path":"/getting-started/troubleshooting","context":{"mdxId":"e25ebdc2-c7ef-518e-83b5-624f48c83cf9"}},{"path":"/integrations/integrating-npm-with-external-services","context":{"mdxId":"f8cd157e-8a3f-50a3-a046-2dfec43015e7"}},{"path":"/organizations/creating-and-managing-organizations","context":{"mdxId":"bfd9f364-1fe3-5d20-b2a4-8853785df1de"}},{"path":"/organizations/managing-organization-members","context":{"mdxId":"dc2c43b3-b477-5396-8251-139f8641b1cd"}},{"path":"/organizations/managing-organization-packages","context":{"mdxId":"9af8ca32-da0e-5671-b7d7-0c407e7e5483"}},{"path":"/organizations/managing-teams","context":{"mdxId":"2031dcee-80dc-59db-9ec2-c3066a6eadaf"}},{"path":"/organizations/paying-for-your-organization","context":{"mdxId":"836ab02c-0d62-597a-821c-9517a681cbd5"}},{"path":"/packages-and-modules/contributing-packages-to-the-registry","context":{"mdxId":"80254e39-35b3-5d35-857a-d58e7e7b37b7"}},{"path":"/packages-and-modules/getting-packages-from-the-registry","context":{"mdxId":"84e0994f-cac8-519c-bb23-29b12eef7d5a"}},{"path":"/packages-and-modules/introduction-to-packages-and-modules","context":{"mdxId":"588f6e3e-c67f-541c-8243-3817fbec39b9"}},{"path":"/packages-and-modules/securing-your-code","context":{"mdxId":"d27213fb-a92e-5cb5-a94c-68f75a86e15c"}},{"path":"/packages-and-modules/updating-and-managing-your-published-packages","context":{"mdxId":"bae3e6a3-91bf-5d92-b195-f8158b88b73e"}},{"path":"/cli/v6/commands","context":{"mdxId":"87031dd6-68de-5593-aa55-54ed06e097c4"}},{"path":"/cli/v6/configuring-npm","context":{"mdxId":"ac1449fc-d310-57b6-aff7-0e249eeea809"}},{"path":"/cli/v6/using-npm","context":{"mdxId":"85305637-95c5-5056-9737-0fe8421cb564"}},{"path":"/cli/v7/commands","context":{"mdxId":"1e4a42f7-70c5-5822-9379-bf6975f29371"}},{"path":"/cli/v7/configuring-npm","context":{"mdxId":"c39a8ccf-31b9-54ad-8ec6-380771444e62"}},{"path":"/cli/v7/using-npm","context":{"mdxId":"164ebdc3-0327-5e83-a3eb-eb7c7ece7890"}}]}}}